Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "RDML ",
 StyleBox["(.rdml, .rdm)", "FilenameExtension"]
}], "ObjectNameAlt",
 CellID->5045],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Import"]],"paclet:ref/Import"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula"],
 " fully supports version 1.2. Versions 1.0 and 1.1 are partially supported, \
i.e., inasmuch as they overlap with version 1.2."
}], "FormatNotes",
 CellID->2043229110]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "Background & Context"
}], "FormatBackground",
 WholeCellGroupOpener->True],

Cell[BoxData[GridBox[{
   {GridBox[{
      {Cell[TextData[{
        StyleBox["\[FilledSmallSquare] ", "FormatUsageSeparator"],
        "MIME type: ",
        StyleBox["chemical/x-rdml+xml", "InlineCode"]
       }], "FormatUsage",
        ParagraphIndent->-10]},
      {Cell[TextData[{
        StyleBox["\[FilledSmallSquare] ", "FormatUsageSeparator"],
        "Real-time PCR Data Markup Language (RDML) is a structured and \
universal data standard for exchanging quantitative PCR (qPCR) data."
       }], "FormatUsage",
        ParagraphIndent->-10]},
      {Cell[TextData[{
        StyleBox["\[FilledSmallSquare] ", "FormatUsageSeparator"],
        "RDML is an acronym for Real-time PCR Data Markup Language."
       }], "FormatUsage",
        ParagraphIndent->-10]}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
     GridBoxItemSize->{"Columns" -> {
         Scaled[1.]}},
     GridBoxSpacings->{"Rows" -> {{1.2}}}], GridBox[{
      {Cell[TextData[{
        StyleBox["\[FilledSmallSquare] ", "FormatUsageSeparator"],
        "XML-based text format."
       }], "FormatUsage",
        ParagraphIndent->-10]},
      {Cell[TextData[{
        StyleBox["\[FilledSmallSquare] ", "FormatUsageSeparator"],
        "The RDML format is developed and maintained by the RDML consortium \
(http://rdml.org)."
       }], "FormatUsage",
        ParagraphIndent->-10]},
      {Cell[TextData[{
        StyleBox["\[FilledSmallSquare] ", "FormatUsageSeparator"],
        "The RDML import functionality here provided is by Magno et al. \
(2017) (https://github.com/ramiromagno/rdml)."
       }], "FormatUsage",
        ParagraphIndent->-10]}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
     GridBoxItemSize->{"Columns" -> {
         Scaled[1.]}},
     GridBoxSpacings->{"Rows" -> {{1.2}}}]}
  },
  GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
  GridBoxItemSize->{"Columns" -> {
      Scaled[0.5], {
       Scaled[0.5]}}},
  GridBoxSpacings->{"Columns" -> {{1.3}}}]], "FormatUsage",
 CellMargins->{{24, 24}, {24, 18}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "Installation"
}], "ImportExportSection",
 WholeCellGroupOpener->True],

Cell["", "SectionHeaderSpacer"],

Cell["\<\
You need the package file rdml.m to import RDML files and the file \
RDML_v1_2_REC.xsd to be able to validate them against the XML schema. In \
addition, you will also need this notebook to access this documentation: \
RDML.nb.\
\>", "FormatNotes",
 CellID->1601744668],

Cell["\<\
To install all the required files clone the github repository: \
https://github.com/ramiromagno/rdml. Alternatively, download and extract the \
zip archive: https://github.com/ramiromagno/rdml/archive/master.zip.\
\>", "FormatNotes",
 CellID->1947091812],

Cell["", "SectionFooterSpacer",
 CellID->1794874519]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "Import"
}], "ImportExportSection",
 WholeCellGroupOpener->True,
 CellID->13855],

Cell["", "SectionHeaderSpacer"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["Import"]],"paclet:ref/Import"},
    "RefLink",
    BaseStyle->{"InlineFormula"}], "[", "\"\<\!\(\*
StyleBox[\"file\", \"TI\"]\).rdml\>\"", "]"}]], "InlineFormula"],
 " reads an RDML file and returns a ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Dataset"]],"paclet:ref/Dataset"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula"],
 " expression; this expression is a nested structure of lists and \
associations whose hierarchy reflects that of the RDML schema."
}], "FormatNotes",
 CellID->12927],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["Import"]],"paclet:ref/Import"},
    "RefLink",
    BaseStyle->{"InlineFormula"}], "[", 
   RowBox[{"\"\<\!\(\*
StyleBox[\"file\", \"TI\"]\)\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<RDML\>\"", ",", 
      StyleBox["elem", "TI"], ",", 
      StyleBox["\[Ellipsis]", "TR"]}], "}"}]}], "]"}]], "InlineFormula"],
 " imports the specified top-element from an RDML file."
}], "FormatNotes"],

Cell["", "SectionFooterSpacer"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "Elements"
}], "ElementsSection",
 WholeCellGroupOpener->True,
 CellID->32145],

Cell["", "SectionHeaderSpacer"],

Cell[TextData[{
 "Top-level RDML ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Import"]],"paclet:ref/Import"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula"],
 " elements:"
}], "FormatNotes",
 CellID->17282],

Cell[BoxData[GridBox[{
   {Cell["      ", "TableRowIcon"], "\"\<version\>\"", Cell[
    "RDML schema version", "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<dateMade\>\"", Cell[
    "date and time stamp of the creation of the file", "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<dateUpdated\>\"", Cell[
    "date and time stamp of the last update of the file", "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<id\>\"", Cell[
    "publisher and id to the RDML file", "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<experimenter\>\"", Cell[
    "list of experimenters involved in the experiments reported", 
     "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<documentation\>\"", Cell[
    "multi-purpose documentation system", "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<dye\>\"", Cell["\<\
information regarding the fluorescent chemical compounds used as dyes for the \
real-time monitoring of the qPCR reaction\
\>", "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<sample\>\"", Cell["\<\
sample describes either standard samples used in a dilution series or \
different biological sources and/or conditions/treatments performed on \
biological material\
\>", "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<target\>\"", Cell["\<\
target is defined by the primer (and probe) mix added to the sample to \
specifically amplify the target sequence (amplicon)\
\>", "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<thermalCyclingConditions\>\"", 
    Cell["\<\
temperature and time steps taken by a thermocycler in order to amplify the DNA\
\>", "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<experiment\>\"", Cell[
    "data collected during one (or more) qPCR runs", "TableText"]}
  }]], "2ColumnTableMod",
 GridBoxOptions->{
 GridBoxBackground->{
  "Columns" -> {{None}}, "ColumnsIndexed" -> {}, 
   "Rows" -> {None, None, {None}}, "RowsIndexed" -> {}},
 GridBoxDividers->{"Rows" -> {{True, True, True, True}}}},
 CellID->1825],

Cell["", "SectionFooterSpacer"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "Import Options"
}], "OptionsSection",
 WholeCellGroupOpener->True,
 CellID->23811],

Cell["", "SectionHeaderSpacer"],

Cell["Import options:", "FormatNotes",
 CellID->1911960202],

Cell[BoxData[GridBox[{
   {Cell["      ", "TableRowIcon"], "\"\<ValidateAgainstXSD\>\"", 
    ButtonBox["False",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/False"], Cell["\<\
whether to validate file against RDML schema before importing\
\>", "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<Compressed\>\"", 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "whether to assume that the file is a compressed archive", "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<Dataset\>\"", 
    ButtonBox["True",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/True"], Cell[
    "whether to return a Dataset structure expression", "TableText"]}
  }]], "3ColumnTableMod",
 GridBoxOptions->{
 GridBoxBackground->{
  "Columns" -> {{None}}, "ColumnsIndexed" -> {}, 
   "Rows" -> {None, None, None, {None}}, "RowsIndexed" -> {}},
 GridBoxDividers->{"Rows" -> {{True, True, True, True, True}}}},
 CellID->2123520593],

Cell[CellGroupData[{

Cell["ValidateAgainstXSD", "ExampleSection", "ExampleSection"],

Cell["\<\
By default, the importer will not attempt to validate the file against the \
XML schema. If the file to be imported is not compliant with version 1.2, it \
will still attempt to import inasmuch as it is compatible with version 1.2.\
\>", "ExampleText",
 CellID->13000],

Cell["\<\
However, to check if the file to be imported complies with the XML Schema, \
set the option ValidateAgainstXSD->True. If the file fails to be validated, a \
warning is issued and Import returns $Failed:\
\>", "ExampleText",
 CellID->1192530559],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{
  "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/\
QPCRCourseApril2015_plate_1_.rdml?raw=true\>\"", ",", "\"\<RDML\>\"", ",", 
   RowBox[{"\"\<ValidateAgainstXSD\>\"", "\[Rule]", "True"}]}], 
  "]"}]], "Input",
 CellLabel->"In[6]:=",
 CellID->480282885],

Cell[BoxData[
 TemplateBox[{
  "Private`import","xsderr",
   "\"Could not validate the file \
\\!\\(\\*RowBox[{\\\"\\\\\\\"/tmp/m00003619601/QPCRCourseApril2015_plate_1_.\
rdml\\\\\\\"\\\"}]\\) against \
\\!\\(\\*RowBox[{\\\"\\\\\\\"/home/rmagno/code/mathematica/pkg/rdml/RDML_v1_2_\
REC.xsd\\\\\\\"\\\"}]\\): \\!\\(\\*RowBox[{\\\"\\\\\\\"cvc-enumeration-valid: \
Value 'LinRegPCR, threshold per target' is not facet-valid with respect to \
enumeration '[automated threshold and baseline settings, manual threshold and \
baseline settings, second derivative maximum, other]'. It must be a value \
from the enumeration.\\\\\\\"\\\"}]\\).\"",2,6,10,21413936451355101025,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellContext->"Cell$$13873`",
 CellLabel->"During evaluation of In[6]:=",
 CellID->1360727830],

Cell[BoxData["$Failed"], "Output",
 CellContext->"Cell$$13873`",
 CellLabel->"Out[6]=",
 CellID->549029420]
}, Open  ]],

Cell["\<\
Conversely, if no errors are detected, the data is simply returned:\
\>", "ExampleText",
 CellID->600196800],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{
  "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?raw=\
true\>\"", ",", "\"\<RDML\>\"", ",", 
   RowBox[{"\"\<ValidateAgainstXSD\>\"", "\[Rule]", "True"}]}], 
  "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->1736201459],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 11, "InitialType" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Vector[
            TypeSystem`Struct[{"publisher", "serialNumber", "MD5Hash"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], TypeSystem`UnknownType}], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "email", "firstName", "labAddress", "labName", "lastName"]], 
             TypeSystem`Atom[String], 5], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 1], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"description"}, {
              TypeSystem`Atom[String]}], 2], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
              TypeSystem`Atom[String], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], 
              TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
              TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
              TypeSystem`UnknownType}], 3], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Vector[
               TypeSystem`Atom[String], 1], 
              TypeSystem`Vector[
               TypeSystem`Struct[{"name", "id"}, {
                 TypeSystem`Atom[
                  TypeSystem`Enumeration["NCBI Gene Database"]], 
                 TypeSystem`Atom[String]}], 1], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["ref", "toi"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["SYBR"]], 
              
              TypeSystem`Struct[{
               "forwardPrimer", "reversePrimer", "probe1", "probe2", 
                "amplicon"}, {
                
                TypeSystem`Struct[{
                 "threePrimeTag", "fivePrimeTag", "sequence"}, {
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                  TypeSystem`Atom[String]}], 
                
                TypeSystem`Struct[{
                 "threePrimeTag", "fivePrimeTag", "sequence"}, {
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                  TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
                TypeSystem`UnknownType, 
                
                TypeSystem`Struct[{
                 "threePrimeTag", "fivePrimeTag", "sequence"}, {
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                  TypeSystem`Atom[String]}]}], TypeSystem`UnknownType}], 10], 
           
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "lidTemperature", "experimenter",
               "step"}, {
              TypeSystem`Atom[String], TypeSystem`UnknownType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[
               TypeSystem`Atom[String], 1], 
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "nr", "description", "temperature", "gradient", "loop", 
                 "pause", "lidOpen"}, {
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[String], 
                 
                 TypeSystem`Struct[{
                  "temperature", "duration", "temperatureChange", 
                   "durationChange", "measure", "ramp"}, {
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                   TypeSystem`Atom[String], TypeSystem`UnknownType}], 
                 TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["goto", "repeat"]], 
                  TypeSystem`Atom[Integer], 2], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType}], 5]}], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"description", "documentation", "run"}, {
              TypeSystem`Atom[String], TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`Vector[
                  TypeSystem`Atom[String], 1], 
                 TypeSystem`Atom[String], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["name", "version"]], 
                  TypeSystem`Atom[String], 2], 
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[String], 
                 
                 TypeSystem`Struct[{
                  "rows", "columns", "rowLabel", "columnLabel"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String]}], 
                 TypeSystem`Atom[DateObject], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[
                    TypeSystem`Enumeration["R-dsH18", "R-HCtrl13", "R-MoH9"]], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real]}], 61], 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"tmp", "fluor"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real]}], 61], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`UnknownType}], 1]}], 90]}], 1]}], 1]}], 
        "Shape" -> TypeSystem`PackageScope`DocumentShape[
          Association[{"version"} -> 
           TypeSystem`PackageScope`AtomShape[28.800000000000004`], {
            "dateMade"} -> 
           TypeSystem`PackageScope`AtomShape[75], {"dateUpdated"} -> 
           TypeSystem`PackageScope`AtomShape[75], {"id"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"experimenter"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"documentation"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"dye"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"sample"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"target"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {
            "thermalCyclingConditions"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"experiment"} -> 
           TypeSystem`PackageScope`ElidedShape[1]], 1], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[108738011], "Type" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Vector[
            TypeSystem`Struct[{"publisher", "serialNumber", "MD5Hash"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], TypeSystem`UnknownType}], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "email", "firstName", "labAddress", "labName", "lastName"]], 
             TypeSystem`Atom[String], 5], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 1], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"description"}, {
              TypeSystem`Atom[String]}], 2], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
              TypeSystem`Atom[String], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], 
              TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
              TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
              TypeSystem`UnknownType}], 3], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Vector[
               TypeSystem`Atom[String], 1], 
              TypeSystem`Vector[
               TypeSystem`Struct[{"name", "id"}, {
                 TypeSystem`Atom[
                  TypeSystem`Enumeration["NCBI Gene Database"]], 
                 TypeSystem`Atom[String]}], 1], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["ref", "toi"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["SYBR"]], 
              
              TypeSystem`Struct[{
               "forwardPrimer", "reversePrimer", "probe1", "probe2", 
                "amplicon"}, {
                
                TypeSystem`Struct[{
                 "threePrimeTag", "fivePrimeTag", "sequence"}, {
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                  TypeSystem`Atom[String]}], 
                
                TypeSystem`Struct[{
                 "threePrimeTag", "fivePrimeTag", "sequence"}, {
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                  TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
                TypeSystem`UnknownType, 
                
                TypeSystem`Struct[{
                 "threePrimeTag", "fivePrimeTag", "sequence"}, {
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                  TypeSystem`Atom[String]}]}], TypeSystem`UnknownType}], 10], 
           
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "lidTemperature", "experimenter",
               "step"}, {
              TypeSystem`Atom[String], TypeSystem`UnknownType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[
               TypeSystem`Atom[String], 1], 
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "nr", "description", "temperature", "gradient", "loop", 
                 "pause", "lidOpen"}, {
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[String], 
                 
                 TypeSystem`Struct[{
                  "temperature", "duration", "temperatureChange", 
                   "durationChange", "measure", "ramp"}, {
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                   TypeSystem`Atom[String], TypeSystem`UnknownType}], 
                 TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["goto", "repeat"]], 
                  TypeSystem`Atom[Integer], 2], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType}], 5]}], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"description", "documentation", "run"}, {
              TypeSystem`Atom[String], TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`Vector[
                  TypeSystem`Atom[String], 1], 
                 TypeSystem`Atom[String], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["name", "version"]], 
                  TypeSystem`Atom[String], 2], 
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[String], 
                 
                 TypeSystem`Struct[{
                  "rows", "columns", "rowLabel", "columnLabel"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String]}], 
                 TypeSystem`Atom[DateObject], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[
                    TypeSystem`Enumeration["R-dsH18", "R-HCtrl13", "R-MoH9"]], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real]}], 61], 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"tmp", "fluor"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real]}], 61], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`UnknownType}], 1]}], 90]}], 1]}], 1]}], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[108738011]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"version\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"version\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["version"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["1.2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dateMade\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateMade\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["dateMade"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], Background -> GrayLevel[0.95],
                 Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "\"22 Apr 2013 20:29:44\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["dateUpdated"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "\"30 Apr 2013 12:08:11\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"id\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"id\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["id"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 1], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 1], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["id"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["experimenter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"rpa"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"rpa"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["experimenter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"assembly_HoxBCluster"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"assembly_HoxBCluster"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dye\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dye\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["dye"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"SYBR", "EVAGREEN"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"SYBR", "EVAGREEN"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["dye"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"sample\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sample\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 3], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"R-MoH9", "R-HCtrl13", "R-dsH18"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 3], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"R-MoH9", "R-HCtrl13", "R-dsH18"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"target\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"target\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 10], "\[RightAssociation]"}], 
                    Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 10], "\[RightAssociation]"}], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["thermalCyclingConditions"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"Protocolo-EvaGreen_55\.baC_60cycles.prcl"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"Protocolo-EvaGreen_55\.baC_60cycles.prcl"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["thermalCyclingConditions"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], 
                BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"All Wells"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"All Wells"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][{
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1767156583]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1767156583][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$13873`",
 CellLabel->"Out[5]=",
 CellID->1643759580]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Compressed", "ExampleSection", "ExampleSection"],

Cell["\<\
According to the RDML Consortium guidelines, the XML file containing the RDML \
compliant data should be stored in a file named rdml_data.xml. This file \
should be compressed into a pkzip compatible archive. The archive can be \
freely named, however instead of holding the .zip extension, it should hold \
the .rdml (preferably) or .rdm extension. In addition, RDML compatible \
software should be able to read compressed .rdml or .rdm files, as well as \
uncompressed .xml files.\
\>", "ExampleText",
 CellID->233646135],

Cell["\<\
By default the importer tries to determine if the file is compressed or not \
(default option Compressed->Automatic) by checking if the first two bytes of \
the file correspond to the ASCII string PK.\
\>", "ExampleText",
 CellID->738275055],

Cell["\<\
For instance, if you'd want to manually check if some file is a pkzip \
compatible archive, you could run:\
\>", "ExampleText",
 CellID->1020787471],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Import", "[", 
   RowBox[{
   "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/\
QPCRCourseApril2015_plate_1_.rdml?raw=true\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Byte\>\"", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}]}], "}"}]}], "]"}], "//", 
  "FromCharacterCode"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->734886516],

Cell[BoxData["\<\"PK\"\>"], "Output",
 CellContext->"Cell$$14502`",
 CellLabel->"Out[1]=",
 CellID->1300927775]
}, Open  ]],

Cell["\<\
The following three Import calls are all equivalent for a compressed RDML \
file:\
\>", "ExampleText",
 CellID->1476260055],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "file", "=", 
   "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/\
QPCRCourseApril2015_plate_1_.rdml?raw=true\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Import", "[", 
  RowBox[{"file", ",", " ", "\"\<RDML\>\""}], "]"}], "\n", 
 RowBox[{"Import", "[", 
  RowBox[{"file", ",", "\"\<RDML\>\"", ",", 
   RowBox[{"\"\<Compressed\>\"", "\[Rule]", "Automatic"}]}], "]"}], "\n", 
 RowBox[{"Import", "[", 
  RowBox[{"file", ",", "\"\<RDML\>\"", ",", 
   RowBox[{"\"\<Compressed\>\"", "\[Rule]", "True"}]}], "]"}]}], "Input",
 CellLabel->"In[5]:=",
 CellID->268045235],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 11, "InitialType" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], TypeSystem`UnknownType, 
           TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 1], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`UnknownType, 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Tuple[{
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["operator"]], 
                  TypeSystem`Atom[String]}], 
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["tissue"]], 
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["Adult", "ND1"]]}]}], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 34], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["toi"]], TypeSystem`UnknownType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["DNA binding Dye"]], 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 6], 
           TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{"description", "documentation", "run"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 TypeSystem`Atom[String], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 
                 TypeSystem`Struct[{
                  "rows", "columns", "rowLabel", "columnLabel"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "ANF", "cTNI", "GAPDH", "HPRT", "mQ", "SCX"]], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "baseline_error", "eff_outlier_and_no_plateau", 
                    "no_amplif", "skipped_by_user"]], 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 45], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 1]}], 288]}], 1]}], 1]}], 
        "Shape" -> TypeSystem`PackageScope`DocumentShape[
          
          Association[{"version"} -> 
           TypeSystem`PackageScope`AtomShape[28.800000000000004`], {
            "dateMade"} -> 
           TypeSystem`PackageScope`AtomShape[75], {"dateUpdated"} -> 
           TypeSystem`PackageScope`UnknownShape, {"id"} -> 
           TypeSystem`PackageScope`UnknownShape, {"experimenter"} -> 
           TypeSystem`PackageScope`UnknownShape, {"documentation"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"dye"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"sample"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"target"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {
            "thermalCyclingConditions"} -> 
           TypeSystem`PackageScope`UnknownShape, {"experiment"} -> 
           TypeSystem`PackageScope`ElidedShape[1]], 1], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[913723507], "Type" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], TypeSystem`UnknownType, 
           TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 1], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`UnknownType, 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Tuple[{
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["operator"]], 
                  TypeSystem`Atom[String]}], 
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["tissue"]], 
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["Adult", "ND1"]]}]}], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 34], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["toi"]], TypeSystem`UnknownType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["DNA binding Dye"]], 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 6], 
           TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{"description", "documentation", "run"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 TypeSystem`Atom[String], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 
                 TypeSystem`Struct[{
                  "rows", "columns", "rowLabel", "columnLabel"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "ANF", "cTNI", "GAPDH", "HPRT", "mQ", "SCX"]], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "baseline_error", "eff_outlier_and_no_plateau", 
                    "no_amplif", "skipped_by_user"]], 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 45], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 1]}], 288]}], 1]}], 1]}], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[913723507]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"version\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"version\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["version"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["1.2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dateMade\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateMade\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["dateMade"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], Background -> GrayLevel[0.95],
                 Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox["\"3 Jun 2015 13:13:41\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["dateUpdated"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"id\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"id\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["id"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["experimenter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"RDML created by LinRegPCR"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"RDML created by LinRegPCR"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dye\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dye\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["dye"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[
                    Association["DNA binding Dye" -> Missing["NotAvailable"]],
                     ShowStringCharacters -> False], 
                    Style[
                    Style[
                    Association["DNA binding Dye" -> Missing["NotAvailable"]],
                     ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["dye"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"]]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"sample\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sample\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 34], "\[RightAssociation]"}], 
                    Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 34], "\[RightAssociation]"}], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"target\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"target\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 6], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"SCX", "ANF", "cTNI", "GAPDH", "HPRT", "mQ"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 6], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"SCX", "ANF", "cTNI", "GAPDH", "HPRT", "mQ"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["thermalCyclingConditions"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"QPCRCourseApril2015plusmeltvoorJan_JMR__xlsx"}, 
                    ", ", BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    Row[{"QPCRCourseApril2015plusmeltvoorJan_JMR__xlsx"}, 
                    ", ", BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][{
                    
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
                 
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 702927368]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[702927368][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$14502`",
 CellLabel->"Out[6]=",
 CellID->1951092396],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 11, "InitialType" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], TypeSystem`UnknownType, 
           TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 1], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`UnknownType, 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Tuple[{
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["operator"]], 
                  TypeSystem`Atom[String]}], 
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["tissue"]], 
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["Adult", "ND1"]]}]}], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 34], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["toi"]], TypeSystem`UnknownType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["DNA binding Dye"]], 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 6], 
           TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{"description", "documentation", "run"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 TypeSystem`Atom[String], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 
                 TypeSystem`Struct[{
                  "rows", "columns", "rowLabel", "columnLabel"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "ANF", "cTNI", "GAPDH", "HPRT", "mQ", "SCX"]], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "baseline_error", "eff_outlier_and_no_plateau", 
                    "no_amplif", "skipped_by_user"]], 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 45], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 1]}], 288]}], 1]}], 1]}], 
        "Shape" -> TypeSystem`PackageScope`DocumentShape[
          
          Association[{"version"} -> 
           TypeSystem`PackageScope`AtomShape[28.800000000000004`], {
            "dateMade"} -> 
           TypeSystem`PackageScope`AtomShape[75], {"dateUpdated"} -> 
           TypeSystem`PackageScope`UnknownShape, {"id"} -> 
           TypeSystem`PackageScope`UnknownShape, {"experimenter"} -> 
           TypeSystem`PackageScope`UnknownShape, {"documentation"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"dye"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"sample"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"target"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {
            "thermalCyclingConditions"} -> 
           TypeSystem`PackageScope`UnknownShape, {"experiment"} -> 
           TypeSystem`PackageScope`ElidedShape[1]], 1], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[10709015], "Type" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], TypeSystem`UnknownType, 
           TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 1], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`UnknownType, 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Tuple[{
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["operator"]], 
                  TypeSystem`Atom[String]}], 
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["tissue"]], 
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["Adult", "ND1"]]}]}], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 34], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["toi"]], TypeSystem`UnknownType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["DNA binding Dye"]], 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 6], 
           TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{"description", "documentation", "run"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 TypeSystem`Atom[String], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 
                 TypeSystem`Struct[{
                  "rows", "columns", "rowLabel", "columnLabel"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "ANF", "cTNI", "GAPDH", "HPRT", "mQ", "SCX"]], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "baseline_error", "eff_outlier_and_no_plateau", 
                    "no_amplif", "skipped_by_user"]], 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 45], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 1]}], 288]}], 1]}], 1]}], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[10709015]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"version\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"version\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["version"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["1.2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dateMade\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateMade\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["dateMade"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], Background -> GrayLevel[0.95],
                 Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox["\"3 Jun 2015 13:13:41\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["dateUpdated"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"id\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"id\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["id"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["experimenter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"RDML created by LinRegPCR"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"RDML created by LinRegPCR"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dye\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dye\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["dye"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[
                    Association["DNA binding Dye" -> Missing["NotAvailable"]],
                     ShowStringCharacters -> False], 
                    Style[
                    Style[
                    Association["DNA binding Dye" -> Missing["NotAvailable"]],
                     ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["dye"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"]]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"sample\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sample\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 34], "\[RightAssociation]"}], 
                    Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 34], "\[RightAssociation]"}], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"target\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"target\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 6], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"SCX", "ANF", "cTNI", "GAPDH", "HPRT", "mQ"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 6], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"SCX", "ANF", "cTNI", "GAPDH", "HPRT", "mQ"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["thermalCyclingConditions"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"QPCRCourseApril2015plusmeltvoorJan_JMR__xlsx"}, 
                    ", ", BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"QPCRCourseApril2015plusmeltvoorJan_JMR__xlsx"}, 
                    ", ", BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][{
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1237547748]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1237547748][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$14502`",
 CellLabel->"Out[7]=",
 CellID->1381529210],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 11, "InitialType" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], TypeSystem`UnknownType, 
           TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 1], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`UnknownType, 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Tuple[{
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["operator"]], 
                  TypeSystem`Atom[String]}], 
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["tissue"]], 
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["Adult", "ND1"]]}]}], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 34], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["toi"]], TypeSystem`UnknownType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["DNA binding Dye"]], 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 6], 
           TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{"description", "documentation", "run"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 TypeSystem`Atom[String], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 
                 TypeSystem`Struct[{
                  "rows", "columns", "rowLabel", "columnLabel"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "ANF", "cTNI", "GAPDH", "HPRT", "mQ", "SCX"]], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "baseline_error", "eff_outlier_and_no_plateau", 
                    "no_amplif", "skipped_by_user"]], 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 45], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 1]}], 288]}], 1]}], 1]}], 
        "Shape" -> TypeSystem`PackageScope`DocumentShape[
          
          Association[{"version"} -> 
           TypeSystem`PackageScope`AtomShape[28.800000000000004`], {
            "dateMade"} -> 
           TypeSystem`PackageScope`AtomShape[75], {"dateUpdated"} -> 
           TypeSystem`PackageScope`UnknownShape, {"id"} -> 
           TypeSystem`PackageScope`UnknownShape, {"experimenter"} -> 
           TypeSystem`PackageScope`UnknownShape, {"documentation"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"dye"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"sample"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"target"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {
            "thermalCyclingConditions"} -> 
           TypeSystem`PackageScope`UnknownShape, {"experiment"} -> 
           TypeSystem`PackageScope`ElidedShape[1]], 1], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[663898558], "Type" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], TypeSystem`UnknownType, 
           TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 1], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`UnknownType, 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Tuple[{
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["operator"]], 
                  TypeSystem`Atom[String]}], 
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["tissue"]], 
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["Adult", "ND1"]]}]}], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 34], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["toi"]], TypeSystem`UnknownType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["DNA binding Dye"]], 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 6], 
           TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{"description", "documentation", "run"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 TypeSystem`Atom[String], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 
                 TypeSystem`Struct[{
                  "rows", "columns", "rowLabel", "columnLabel"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "ANF", "cTNI", "GAPDH", "HPRT", "mQ", "SCX"]], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "baseline_error", "eff_outlier_and_no_plateau", 
                    "no_amplif", "skipped_by_user"]], 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 45], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 1]}], 288]}], 1]}], 1]}], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[663898558]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"version\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"version\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["version"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["1.2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dateMade\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateMade\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["dateMade"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], Background -> GrayLevel[0.95],
                 Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox["\"3 Jun 2015 13:13:41\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["dateUpdated"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"id\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"id\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["id"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["experimenter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"RDML created by LinRegPCR"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"RDML created by LinRegPCR"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dye\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dye\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["dye"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[
                    Association["DNA binding Dye" -> Missing["NotAvailable"]],
                     ShowStringCharacters -> False], 
                    Style[
                    Style[
                    Association["DNA binding Dye" -> Missing["NotAvailable"]],
                     ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["dye"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"]]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"sample\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sample\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 34], "\[RightAssociation]"}], 
                    Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 34], "\[RightAssociation]"}], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"target\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"target\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 6], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"SCX", "ANF", "cTNI", "GAPDH", "HPRT", "mQ"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 6], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"SCX", "ANF", "cTNI", "GAPDH", "HPRT", "mQ"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["thermalCyclingConditions"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"QPCRCourseApril2015plusmeltvoorJan_JMR__xlsx"}, 
                    ", ", BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"QPCRCourseApril2015plusmeltvoorJan_JMR__xlsx"}, 
                    ", ", BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][{
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1014682869]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1014682869][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$14502`",
 CellLabel->"Out[8]=",
 CellID->1517180774]
}, Open  ]],

Cell["\<\
Explicitly forcing the importer to assume that the file is not compressed \
(when it actually is) will result in $Failed with XML-related parsing errors:\
\
\>", "ExampleText",
 CellID->863567057],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{"file", ",", "\"\<RDML\>\"", ",", 
   RowBox[{"\"\<Compressed\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellLabel->"In[9]:=",
 CellID->584120498],

Cell[BoxData[
 TemplateBox[{
  "XML`Parser`XMLGet","prserr",
   "\"TranscodingException: An invalid multi-byte source text sequence was \
encountered at Line: 1 Character: 1 in \
/tmp/m00004819601/QPCRCourseApril2015_plate_1_.rdml.\"",2,9,11,
   21413936451355101025,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellContext->"Cell$$14502`",
 CellLabel->"During evaluation of In[9]:=",
 CellID->461743794],

Cell[BoxData[
 TemplateBox[{
  "Import","fmterr",
   "\"Cannot import data as \\!\\(\\*RowBox[{\\\"\\\\\\\"XML\\\\\\\"\\\"}]\\) \
format.\"",2,9,12,21413936451355101025,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellContext->"Cell$$14502`",
 CellLabel->"During evaluation of In[9]:=",
 CellID->663175221],

Cell[BoxData["$Failed"], "Output",
 CellContext->"Cell$$14502`",
 CellLabel->"Out[9]=",
 CellID->1816333399]
}, Open  ]],

Cell["\<\
The importer will run smoothly on an uncompressed file (rdml_data.xml is \
QPCRCourseApril2015_plate _ 1_. rdml uncompressed):\
\>", "ExampleText",
 CellID->942026679],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{
  "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rdml_data.xml?\
raw=true\>\"", ",", "\"\<RDML\>\"", ",", 
   RowBox[{"\"\<Compressed\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellLabel->"In[10]:=",
 CellID->1712462358],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 11, "InitialType" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], TypeSystem`UnknownType, 
           TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 1], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`UnknownType, 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Tuple[{
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["operator"]], 
                  TypeSystem`Atom[String]}], 
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["tissue"]], 
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["Adult", "ND1"]]}]}], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 34], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["toi"]], TypeSystem`UnknownType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["DNA binding Dye"]], 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 6], 
           TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{"description", "documentation", "run"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 TypeSystem`Atom[String], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 
                 TypeSystem`Struct[{
                  "rows", "columns", "rowLabel", "columnLabel"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "ANF", "cTNI", "GAPDH", "HPRT", "mQ", "SCX"]], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "baseline_error", "eff_outlier_and_no_plateau", 
                    "no_amplif", "skipped_by_user"]], 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 45], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 1]}], 288]}], 1]}], 1]}], 
        "Shape" -> TypeSystem`PackageScope`DocumentShape[
          
          Association[{"version"} -> 
           TypeSystem`PackageScope`AtomShape[28.800000000000004`], {
            "dateMade"} -> 
           TypeSystem`PackageScope`AtomShape[75], {"dateUpdated"} -> 
           TypeSystem`PackageScope`UnknownShape, {"id"} -> 
           TypeSystem`PackageScope`UnknownShape, {"experimenter"} -> 
           TypeSystem`PackageScope`UnknownShape, {"documentation"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"dye"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"sample"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"target"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {
            "thermalCyclingConditions"} -> 
           TypeSystem`PackageScope`UnknownShape, {"experiment"} -> 
           TypeSystem`PackageScope`ElidedShape[1]], 1], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1032655625], "Type" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], TypeSystem`UnknownType, 
           TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 1], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`UnknownType, 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Tuple[{
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["operator"]], 
                  TypeSystem`Atom[String]}], 
                TypeSystem`Struct[{"property", "value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["tissue"]], 
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["Adult", "ND1"]]}]}], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 34], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["toi"]], TypeSystem`UnknownType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["DNA binding Dye"]], 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 6], 
           TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{"description", "documentation", "run"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 TypeSystem`Atom[String], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, 
                 
                 TypeSystem`Struct[{
                  "rows", "columns", "rowLabel", "columnLabel"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "ANF", "cTNI", "GAPDH", "HPRT", "mQ", "SCX"]], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "baseline_error", "eff_outlier_and_no_plateau", 
                    "no_amplif", "skipped_by_user"]], 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 45], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Atom[Real]}], 1]}], 288]}], 1]}], 1]}], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[1032655625]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"version\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"version\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["version"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["1.2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dateMade\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateMade\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["dateMade"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], Background -> GrayLevel[0.95],
                 Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox["\"3 Jun 2015 13:13:41\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["dateUpdated"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"id\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"id\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["id"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["experimenter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"RDML created by LinRegPCR"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"RDML created by LinRegPCR"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dye\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dye\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["dye"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[
                    Association["DNA binding Dye" -> Missing["NotAvailable"]],
                     ShowStringCharacters -> False], 
                    Style[
                    Style[
                    Association["DNA binding Dye" -> Missing["NotAvailable"]],
                     ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["dye"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"]]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"sample\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sample\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 34], "\[RightAssociation]"}], 
                    Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 34], "\[RightAssociation]"}], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"target\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"target\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 6], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"SCX", "ANF", "cTNI", "GAPDH", "HPRT", "mQ"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 6], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"SCX", "ANF", "cTNI", "GAPDH", "HPRT", "mQ"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["thermalCyclingConditions"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"QPCRCourseApril2015plusmeltvoorJan_JMR__xlsx"}, 
                    ", ", BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"QPCRCourseApril2015plusmeltvoorJan_JMR__xlsx"}, 
                    ", ", BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][{
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2059999720]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2059999720][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$14502`",
 CellLabel->"Out[10]=",
 CellID->941108798]
}, Open  ]],

Cell["\<\
If the file extension is not .rdml or .rdm, then the file type is mandatory, \
otherwise Import will read the input file as XML and return a XMLObject \
expression:\
\>", "ExampleText",
 CellID->1441572356],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rdml_data.xml?\
raw=true\>\"", "]"}]], "Input",
 CellLabel->"In[11]:=",
 CellID->165175510],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{
          RowBox[{"XMLObject", "[", "\<\"Document\"\>", "]"}], "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"XMLObject", "[", "\<\"Declaration\"\>", "]"}], "[", 
             RowBox[{"\<\"Version\"\>", "\[Rule]", "\<\"1.0\"\>"}], "]"}], 
            "}"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"rdml\"\>", ",", 
             RowBox[{"{", 
              RowBox[{
               TemplateBox[{"1"},
                "OutputSizeLimit`Skeleton",
                DisplayFunction->(FrameBox[
                  
                  RowBox[{
                   "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                  Background -> GrayLevel[0.75], 
                  BaseStyle -> {
                   "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                  Baseline, ContentPadding -> False, 
                  FrameMargins -> {{1, 1}, {1, 2}}, FrameStyle -> None, 
                  RoundingRadius -> 7]& )], ",", 
               TemplateBox[{"1"},
                "OutputSizeLimit`Skeleton",
                DisplayFunction->(FrameBox[
                  
                  RowBox[{
                   "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                  Background -> GrayLevel[0.75], 
                  BaseStyle -> {
                   "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                  Baseline, ContentPadding -> False, 
                  FrameMargins -> {{1, 1}, {1, 2}}, FrameStyle -> None, 
                  RoundingRadius -> 7]& )]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"XMLElement", "[", 
                RowBox[{"\<\"dateMade\"\>", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "\<\"2015-06-03T13:13:41\"\>", "}"}]}], "]"}], 
               ",", 
               TemplateBox[{"42"},
                "OutputSizeLimit`Skeleton",
                DisplayFunction->(FrameBox[
                  
                  RowBox[{
                   "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                  Background -> GrayLevel[0.75], 
                  BaseStyle -> {
                   "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                  Baseline, ContentPadding -> False, 
                  FrameMargins -> {{1, 1}, {1, 2}}, FrameStyle -> None, 
                  RoundingRadius -> 7]& )], ",", 
               RowBox[{"XMLElement", "[", 
                RowBox[{"\<\"experiment\"\>", ",", 
                 RowBox[{"{", 
                  RowBox[{"\<\"id\"\>", "\[Rule]", 
                   RowBox[{"\<\"\"\>", "\[Ellipsis]", "\<\"\"\>"}]}], "}"}], 
                 ",", 
                 RowBox[{"{", 
                  RowBox[{"XMLElement", "[", 
                   RowBox[{"\<\"run\"\>", ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"id\"\>", "\[Rule]", 
                    RowBox[{"\<\"\"\>", "\[Ellipsis]", "\<\"\"\>"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"backgroundDeterminationMethod\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"LinRegPCR, constant\"\>", "}"}]}], 
                    "]"}], ",", 
                    TemplateBox[{"289"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                    Background -> GrayLevel[0.75], 
                    BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, 
                    FrameMargins -> {{1, 1}, {1, 2}}, FrameStyle -> None, 
                    RoundingRadius -> 7]& )], ",", 
                    RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"react\"\>", ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"id\"\>", "\[Rule]", "\<\"288\"\>"}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"sample\"\>", ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"id\"\>", "\[Rule]", "\<\"34\"\>"}], "}"}], 
                    ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"XMLElement", "[", 
                    TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{"\" \[CenterEllipsis]\"", #, 
                    "\"\[CenterEllipsis] \""}], Background -> GrayLevel[0.75],
                     BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, 
                    FrameMargins -> {{1, 1}, {1, 2}}, FrameStyle -> None, 
                    RoundingRadius -> 7]& )], "]"}]}], "}"}]}], "]"}]}], 
                    "}"}]}], "]"}], "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
           RowBox[{"{", "}"}]}], "]"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{74., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{67., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 11, 21413936451355101025, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{73., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 11, 21413936451355101025, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 11, 21413936451355101025, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{100., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[11]]], "Output",
 CellContext->"Cell$$14502`",
 CellLabel->"Out[11]=",
 CellID->529826610]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Dataset", "ExampleSection", "ExampleSection"],

Cell["\<\
By default, the expression returned after import is a Dataset expression. \
Setting Dataset-> False returns the underlying RDML data explicitly as a \
nested structure of associations and lists:\
\>", "ExampleText",
 CellID->1078444693],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Import", "[", 
   RowBox[{
   "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?raw=\
true\>\"", ",", "\"\<RDML\>\"", ",", 
    RowBox[{"\"\<Dataset\>\"", "\[Rule]", "False"}]}], "]"}], "//", 
  "Short"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->1957526871],

Cell[BoxData[
 TagBox[
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"version\"\>", "\[Rule]", "\<\"1.2\"\>"}], ",", 
    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}], ",", 
    RowBox[{"\<\"experiment\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\<\"All Wells\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"description\"\>", "\[Rule]", "\<\"A1-H12\"\>"}], ",", 
         RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], ",", 
         RowBox[{"\<\"run\"\>", "\[Rule]", 
          RowBox[{"\[LeftAssociation]", 
           RowBox[{"\<\"Amp Step 3_SYBR\"\>", "\[Rule]", 
            RowBox[{"\[LeftAssociation]", 
             RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
             "\[RightAssociation]"}]}], "\[RightAssociation]"}]}]}], 
        "\[RightAssociation]"}]}], "\[RightAssociation]"}]}]}], 
   "\[RightAssociation]"}],
  Short]], "Output",
 CellContext->"Cell$$14505`",
 CellLabel->"Out[1]//Short=",
 CellID->364496359]
}, Open  ]]
}, Closed]],

Cell["", "SectionFooterSpacer"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "Import Usage Examples"
}], "PrimaryExamplesSection",
 WholeCellGroupOpener->True,
 CellTags->"PrimaryExamplesSection"],

Cell["\<\
Import an RDML file from one of the provided datasets from the github \
repository of this importer:\
\>", "ExampleText",
 CellID->331931580],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{
  "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?raw=\
true\>\"", ",", "\"\<RDML\>\""}], "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->1759033801],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 11, "InitialType" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Vector[
            TypeSystem`Struct[{"publisher", "serialNumber", "MD5Hash"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], TypeSystem`UnknownType}], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "email", "firstName", "labAddress", "labName", "lastName"]], 
             TypeSystem`Atom[String], 5], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 1], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"description"}, {
              TypeSystem`Atom[String]}], 2], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
              TypeSystem`Atom[String], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], 
              TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
              TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
              TypeSystem`UnknownType}], 3], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Vector[
               TypeSystem`Atom[String], 1], 
              TypeSystem`Vector[
               TypeSystem`Struct[{"name", "id"}, {
                 TypeSystem`Atom[
                  TypeSystem`Enumeration["NCBI Gene Database"]], 
                 TypeSystem`Atom[String]}], 1], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["ref", "toi"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["SYBR"]], 
              
              TypeSystem`Struct[{
               "forwardPrimer", "reversePrimer", "probe1", "probe2", 
                "amplicon"}, {
                
                TypeSystem`Struct[{
                 "threePrimeTag", "fivePrimeTag", "sequence"}, {
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                  TypeSystem`Atom[String]}], 
                
                TypeSystem`Struct[{
                 "threePrimeTag", "fivePrimeTag", "sequence"}, {
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                  TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
                TypeSystem`UnknownType, 
                
                TypeSystem`Struct[{
                 "threePrimeTag", "fivePrimeTag", "sequence"}, {
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                  TypeSystem`Atom[String]}]}], TypeSystem`UnknownType}], 10], 
           
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{
             "description", "documentation", "lidTemperature", "experimenter",
               "step"}, {
              TypeSystem`Atom[String], TypeSystem`UnknownType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[
               TypeSystem`Atom[String], 1], 
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "nr", "description", "temperature", "gradient", "loop", 
                 "pause", "lidOpen"}, {
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[String], 
                 
                 TypeSystem`Struct[{
                  "temperature", "duration", "temperatureChange", 
                   "durationChange", "measure", "ramp"}, {
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                   TypeSystem`Atom[String], TypeSystem`UnknownType}], 
                 TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["goto", "repeat"]], 
                  TypeSystem`Atom[Integer], 2], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType}], 5]}], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"description", "documentation", "run"}, {
              TypeSystem`Atom[String], TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`Vector[
                  TypeSystem`Atom[String], 1], 
                 TypeSystem`Atom[String], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["name", "version"]], 
                  TypeSystem`Atom[String], 2], 
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[String], 
                 
                 TypeSystem`Struct[{
                  "rows", "columns", "rowLabel", "columnLabel"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String]}], 
                 TypeSystem`Atom[DateObject], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[
                    TypeSystem`Enumeration["R-dsH18", "R-HCtrl13", "R-MoH9"]], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real]}], 61], 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"tmp", "fluor"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real]}], 61], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`UnknownType}], 1]}], 90]}], 1]}], 1]}], 
        "Shape" -> TypeSystem`PackageScope`DocumentShape[
          
          Association[{"version"} -> 
           TypeSystem`PackageScope`AtomShape[28.800000000000004`], {
            "dateMade"} -> 
           TypeSystem`PackageScope`AtomShape[75], {"dateUpdated"} -> 
           TypeSystem`PackageScope`AtomShape[75], {"id"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"experimenter"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"documentation"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"dye"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"sample"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"target"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {
            "thermalCyclingConditions"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"experiment"} -> 
           TypeSystem`PackageScope`ElidedShape[1]], 1], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1572108999], "Type" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Vector[
            TypeSystem`Struct[{"publisher", "serialNumber", "MD5Hash"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Atom[String], TypeSystem`UnknownType}], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "email", "firstName", "labAddress", "labName", "lastName"]], 
             TypeSystem`Atom[String], 5], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 1], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"description"}, {
              TypeSystem`Atom[String]}], 2], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
              TypeSystem`Atom[String], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], 
              TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
              TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
              TypeSystem`UnknownType}], 3], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Vector[
               TypeSystem`Atom[String], 1], 
              TypeSystem`Vector[
               TypeSystem`Struct[{"name", "id"}, {
                 TypeSystem`Atom[
                  TypeSystem`Enumeration["NCBI Gene Database"]], 
                 TypeSystem`Atom[String]}], 1], 
              TypeSystem`Atom[
               TypeSystem`Enumeration["ref", "toi"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["SYBR"]], 
              
              TypeSystem`Struct[{
               "forwardPrimer", "reversePrimer", "probe1", "probe2", 
                "amplicon"}, {
                
                TypeSystem`Struct[{
                 "threePrimeTag", "fivePrimeTag", "sequence"}, {
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                  TypeSystem`Atom[String]}], 
                
                TypeSystem`Struct[{
                 "threePrimeTag", "fivePrimeTag", "sequence"}, {
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                  TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
                TypeSystem`UnknownType, 
                
                TypeSystem`Struct[{
                 "threePrimeTag", "fivePrimeTag", "sequence"}, {
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                  TypeSystem`Atom[String]}]}], TypeSystem`UnknownType}], 10], 
           
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "lidTemperature", "experimenter",
               "step"}, {
              TypeSystem`Atom[String], TypeSystem`UnknownType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[
               TypeSystem`Atom[String], 1], 
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "nr", "description", "temperature", "gradient", "loop", 
                 "pause", "lidOpen"}, {
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[String], 
                 
                 TypeSystem`Struct[{
                  "temperature", "duration", "temperatureChange", 
                   "durationChange", "measure", "ramp"}, {
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                   TypeSystem`Atom[String], TypeSystem`UnknownType}], 
                 TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["goto", "repeat"]], 
                  TypeSystem`Atom[Integer], 2], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType}], 5]}], 1], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"description", "documentation", "run"}, {
              TypeSystem`Atom[String], TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`Vector[
                  TypeSystem`Atom[String], 1], 
                 TypeSystem`Atom[String], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["name", "version"]], 
                  TypeSystem`Atom[String], 2], 
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[String], 
                 
                 TypeSystem`Struct[{
                  "rows", "columns", "rowLabel", "columnLabel"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[String]}], 
                 TypeSystem`Atom[DateObject], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[
                    TypeSystem`Enumeration["R-dsH18", "R-HCtrl13", "R-MoH9"]], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real]}], 61], 
                    TypeSystem`Vector[
                    TypeSystem`Struct[{"tmp", "fluor"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real]}], 61], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`UnknownType}], 1]}], 90]}], 1]}], 1]}], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[1572108999]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"version\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"version\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["version"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["1.2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dateMade\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateMade\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["dateMade"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], Background -> GrayLevel[0.95],
                 Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "\"22 Apr 2013 20:29:44\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["dateUpdated"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "\"30 Apr 2013 12:08:11\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"id\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"id\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["id"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 1], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 1], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["id"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["experimenter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"rpa"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    Row[{"rpa"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["experimenter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"assembly_HoxBCluster"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"assembly_HoxBCluster"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dye\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dye\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["dye"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"SYBR", "EVAGREEN"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"SYBR", "EVAGREEN"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["dye"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"sample\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sample\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 3], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    Row[{"R-MoH9", "R-HCtrl13", "R-dsH18"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 3], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"R-MoH9", "R-HCtrl13", "R-dsH18"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"target\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"target\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 10], "\[RightAssociation]"}], 
                    Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 10], "\[RightAssociation]"}], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["thermalCyclingConditions"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"Protocolo-EvaGreen_55\.baC_60cycles.prcl"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"Protocolo-EvaGreen_55\.baC_60cycles.prcl"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["thermalCyclingConditions"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], 
                BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"All Wells"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"All Wells"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][{
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1745234513]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1745234513][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$8553`",
 ImageSize->{364, 355},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[1]=",
 CellID->201713654]
}, Open  ]],

Cell["Get the schema version of this RDML file:", "ExampleText"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{
  "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?raw=\
true\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<RDML\>\"", ",", " ", "\"\<version\>\""}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->1596040096],

Cell[BoxData["\<\"1.2\"\>"], "Output",
 CellContext->"Cell$$8553`",
 ImageSize->{486, 34},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->2068585949]
}, Open  ]],

Cell["Get the identification of the publisher of this RDML file:", \
"ExampleText"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{
  "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?raw=\
true\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<RDML\>\"", ",", " ", "\"\<id\>\""}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[7]:=",
 CellID->1444655797],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 1, "Length" -> 1, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"publisher", "serialNumber", "MD5Hash"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], TypeSystem`UnknownType}], 1], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "publisher"} -> 1, {All, "serialNumber"} -> 
           1, {All, "MD5Hash"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "publisher" -> 
              TypeSystem`PackageScope`AtomShape[249.60000000000002`], 
              "serialNumber" -> 
              TypeSystem`PackageScope`AtomShape[124.80000000000001`], 
              "MD5Hash" -> TypeSystem`PackageScope`UnknownShape]]], 1, {}]], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[1717665529], 
        "Type" -> TypeSystem`Vector[
          TypeSystem`Struct[{"publisher", "serialNumber", "MD5Hash"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], TypeSystem`UnknownType}], 1], "HandleQ" -> 
        True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[1717665529]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"publisher\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"publisher\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 701161373][{
                    All, "publisher"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[701161373][
                 
                  GeneralUtilities`Slice[All, "publisher"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"serialNumber\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"serialNumber\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 701161373][{
                    All, "serialNumber"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[701161373][
                 
                  GeneralUtilities`Slice[All, "serialNumber"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"MD5Hash\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"MD5Hash\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 701161373][{
                    All, "MD5Hash"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[701161373][
                 
                  GeneralUtilities`Slice[All, "MD5Hash"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Bio-Rad Laboratories, Inc.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[701161373][
                 
                  GeneralUtilities`Slice[1, 
                   Key["publisher"]]], "Mouse"], 
                ImageSize -> {{249.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["3.0.1224.1015", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[701161373][
                 
                  GeneralUtilities`Slice[1, 
                   Key["serialNumber"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[701161373][
                 
                  GeneralUtilities`Slice[1, 
                   Key["MD5Hash"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 701161373][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 701161373]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[701161373][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[701161373][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$8553`",
 ImageSize->{486, 34},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[7]=",
 CellID->2029621612]
}, Open  ]],

Cell["Import the experimenters:", "ExampleText"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{
  "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?raw=\
true\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<RDML\>\"", ",", " ", "\"\<experimenter\>\""}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[6]:=",
 CellID->1925218739],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 1, "Length" -> 1, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Assoc[
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "email", "firstName", "labAddress", "labName", "lastName"]], 
           TypeSystem`Atom[String], 5], 1], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`KeyValueShape[
               TypeSystem`PackageScope`AtomShape[96.00000000000001], 
               TypeSystem`PackageScope`AtomShape[748.8000000000001]]], 5, {
             All}]]], 1, {}], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[2079694242], "Type" -> 
        TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Assoc[
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "email", "firstName", "labAddress", "labName", "lastName"]], 
           TypeSystem`Atom[String], 5], 1], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[2079694242]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["rpa", 
                    Style[
                    "rpa", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 418700034][{
                    
                    Key["rpa"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[418700034][
                   GeneralUtilities`Slice[
                    Key["rpa"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                "firstName", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Raquel", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[418700034][
                 
                  GeneralUtilities`Slice[
                   Key["rpa"], 
                   Key["firstName"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Pane[
                "lastName", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Andrade", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[418700034][
                 
                  GeneralUtilities`Slice[
                   Key["rpa"], 
                   Key["lastName"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Pane[
                "email", ImageSize -> {{96.00000000000001, Full}, Automatic}],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["rgandrade@ualg.pt", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[418700034][
                 
                  GeneralUtilities`Slice[
                   Key["rpa"], 
                   Key["email"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Pane[
                "labName", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CBMR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[418700034][
                 
                  GeneralUtilities`Slice[
                   Key["rpa"], 
                   Key["labName"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Pane[
                "labAddress", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "Centre for Biomedical Research, University of Algarve, \
8005-139 Faro, Portugal", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[418700034][
                 
                  GeneralUtilities`Slice[
                   Key["rpa"], 
                   Key["labAddress"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 418700034][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 418700034]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[418700034][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[418700034][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$8553`",
 ImageSize->{151, 16},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[6]=",
 CellID->193129850]
}, Open  ]],

Cell["", "SectionFooterSpacer",
 CellID->1249678972]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "RDML Dataset"
}], "PrimaryExamplesSection",
 WholeCellGroupOpener->True,
 CellTags->"PrimaryExamplesSection",
 CellID->1519742891],

Cell[CellGroupData[{

Cell["schema version", "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True],

Cell["\<\
The version element indicates the RDML Schema version of the file. This \
element can be easily retrieved from the Dataset object:\
\>", "ExampleText",
 CellID->1998040861],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rpa", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?\
raw=true\>\"", ",", "\"\<RDML\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"rpa", "[", "\"\<version\>\"", "]"}]}], "Input",
 CellLabel->"In[5]:=",
 CellID->642704223],

Cell[BoxData["\<\"1.2\"\>"], "Output",
 CellContext->"Cell$$16952`",
 CellLabel->"Out[6]=",
 CellID->744513715]
}, Open  ]],

Cell["\<\
Since its release, the RDML standard has been revised twice: versions 1.1 and \
1.2. Although this importer has been designed to fully support version 1.2, \
in practice, since version 1.2 Schema specification significantly overlaps \
with previous versions, this package can import RDML files from those \
previous versions (to the extent that they overlap with version 1.2).\
\>", "ExampleText",
 CellID->381587163],

Cell["\<\
Importing files from versions other than 1.2 results in a warning, yet most \
data is often successfully imported:\
\>", "ExampleText",
 CellID->595070928],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{
  "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/1507AA03.rdml?\
raw=true\>\"", ",", "\"\<RDML\>\""}], "]"}]], "Input",
 CellLabel->"In[7]:=",
 CellID->1163961037],

Cell[BoxData[
 TemplateBox[{
  "Private`xmlObjectToExpression","version",
   "\"RDML file version is \\!\\(\\*RowBox[{\\\"\\\\\\\"1.0\\\\\\\"\\\"}]\\) \
but only version \\!\\(\\*RowBox[{\\\"\\\\\\\"1.2\\\\\\\"\\\"}]\\) is \
supported. The parsing will proceed presuming version \\!\\(\\*RowBox[{\\\"\\\
\\\\\"1.2\\\\\\\"\\\"}]\\), hence some data might be not imported.\"",2,7,13,
   21413936451355101025,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellContext->"Cell$$16952`",
 CellLabel->"During evaluation of In[7]:=",
 CellID->1930555726],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 11, "InitialType" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Atom[DateObject], TypeSystem`UnknownType, 
           TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 18], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["toi"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 384], 
           TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"description", "documentation", "run"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, TypeSystem`UnknownType}], 1]}], 
                  6912]}], 1]}], 1]}], "Shape" -> 
        TypeSystem`PackageScope`DocumentShape[
          
          Association[{"version"} -> 
           TypeSystem`PackageScope`AtomShape[28.800000000000004`], {
            "dateMade"} -> 
           TypeSystem`PackageScope`AtomShape[75], {"dateUpdated"} -> 
           TypeSystem`PackageScope`AtomShape[75], {"id"} -> 
           TypeSystem`PackageScope`UnknownShape, {"experimenter"} -> 
           TypeSystem`PackageScope`UnknownShape, {"documentation"} -> 
           TypeSystem`PackageScope`UnknownShape, {"dye"} -> 
           TypeSystem`PackageScope`UnknownShape, {"sample"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"target"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {
            "thermalCyclingConditions"} -> 
           TypeSystem`PackageScope`UnknownShape, {"experiment"} -> 
           TypeSystem`PackageScope`ElidedShape[1]], 1], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1038522659], "Type" -> 
        TypeSystem`Struct[{
          "version", "dateMade", "dateUpdated", "id", "experimenter", 
           "documentation", "dye", "sample", "target", 
           "thermalCyclingConditions", "experiment"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Atom[DateObject], TypeSystem`UnknownType, 
           TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "annotation", "type", 
              "interRunCalibrator", "quantity", "calibratorSample", 
              "cdnaSynthesisMethod", "templateQuantity"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["unkn"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 18], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "description", "documentation", "xRef", "type", 
              "amplificationEfficiencyMethod", "amplificationEfficiency", 
              "amplificationEfficiencySE", "detectionLimit", "dyeId", 
              "sequences", "commercialAssay"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Atom[
               TypeSystem`Enumeration["toi"]], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 384], 
           TypeSystem`UnknownType, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"description", "documentation", "run"}, {
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               
               TypeSystem`Struct[{
                "description", "documentation", "experimenter", "instrument", 
                 "dataCollectionSoftware", "backgroundDeterminationMethod", 
                 "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat",
                  "runDate", "react"}, {
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"sample", "data"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                    "bgFluorSlp", "quantFluor"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`UnknownType, TypeSystem`UnknownType}], 1]}], 
                  6912]}], 1]}], 1]}], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[1038522659]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"version\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"version\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["version"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["1.0", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["version"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dateMade\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateMade\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["dateMade"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], Background -> GrayLevel[0.95],
                 Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "\"30 Mar 2009 14:12:48\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["dateMade"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dateUpdated\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["dateUpdated"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "\"30 Mar 2009 14:12:48\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["dateUpdated"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"id\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"id\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["id"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["experimenter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["experimenter"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dye\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dye\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["dye"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["dye"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"sample\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sample\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 18], "\[RightAssociation]"}], 
                    Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 18], "\[RightAssociation]"}], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["sample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["sample"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"target\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"target\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 384], "\[RightAssociation]"}], 
                    Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 384], "\[RightAssociation]"}], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["target"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["target"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["thermalCyclingConditions"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["thermalCyclingConditions"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experiment\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"miRNA expression EVI1 sample set"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"miRNA expression EVI1 sample set"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][{
                    
                    Key["experiment"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
                 
                  GeneralUtilities`Slice[
                   Key["experiment"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 169478587]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[169478587][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$16952`",
 CellLabel->"Out[7]=",
 CellID->1034203726]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["dateMade", "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True],

Cell["\<\
The element dateMade indicates the date and time stamp of the creation of the \
file:\
\>", "ExampleText",
 CellID->782373874],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rpa", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?\
raw=true\>\"", ",", "\"\<RDML\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"rpa", "[", "\"\<dateMade\>\"", "]"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->898204829],

Cell[BoxData[
 TemplateBox[{RowBox[{"\"Mon 22 Apr 2013 20:29:44\"", 
     StyleBox[
      RowBox[{"\"GMT+\"", "\[InvisibleSpace]", "1.`"}], FontColor -> 
      GrayLevel[0.5]]}],RowBox[{"DateObject", "[", 
     RowBox[{
       RowBox[{"{", 
         RowBox[{"2013", ",", "4", ",", "22"}], "}"}], ",", 
       RowBox[{"TimeObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"20", ",", "29", ",", "44.`"}], "}"}], ",", 
           RowBox[{"TimeZone", "\[Rule]", "1.`"}]}], "]"}], ",", 
       RowBox[{"TimeZone", "\[Rule]", "1.`"}]}], "]"}]},
  "DateObject",
  Editable->False]], "Output",
 CellContext->"Cell$$17052`",
 CellLabel->"Out[2]=",
 CellID->882995490]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["dateUpdated", "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True],

Cell["\<\
The element dateUpdated indicates the date and time stamp of the last update \
of the file.:\
\>", "ExampleText",
 CellID->855537259],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rpa", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?\
raw=true\>\"", ",", "\"\<RDML\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"rpa", "[", "\"\<dateUpdated\>\"", "]"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->1025890894],

Cell[BoxData[
 TemplateBox[{RowBox[{"\"Tue 30 Apr 2013 12:08:11\"", 
     StyleBox[
      RowBox[{"\"GMT+\"", "\[InvisibleSpace]", "1.`"}], FontColor -> 
      GrayLevel[0.5]]}],RowBox[{"DateObject", "[", 
     RowBox[{
       RowBox[{"{", 
         RowBox[{"2013", ",", "4", ",", "30"}], "}"}], ",", 
       RowBox[{"TimeObject", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"12", ",", "8", ",", "11.`"}], "}"}], ",", 
           RowBox[{"TimeZone", "\[Rule]", "1.`"}]}], "]"}], ",", 
       RowBox[{"TimeZone", "\[Rule]", "1.`"}]}], "]"}]},
  "DateObject",
  Editable->False]], "Output",
 CellContext->"Cell$$17052`",
 CellLabel->"Out[2]=",
 CellID->588898137]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["id", "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True],

Cell["\<\
Use the id element to show all ids. Each id can be used to assign a publisher \
and a serial number to the RDML file. Additionally, an MD5Hash can also be \
included.\
\>", "ExampleText",
 CellID->439132798],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rpa", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?\
raw=true\>\"", ",", "\"\<RDML\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"rpa", "[", "\"\<id\>\"", "]"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->712912861],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 1, "Length" -> 1, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"publisher", "serialNumber", "MD5Hash"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], TypeSystem`UnknownType}], 1], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "publisher"} -> 1, {All, "serialNumber"} -> 
           1, {All, "MD5Hash"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "publisher" -> 
              TypeSystem`PackageScope`AtomShape[249.60000000000002`], 
              "serialNumber" -> 
              TypeSystem`PackageScope`AtomShape[124.80000000000001`], 
              "MD5Hash" -> TypeSystem`PackageScope`UnknownShape]]], 1, {}]], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[1521970649], 
        "Type" -> TypeSystem`Vector[
          TypeSystem`Struct[{"publisher", "serialNumber", "MD5Hash"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], TypeSystem`UnknownType}], 1], "HandleQ" -> 
        True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[1521970649]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"publisher\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"publisher\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2062856095][{All, "publisher"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2062856095][
                  GeneralUtilities`Slice[All, "publisher"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"serialNumber\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"serialNumber\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2062856095][{All, "serialNumber"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2062856095][
                  GeneralUtilities`Slice[All, "serialNumber"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"MD5Hash\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"MD5Hash\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2062856095][{All, "MD5Hash"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2062856095][
                  GeneralUtilities`Slice[All, "MD5Hash"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Bio-Rad Laboratories, Inc.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2062856095][
                  GeneralUtilities`Slice[1, 
                   Key["publisher"]]], "Mouse"], 
                ImageSize -> {{249.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["3.0.1224.1015", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2062856095][
                  GeneralUtilities`Slice[1, 
                   Key["serialNumber"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2062856095][
                  GeneralUtilities`Slice[1, 
                   Key["MD5Hash"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2062856095][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2062856095]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2062856095][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2062856095][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17054`",
 CellLabel->"Out[2]=",
 CellID->344508271]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["experimenter", "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True],

Cell["\<\
The experimenter element contains a list of researchers and their info (in \
this case only one):\
\>", "ExampleText",
 CellID->1881727439],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rpa", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?\
raw=true\>\"", ",", "\"\<RDML\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"rpa", "[", "\"\<experimenter\>\"", "]"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->598782720],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 1, "Length" -> 1, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Assoc[
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "email", "firstName", "labAddress", "labName", "lastName"]], 
           TypeSystem`Atom[String], 5], 1], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`KeyValueShape[
               TypeSystem`PackageScope`AtomShape[96.00000000000001], 
               TypeSystem`PackageScope`AtomShape[748.8000000000001]]], 5, {
             All}]]], 1, {}], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[949750046], "Type" -> 
        TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Assoc[
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "email", "firstName", "labAddress", "labName", "lastName"]], 
           TypeSystem`Atom[String], 5], 1], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[949750046]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["rpa", 
                    Style[
                    "rpa", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 615024952][{
                    
                    Key["rpa"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[615024952][
                   GeneralUtilities`Slice[
                    Key["rpa"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                "firstName", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Raquel", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[615024952][
                 
                  GeneralUtilities`Slice[
                   Key["rpa"], 
                   Key["firstName"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Pane[
                "lastName", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Andrade", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[615024952][
                 
                  GeneralUtilities`Slice[
                   Key["rpa"], 
                   Key["lastName"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Pane[
                "email", ImageSize -> {{96.00000000000001, Full}, Automatic}],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["rgandrade@ualg.pt", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[615024952][
                 
                  GeneralUtilities`Slice[
                   Key["rpa"], 
                   Key["email"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Pane[
                "labName", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CBMR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[615024952][
                 
                  GeneralUtilities`Slice[
                   Key["rpa"], 
                   Key["labName"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Pane[
                "labAddress", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "Centre for Biomedical Research, University of Algarve, \
8005-139 Faro, Portugal", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[615024952][
                 
                  GeneralUtilities`Slice[
                   Key["rpa"], 
                   Key["labAddress"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 615024952][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 615024952]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[615024952][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[615024952][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17055`",
 CellLabel->"Out[2]=",
 CellID->1625542184]
}, Open  ]],

Cell["\<\
Internally this is represented as an Association. The key in this Association \
corresponds to the XML id attribute (in this example \"rpa\") from the \
original RDML file, which can be used by other elements to link here:\
\>", "ExampleText",
 CellID->1051028287],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"rpa", "[", "\"\<experimenter\>\"", "]"}], "//", 
  "Normal"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->1451401021],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"rpa\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"firstName\"\>", "\[Rule]", "\<\"Raquel\"\>"}], ",", 
     RowBox[{"\<\"lastName\"\>", "\[Rule]", "\<\"Andrade\"\>"}], ",", 
     RowBox[{"\<\"email\"\>", "\[Rule]", "\<\"rgandrade@ualg.pt\"\>"}], ",", 
     RowBox[{"\<\"labName\"\>", "\[Rule]", "\<\"CBMR\"\>"}], ",", 
     RowBox[{"\<\"labAddress\"\>", 
      "\[Rule]", "\<\"Centre for Biomedical Research, University of Algarve, \
8005-139 Faro, Portugal\"\>"}]}], "\[RightAssociation]"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellContext->"Cell$$17055`",
 CellLabel->"Out[3]=",
 CellID->631358953]
}, Open  ]],

Cell["\<\
To retrieve all information related to one particular experimenter, one can \
either use the key (XML id):\
\>", "ExampleText",
 CellID->1422012053],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rpa", "[", 
  RowBox[{"\"\<experimenter\>\"", ",", "\"\<rpa\>\""}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->2114508827],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 5, "Length" -> 5, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration[
           "email", "firstName", "labAddress", "labName", "lastName"]], 
          TypeSystem`Atom[String], 5], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[96.00000000000001], 
            TypeSystem`PackageScope`AtomShape[748.8000000000001]]], 5, {}], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[72640353], 
        "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration[
           "email", "firstName", "labAddress", "labName", "lastName"]], 
          TypeSystem`Atom[String], 5], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[72640353]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                "firstName", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Raquel", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1288817468][
                  GeneralUtilities`Slice[
                   Key["firstName"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "lastName", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Andrade", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1288817468][
                  GeneralUtilities`Slice[
                   Key["lastName"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "email", ImageSize -> {{96.00000000000001, Full}, Automatic}],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["rgandrade@ualg.pt", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1288817468][
                  GeneralUtilities`Slice[
                   Key["email"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "labName", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CBMR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1288817468][
                  GeneralUtilities`Slice[
                   Key["labName"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "labAddress", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "Centre for Biomedical Research, University of Algarve, \
8005-139 Faro, Portugal", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1288817468][
                  GeneralUtilities`Slice[
                   Key["labAddress"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1288817468][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1288817468]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1288817468][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1288817468][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17055`",
 CellLabel->"Out[4]=",
 CellID->2061181675]
}, Open  ]],

Cell["Or pick out the corresponding Part:", "ExampleText",
 CellID->1792994043],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rpa", "[", 
  RowBox[{"\"\<experimenter\>\"", ",", "1"}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->709306052],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 5, "Length" -> 5, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration[
           "email", "firstName", "labAddress", "labName", "lastName"]], 
          TypeSystem`Atom[String], 5], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[96.00000000000001], 
            TypeSystem`PackageScope`AtomShape[748.8000000000001]]], 5, {}], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[1886449935], 
        "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration[
           "email", "firstName", "labAddress", "labName", "lastName"]], 
          TypeSystem`Atom[String], 5], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[1886449935]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                "firstName", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Raquel", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1801866506][
                  GeneralUtilities`Slice[
                   Key["firstName"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "lastName", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Andrade", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1801866506][
                  GeneralUtilities`Slice[
                   Key["lastName"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "email", ImageSize -> {{96.00000000000001, Full}, Automatic}],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["rgandrade@ualg.pt", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1801866506][
                  GeneralUtilities`Slice[
                   Key["email"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "labName", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CBMR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1801866506][
                  GeneralUtilities`Slice[
                   Key["labName"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "labAddress", 
                 ImageSize -> {{96.00000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                
                "Centre for Biomedical Research, University of Algarve, \
8005-139 Faro, Portugal", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1801866506][
                  GeneralUtilities`Slice[
                   Key["labAddress"]]], "Mouse"], 
                ImageSize -> {{748.8000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1801866506][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1801866506]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1801866506][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1801866506][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17055`",
 CellLabel->"Out[5]=",
 CellID->984670669]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["documentation", "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True],

Cell["\<\
The documentation element constitutes the multi-purpose documentation system \
from the RDML file. This element is a text field with an unique id \
(translated to a key in an Association).
From many places in the RDML file, a reference can be made to these \
documentation elements, making it versatile and allowing the free annotation \
of the elements.
To retrieve all documentation elements:\
\>", "ExampleText",
 CellID->1099923412],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rpa", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?\
raw=true\>\"", ",", "\"\<RDML\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"rpa", "[", "\"\<documentation\>\"", "]"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->650869356],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 1, "Length" -> 1, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Assoc[
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 1], 1], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[192.00000000000003`], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`KeyValueShape[
               TypeSystem`PackageScope`AtomShape[38.400000000000006`], 
               TypeSystem`PackageScope`AtomShape[1920.0000000000002`]]], 1, {
             All}]]], 1, {}], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[2136277630], "Type" -> 
        TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Assoc[
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 1], 1], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[2136277630]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["assembly_HoxBCluster", 
                    Style[
                    "assembly_HoxBCluster", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 447203951][{
                    
                    Key["assembly_HoxBCluster"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[447203951][
                   GeneralUtilities`Slice[
                    Key["assembly_HoxBCluster"]]], "Mouse"], 
                 ImageSize -> {{192.00000000000003`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                "text", 
                 ImageSize -> {{38.400000000000006`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "The genomic information for the HoxB cluster is based on the \
Gallus gallus (chic \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[447203951][
                 
                  GeneralUtilities`Slice[
                   Key["assembly_HoxBCluster"], 
                   Key["text"]]], "Mouse"], 
                ImageSize -> {{1920.0000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 447203951][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 447203951]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[447203951][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[447203951][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17056`",
 CellLabel->"Out[2]=",
 CellID->376610493]
}, Open  ]],

Cell["\<\
In this file there is only one such element, whose contents pertain to the \
genome assembly version used to retrieve the genomic information on the HoxB \
gene cluster:\
\>", "ExampleText",
 CellID->1753417227],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rpa", "[", 
  RowBox[{"\"\<documentation\>\"", ",", "1"}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->1395383071],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 1, "Length" -> 1, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 1], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[38.400000000000006`], 
            TypeSystem`PackageScope`AtomShape[1920.0000000000002`]]], 1, {}], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[1471269586], 
        "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 1], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[1471269586]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                "text", 
                 ImageSize -> {{38.400000000000006`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "The genomic information for the HoxB cluster is based on the \
Gallus gallus (chic \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[308283372][
                 
                  GeneralUtilities`Slice[
                   Key["text"]]], "Mouse"], 
                ImageSize -> {{1920.0000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 308283372][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 308283372]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[308283372][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[308283372][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17056`",
 CellLabel->"Out[3]=",
 CellID->758197656]
}, Open  ]],

Cell["Whose text sub-element contains:", "ExampleText",
 CellID->137759176],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rpa", "[", 
  RowBox[{"\"\<documentation\>\"", ",", "1", ",", "\"\<text\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->1990453999],

Cell[BoxData["\<\"The genomic information for the HoxB cluster is based on \
the Gallus gallus (chick) genome assembly version 2.1 (WASHUC2), as performed \
by the Genome Sequencing Center (http://genome.wustl.edu) at the Washington \
University School of Medicine, St. Louis.\"\>"], "Output",
 CellContext->"Cell$$17056`",
 CellLabel->"Out[4]=",
 CellID->1922158694]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["dye", "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True],

Cell["\<\
The dye element contains information regarding the fluorescent chemical \
compounds used as dyes for the real-time monitoring of the qPCR reaction.
To show all dyes:\
\>", "ExampleText",
 CellID->1968817181],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rpa", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?\
raw=true\>\"", ",", "\"\<RDML\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"rpa", "[", "\"\<dye\>\"", "]"}]}], "Input",
 CellLabel->"In[2]:=",
 CellID->2068314902],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 2, "Length" -> 2, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"description"}, {
            TypeSystem`Atom[String]}], 2], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, 
             TypeSystem`PackageScope`KeyDummy[22]} -> 1, {All, "description"} -> 
           1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[76.80000000000001], 
             TypeSystem`PackageScope`RowShape[
              Association[
              "description" -> 
               TypeSystem`PackageScope`AtomShape[1920.0000000000002`]]]]], 
           2, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[974171687], "Type" -> 
        TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"description"}, {
            TypeSystem`Atom[String]}], 2], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[974171687]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox["\"\"", FontColor -> GrayLevel[0.4]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox[
                    "\"\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1601641439][{All, Keys}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1601641439][
                  GeneralUtilities`Slice[All, Keys]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"description\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"description\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1601641439][{All, "description"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1601641439][
                  GeneralUtilities`Slice[All, "description"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["SYBR", 
                    Style[
                    "SYBR", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1601641439][{
                    Key["SYBR"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  1601641439][
                   GeneralUtilities`Slice[
                    Key["SYBR"]]], "Mouse"], 
                 ImageSize -> {{76.80000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "SYBR Green I is an asymmetrical cyanine dye used as a \
nucleic acid stain in mole \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1601641439][
                  GeneralUtilities`Slice[
                   Key["SYBR"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{1920.0000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["EVAGREEN", 
                    Style[
                    "EVAGREEN", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1601641439][{
                    Key["EVAGREEN"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  1601641439][
                   GeneralUtilities`Slice[
                    Key["EVAGREEN"]]], "Mouse"], 
                 ImageSize -> {{76.80000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "EvaGreen dye is a green fluorescent nucleic acid dye. The \
DNA-bound dye has exci \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1601641439][
                  GeneralUtilities`Slice[
                   Key["EVAGREEN"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{1920.0000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1601641439][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1601641439]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1601641439][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1601641439][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17057`",
 CellLabel->"Out[3]=",
 CellID->672879875]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["sample", "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True],

Cell["\<\
The sample element contains all samples used. It may describe standard \
samples used in a dilution series, but it will often describe different \
biological sources and/or conditions/treatments performed on biological \
material.
To inspect the different samples:\
\>", "ExampleText",
 CellID->127686065],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rpa", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?\
raw=true\>\"", ",", "\"\<RDML\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"rpa", "[", "\"\<sample\>\"", "]"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->803826745],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 3, "Length" -> 3, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "description", "documentation", "xRef", "annotation", "type", 
            "interRunCalibrator", "quantity", "calibratorSample", 
            "cdnaSynthesisMethod", "templateQuantity"}, {
            TypeSystem`Atom[String], TypeSystem`UnknownType, 
            TypeSystem`UnknownType, TypeSystem`UnknownType, 
            TypeSystem`Atom[
             TypeSystem`Enumeration["unkn"]], 
            TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
            TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
            TypeSystem`UnknownType}], 3], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, 
             TypeSystem`PackageScope`KeyDummy[23]} -> 1, {All, "description"} -> 
           1, {All, "documentation"} -> 1, {All, "xRef"} -> 
           1, {All, "annotation"} -> 1, {All, "type"} -> 
           1, {All, "interRunCalibrator"} -> 1, {All, "quantity"} -> 
           1, {All, "calibratorSample"} -> 1, {All, "cdnaSynthesisMethod"} -> 
           1, {All, "templateQuantity"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[86.4], 
             TypeSystem`PackageScope`RowShape[
              Association[
              "description" -> 
               TypeSystem`PackageScope`AtomShape[940.8000000000002], 
               "documentation" -> TypeSystem`PackageScope`UnknownShape, 
               "xRef" -> TypeSystem`PackageScope`UnknownShape, "annotation" -> 
               TypeSystem`PackageScope`UnknownShape, "type" -> 
               TypeSystem`PackageScope`AtomShape[38.400000000000006`], 
               "interRunCalibrator" -> TypeSystem`PackageScope`AtomShape[36], 
               "quantity" -> TypeSystem`PackageScope`UnknownShape, 
               "calibratorSample" -> TypeSystem`PackageScope`AtomShape[36], 
               "cdnaSynthesisMethod" -> TypeSystem`PackageScope`UnknownShape, 
               "templateQuantity" -> TypeSystem`PackageScope`UnknownShape]]]],
            3, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1538149920], "Type" -> 
        TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "description", "documentation", "xRef", "annotation", "type", 
            "interRunCalibrator", "quantity", "calibratorSample", 
            "cdnaSynthesisMethod", "templateQuantity"}, {
            TypeSystem`Atom[String], TypeSystem`UnknownType, 
            TypeSystem`UnknownType, TypeSystem`UnknownType, 
            TypeSystem`Atom[
             TypeSystem`Enumeration["unkn"]], 
            TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
            TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
            TypeSystem`UnknownType}], 3], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[1538149920]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox["\"\"", FontColor -> GrayLevel[0.4]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox[
                    "\"\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885702944][{All, Keys}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[All, Keys]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"description\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"description\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885702944][{All, "description"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[All, "description"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885702944][{All, "documentation"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[All, "documentation"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"xRef\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"xRef\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885702944][{All, "xRef"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[All, "xRef"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"annotation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"annotation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885702944][{All, "annotation"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[All, "annotation"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"type\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"type\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885702944][{All, "type"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[All, "type"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"interRunCalibrator\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"interRunCalibrator\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885702944][{All, "interRunCalibrator"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[All, "interRunCalibrator"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"quantity\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"quantity\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885702944][{All, "quantity"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[All, "quantity"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"calibratorSample\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"calibratorSample\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885702944][{All, "calibratorSample"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[All, "calibratorSample"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"cdnaSynthesisMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"cdnaSynthesisMethod\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885702944][{All, "cdnaSynthesisMethod"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[All, "cdnaSynthesisMethod"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"templateQuantity\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"templateQuantity\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1885702944][{All, "templateQuantity"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[All, "templateQuantity"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["R-MoH9", 
                    Style[
                    "R-MoH9", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885702944][{
                    Key["R-MoH9"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  1885702944][
                   GeneralUtilities`Slice[
                    Key["R-MoH9"]]], "Mouse"], 
                 ImageSize -> {{86.4, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "Whole chick embryo sample that has been electroporated with \
morpholino against the hairy1 mRNA.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-MoH9"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{940.8000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-MoH9"], 
                   Key["documentation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-MoH9"], 
                   Key["xRef"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-MoH9"], 
                   Key["annotation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["unkn", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-MoH9"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-MoH9"], 
                   Key["interRunCalibrator"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-MoH9"], 
                   Key["quantity"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-MoH9"], 
                   Key["calibratorSample"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-MoH9"], 
                   Key["cdnaSynthesisMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-MoH9"], 
                   Key["templateQuantity"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["R-HCtrl13", 
                    Style[
                    "R-HCtrl13", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885702944][{
                    Key["R-HCtrl13"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  1885702944][
                   GeneralUtilities`Slice[
                    Key["R-HCtrl13"]]], "Mouse"], 
                 ImageSize -> {{86.4, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "Whole chick embryo sample that has been electroporated with \
a hairy1 control scrambled morpholino.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-HCtrl13"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{940.8000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-HCtrl13"], 
                   Key["documentation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-HCtrl13"], 
                   Key["xRef"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-HCtrl13"], 
                   Key["annotation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["unkn", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-HCtrl13"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-HCtrl13"], 
                   Key["interRunCalibrator"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-HCtrl13"], 
                   Key["quantity"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-HCtrl13"], 
                   Key["calibratorSample"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-HCtrl13"], 
                   Key["cdnaSynthesisMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-HCtrl13"], 
                   Key["templateQuantity"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["R-dsH18", 
                    Style[
                    "R-dsH18", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885702944][{
                    Key["R-dsH18"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  1885702944][
                   GeneralUtilities`Slice[
                    Key["R-dsH18"]]], "Mouse"], 
                 ImageSize -> {{86.4, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "Whole chick embryo sample that has been electroporated with \
siRNA against hairy1 mRNA.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-dsH18"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{940.8000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-dsH18"], 
                   Key["documentation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-dsH18"], 
                   Key["xRef"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-dsH18"], 
                   Key["annotation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["unkn", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-dsH18"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-dsH18"], 
                   Key["interRunCalibrator"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-dsH18"], 
                   Key["quantity"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-dsH18"], 
                   Key["calibratorSample"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-dsH18"], 
                   Key["cdnaSynthesisMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
                  GeneralUtilities`Slice[
                   Key["R-dsH18"], 
                   Key["templateQuantity"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885702944][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1885702944]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1885702944][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17058`",
 CellLabel->"Out[2]=",
 CellID->1732711337]
}, Open  ]],

Cell["\<\
Check information associated with one particular sample, e.g. \"R-MoH9\":\
\>", "ExampleText",
 CellID->1698770769],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rpa", "[", 
  RowBox[{"\"\<sample\>\"", ",", "\"\<R-MoH9\>\""}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->505630793],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 10, "InitialType" -> 
        TypeSystem`Struct[{
          "description", "documentation", "xRef", "annotation", "type", 
           "interRunCalibrator", "quantity", "calibratorSample", 
           "cdnaSynthesisMethod", "templateQuantity"}, {
           TypeSystem`Atom[String], TypeSystem`UnknownType, 
           TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
           TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
           TypeSystem`UnknownType}], "Shape" -> 
        TypeSystem`PackageScope`DocumentShape[
          
          Association[{"description"} -> 
           TypeSystem`PackageScope`AtomShape[912.0000000000001], {
            "documentation"} -> 
           TypeSystem`PackageScope`UnknownShape, {"xRef"} -> 
           TypeSystem`PackageScope`UnknownShape, {"annotation"} -> 
           TypeSystem`PackageScope`UnknownShape, {"type"} -> 
           TypeSystem`PackageScope`AtomShape[38.400000000000006`], {
            "interRunCalibrator"} -> 
           TypeSystem`PackageScope`AtomShape[36], {"quantity"} -> 
           TypeSystem`PackageScope`UnknownShape, {"calibratorSample"} -> 
           TypeSystem`PackageScope`AtomShape[36], {"cdnaSynthesisMethod"} -> 
           TypeSystem`PackageScope`UnknownShape, {"templateQuantity"} -> 
           TypeSystem`PackageScope`UnknownShape], 1], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1324337257], "Type" -> 
        TypeSystem`Struct[{
          "description", "documentation", "xRef", "annotation", "type", 
           "interRunCalibrator", "quantity", "calibratorSample", 
           "cdnaSynthesisMethod", "templateQuantity"}, {
           TypeSystem`Atom[String], TypeSystem`UnknownType, 
           TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
           TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`UnknownType, 
           TypeSystem`UnknownType}], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[1324337257]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"description\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"description\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1121541288][{
                    Key["description"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["description"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "Whole chick embryo sample that has been electroporated with \
morpholino against the hairy1 mRNA.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{912.0000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1121541288][{
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["documentation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"xRef\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"xRef\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1121541288][{
                    Key["xRef"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["xRef"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["xRef"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"annotation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"annotation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1121541288][{
                    Key["annotation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["annotation"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["annotation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"type\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"type\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1121541288][{
                    Key["type"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["type"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["unkn", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"interRunCalibrator\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"interRunCalibrator\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1121541288][{
                    Key["interRunCalibrator"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["interRunCalibrator"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["interRunCalibrator"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"quantity\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"quantity\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1121541288][{
                    Key["quantity"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["quantity"]]], "Mouse"], Background -> GrayLevel[0.95],
                 Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["quantity"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"calibratorSample\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"calibratorSample\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1121541288][{
                    Key["calibratorSample"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["calibratorSample"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["False"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["calibratorSample"]]], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"cdnaSynthesisMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"cdnaSynthesisMethod\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1121541288][{
                    Key["cdnaSynthesisMethod"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["cdnaSynthesisMethod"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["cdnaSynthesisMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"templateQuantity\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"templateQuantity\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1121541288][{
                    Key["templateQuantity"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["templateQuantity"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
                  GeneralUtilities`Slice[
                   Key["templateQuantity"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1121541288][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1121541288]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1121541288][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17058`",
 CellLabel->"Out[3]=",
 CellID->174125827]
}, Open  ]],

Cell["\<\
Each sample can have a type: unkn (unknown sample), ntc (non template \
control), nac (no amplification control), std (standard sample), ntp (no \
target present), nrt (minusRT, negative for Reverse Transcription), pos \
(positive control) or opt (optical calibrator sample).\
\>", "ExampleText",
 CellID->264199982],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rpa", "[", 
  RowBox[{"\"\<sample\>\"", ",", "All", ",", "\"\<type\>\""}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->850139065],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 3, "Length" -> 3, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           TypeSystem`Enumeration["unkn"]], 3], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[86.4], 
            TypeSystem`PackageScope`AtomShape[38.400000000000006`]]], 3, {}], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[237467157], 
        "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           TypeSystem`Enumeration["unkn"]], 3], "HandleQ" -> True, 
        "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[237467157]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane["R-MoH9", ImageSize -> {{86.4, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["unkn", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[817888183][
                 
                  GeneralUtilities`Slice[
                   Key["R-MoH9"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane["R-HCtrl13", ImageSize -> {{86.4, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["unkn", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[817888183][
                 
                  GeneralUtilities`Slice[
                   Key["R-HCtrl13"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane["R-dsH18", ImageSize -> {{86.4, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["unkn", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[817888183][
                 
                  GeneralUtilities`Slice[
                   Key["R-dsH18"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 817888183][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 817888183]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[817888183][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[817888183][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17058`",
 CellLabel->"Out[4]=",
 CellID->772908547]
}, Open  ]],

Cell["Inspect the description of all samples:", "ExampleText",
 CellID->1889742166],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rpa", "[", 
  RowBox[{"\"\<sample\>\"", ",", "All", ",", "\"\<description\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->1901167352],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 3, "Length" -> 3, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 3], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[86.4], 
            TypeSystem`PackageScope`AtomShape[940.8000000000002]]], 3, {}], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[2001683559], 
        "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 3], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[2001683559]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane["R-MoH9", ImageSize -> {{86.4, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "Whole chick embryo sample that has been electroporated with \
morpholino against the hairy1 mRNA.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1213954770][
                  GeneralUtilities`Slice[
                   Key["R-MoH9"]]], "Mouse"], 
                ImageSize -> {{940.8000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane["R-HCtrl13", ImageSize -> {{86.4, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "Whole chick embryo sample that has been electroporated with \
a hairy1 control scrambled morpholino.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1213954770][
                  GeneralUtilities`Slice[
                   Key["R-HCtrl13"]]], "Mouse"], 
                ImageSize -> {{940.8000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane["R-dsH18", ImageSize -> {{86.4, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "Whole chick embryo sample that has been electroporated with \
siRNA against hairy1 mRNA.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1213954770][
                  GeneralUtilities`Slice[
                   Key["R-dsH18"]]], "Mouse"], 
                ImageSize -> {{940.8000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1213954770][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1213954770]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1213954770][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1213954770][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17058`",
 CellLabel->"Out[5]=",
 CellID->76825920]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["target", "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True],

Cell["\<\
The target element contains all targets. A target is defined by the primer \
(and probe) mix added to the sample to specifically amplify the target \
sequence (amplicon).\
\>", "ExampleText",
 CellID->966292206],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rpa", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?\
raw=true\>\"", ",", "\"\<RDML\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"rpa", "[", "\"\<target\>\"", "]"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->373617471],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 10, "Length" -> 10, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "description", "documentation", "xRef", "type", 
            "amplificationEfficiencyMethod", "amplificationEfficiency", 
            "amplificationEfficiencySE", "detectionLimit", "dyeId", 
            "sequences", "commercialAssay"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Vector[
             TypeSystem`Atom[String], 1], 
            TypeSystem`Vector[
             TypeSystem`Struct[{"name", "id"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["NCBI Gene Database"]], 
               TypeSystem`Atom[String]}], 1], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["ref", "toi"]], TypeSystem`UnknownType, 
            TypeSystem`UnknownType, TypeSystem`UnknownType, 
            TypeSystem`UnknownType, 
            TypeSystem`Atom[
             TypeSystem`Enumeration["SYBR"]], 
            
            TypeSystem`Struct[{
             "forwardPrimer", "reversePrimer", "probe1", "probe2", 
              "amplicon"}, {
              
              TypeSystem`Struct[{
               "threePrimeTag", "fivePrimeTag", "sequence"}, {
               TypeSystem`UnknownType, TypeSystem`UnknownType, 
                TypeSystem`Atom[String]}], 
              
              TypeSystem`Struct[{
               "threePrimeTag", "fivePrimeTag", "sequence"}, {
               TypeSystem`UnknownType, TypeSystem`UnknownType, 
                TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              TypeSystem`Struct[{
               "threePrimeTag", "fivePrimeTag", "sequence"}, {
               TypeSystem`UnknownType, TypeSystem`UnknownType, 
                TypeSystem`Atom[String]}]}], TypeSystem`UnknownType}], 10], 
        "Shape" -> TypeSystem`PackageScope`HeaderShape[
          Association[{All, 
             TypeSystem`PackageScope`KeyDummy[24]} -> 1, {All, "description"} -> 
           1, {All, "documentation"} -> 1, {All, "xRef"} -> 
           Association[{All, "xRef", All, "name"} -> 
             1, {All, "xRef", All, "id"} -> 1], {All, "type"} -> 
           1, {All, "amplificationEfficiencyMethod"} -> 
           1, {All, "amplificationEfficiency"} -> 
           1, {All, "amplificationEfficiencySE"} -> 
           1, {All, "detectionLimit"} -> 1, {All, "dyeId"} -> 
           1, {All, "sequences"} -> 
           Association[{All, "sequences", "forwardPrimer"} -> 
             Association[{All, "sequences", "forwardPrimer", "threePrimeTag"} -> 
               1, {All, "sequences", "forwardPrimer", "fivePrimeTag"} -> 
               1, {All, "sequences", "forwardPrimer", "sequence"} -> 1], {
              All, "sequences", "reversePrimer"} -> 
             Association[{All, "sequences", "reversePrimer", "threePrimeTag"} -> 
               1, {All, "sequences", "reversePrimer", "fivePrimeTag"} -> 
               1, {All, "sequences", "reversePrimer", "sequence"} -> 1], {
              All, "sequences", "probe1"} -> 1, {All, "sequences", "probe2"} -> 
             1, {All, "sequences", "amplicon"} -> 
             Association[{All, "sequences", "amplicon", "threePrimeTag"} -> 
               1, {All, "sequences", "amplicon", "fivePrimeTag"} -> 
               1, {All, "sequences", "amplicon", "sequence"} -> 1]], {
            All, "commercialAssay"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[67.20000000000002], 
             TypeSystem`PackageScope`RowShape[
              Association[
              "description" -> 
               TypeSystem`PackageScope`AtomShape[720.0000000000001], 
               "documentation" -> TypeSystem`PackageScope`UnknownShape, 
               "xRef" -> TypeSystem`PackageScope`Limited[
                 TypeSystem`PackageScope`ColumnShape[
                  TypeSystem`PackageScope`RowShape[
                   Association[
                   "name" -> TypeSystem`PackageScope`AtomShape[172.8], "id" -> 
                    TypeSystem`PackageScope`AtomShape[57.60000000000001]]]], 
                 1, {All, "xRef"}], "type" -> 
               TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
               "amplificationEfficiencyMethod" -> 
               TypeSystem`PackageScope`UnknownShape, 
               "amplificationEfficiency" -> 
               TypeSystem`PackageScope`UnknownShape, 
               "amplificationEfficiencySE" -> 
               TypeSystem`PackageScope`UnknownShape, "detectionLimit" -> 
               TypeSystem`PackageScope`UnknownShape, "dyeId" -> 
               TypeSystem`PackageScope`AtomShape[38.400000000000006`], 
               "sequences" -> TypeSystem`PackageScope`RowShape[
                 Association[
                 "forwardPrimer" -> TypeSystem`PackageScope`RowShape[
                    Association[
                    "threePrimeTag" -> TypeSystem`PackageScope`UnknownShape, 
                    "fivePrimeTag" -> TypeSystem`PackageScope`UnknownShape, 
                    "sequence" -> 
                    TypeSystem`PackageScope`AtomShape[220.80000000000004`]]], 
                  "reversePrimer" -> TypeSystem`PackageScope`RowShape[
                    Association[
                    "threePrimeTag" -> TypeSystem`PackageScope`UnknownShape, 
                    "fivePrimeTag" -> TypeSystem`PackageScope`UnknownShape, 
                    "sequence" -> 
                    TypeSystem`PackageScope`AtomShape[230.40000000000003`]]], 
                  "probe1" -> TypeSystem`PackageScope`UnknownShape, "probe2" -> 
                  TypeSystem`PackageScope`UnknownShape, "amplicon" -> 
                  TypeSystem`PackageScope`RowShape[
                    Association[
                    "threePrimeTag" -> TypeSystem`PackageScope`UnknownShape, 
                    "fivePrimeTag" -> TypeSystem`PackageScope`UnknownShape, 
                    "sequence" -> 
                    TypeSystem`PackageScope`AtomShape[
                    1785.6000000000004`]]]]], "commercialAssay" -> 
               TypeSystem`PackageScope`UnknownShape]]]], 10, {}]], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[1832671803], 
        "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "description", "documentation", "xRef", "type", 
            "amplificationEfficiencyMethod", "amplificationEfficiency", 
            "amplificationEfficiencySE", "detectionLimit", "dyeId", 
            "sequences", "commercialAssay"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Vector[
             TypeSystem`Atom[String], 1], 
            TypeSystem`Vector[
             TypeSystem`Struct[{"name", "id"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["NCBI Gene Database"]], 
               TypeSystem`Atom[String]}], 1], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["ref", "toi"]], TypeSystem`UnknownType, 
            TypeSystem`UnknownType, TypeSystem`UnknownType, 
            TypeSystem`UnknownType, 
            TypeSystem`Atom[
             TypeSystem`Enumeration["SYBR"]], 
            
            TypeSystem`Struct[{
             "forwardPrimer", "reversePrimer", "probe1", "probe2", 
              "amplicon"}, {
              
              TypeSystem`Struct[{
               "threePrimeTag", "fivePrimeTag", "sequence"}, {
               TypeSystem`UnknownType, TypeSystem`UnknownType, 
                TypeSystem`Atom[String]}], 
              
              TypeSystem`Struct[{
               "threePrimeTag", "fivePrimeTag", "sequence"}, {
               TypeSystem`UnknownType, TypeSystem`UnknownType, 
                TypeSystem`Atom[String]}], TypeSystem`UnknownType, 
              TypeSystem`UnknownType, 
              
              TypeSystem`Struct[{
               "threePrimeTag", "fivePrimeTag", "sequence"}, {
               TypeSystem`UnknownType, TypeSystem`UnknownType, 
                TypeSystem`Atom[String]}]}], TypeSystem`UnknownType}], 10], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[1832671803]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox["\"\"", FontColor -> GrayLevel[0.4]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox[
                    "\"\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, Keys}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, Keys]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"description\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"description\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "description"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "description"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "documentation"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "documentation"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"xRef\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"xRef\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "xRef"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "xRef"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Center, Baseline}], 
               SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"type\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"type\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "type"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "type"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"amplificationEfficiencyMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"amplificationEfficiencyMethod\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "amplificationEfficiencyMethod"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                  All, "amplificationEfficiencyMethod"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"amplificationEfficiency\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"amplificationEfficiency\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "amplificationEfficiency"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "amplificationEfficiency"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"amplificationEfficiencySE\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"amplificationEfficiencySE\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "amplificationEfficiencySE"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "amplificationEfficiencySE"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"detectionLimit\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"detectionLimit\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "detectionLimit"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "detectionLimit"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"dyeId\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dyeId\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "dyeId"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "dyeId"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sequences\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sequences\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "sequences"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Center, Baseline}], SpanFromLeft, SpanFromLeft, 
               SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
               SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"commercialAssay\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"commercialAssay\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "commercialAssay"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "commercialAssay"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"name\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"name\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "xRef", All, "name"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "xRef", All, "name"]], "Mouse"],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"id\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"id\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "xRef", All, "id"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "xRef", All, "id"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}],
                SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"forwardPrimer\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"forwardPrimer\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "forwardPrimer"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "sequences", "forwardPrimer"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Center, Baseline}], SpanFromLeft, SpanFromLeft, 
               
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"reversePrimer\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"reversePrimer\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "reversePrimer"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "sequences", "reversePrimer"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Center, Baseline}], SpanFromLeft, SpanFromLeft, 
               
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"probe1\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"probe1\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "probe1"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "sequences", "probe1"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"probe2\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"probe2\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "probe2"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "sequences", "probe2"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"amplicon\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"amplicon\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "amplicon"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[All, "sequences", "amplicon"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Center, Baseline}], SpanFromLeft, SpanFromLeft, 
               SpanFromAbove}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"threePrimeTag\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"threePrimeTag\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "forwardPrimer", "threePrimeTag"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                  All, "sequences", "forwardPrimer", "threePrimeTag"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"fivePrimeTag\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"fivePrimeTag\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "forwardPrimer", "fivePrimeTag"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                  All, "sequences", "forwardPrimer", "fivePrimeTag"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"sequence\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sequence\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "forwardPrimer", "sequence"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                  All, "sequences", "forwardPrimer", "sequence"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"threePrimeTag\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"threePrimeTag\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "reversePrimer", "threePrimeTag"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                  All, "sequences", "reversePrimer", "threePrimeTag"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"fivePrimeTag\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"fivePrimeTag\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "reversePrimer", "fivePrimeTag"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                  All, "sequences", "reversePrimer", "fivePrimeTag"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"sequence\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sequence\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "reversePrimer", "sequence"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                  All, "sequences", "reversePrimer", "sequence"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}],
                SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"threePrimeTag\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"threePrimeTag\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "amplicon", "threePrimeTag"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                  All, "sequences", "amplicon", "threePrimeTag"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"fivePrimeTag\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"fivePrimeTag\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "amplicon", "fivePrimeTag"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                  All, "sequences", "amplicon", "fivePrimeTag"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"sequence\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sequence\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    All, "sequences", "amplicon", "sequence"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                  All, "sequences", "amplicon", "sequence"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}],
                SpanFromAbove}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB1P1", 
                    Style[
                    "HoxB1P1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["HoxB1P1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                   GeneralUtilities`Slice[
                    Key["HoxB1P1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HOXB1 homeobox B1 [ Gallus gallus (chicken) ]", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{720.0000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"assembly_HoxBCluster"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"assembly_HoxBCluster"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["HoxB1P1"], 
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["documentation"]]], "Mouse"]], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["xRef"], 1, 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["395900", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["xRef"], 1, 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["toi", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["amplificationEfficiencyMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["amplificationEfficiency"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["amplificationEfficiencySE"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["detectionLimit"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["SYBR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["dyeId"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CCAAGACAGCCAAAGTGT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["AGTGAAACTCCTTCTCCAG", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["sequences"], 
                   Key["probe1"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["sequences"], 
                   Key["probe2"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "CCAAGACAGCCAAAGTGTCGGAATACGGGCTGCTGGGACAGCCCAACACCATTCGCACCAA\
CTTCACCACCAAGCAGCTG \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["commercialAssay"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["GusBP1", 
                    Style[
                    "GusBP1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["GusBP1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                   GeneralUtilities`Slice[
                    Key["GusBP1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "GUSB glucuronidase beta [ Gallus gallus (chicken) ]", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{720.0000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["documentation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["xRef"], 1, 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["427823", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["xRef"], 1, 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["ref", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["amplificationEfficiencyMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["amplificationEfficiency"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["amplificationEfficiencySE"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["detectionLimit"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["SYBR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["dyeId"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["AATCTCTACAGCATCATCTC", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["GCTATCAGTGTCTTGAAGTA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["sequences"], 
                   Key["probe1"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["sequences"], 
                   Key["probe2"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "AATCTCTACAGCATCATCTCGTCGTGATGGAGGAACTGATCCGCAGGGATAAGAACAGGCC\
CTCAGTTGTGATGTGGTCA \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["commercialAssay"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB2P2", 
                    Style[
                    "HoxB2P2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["HoxB2P2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                   GeneralUtilities`Slice[
                    Key["HoxB2P2"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HOXB2 homeobox B2 [ Gallus gallus (chicken) ]", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{720.0000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"assembly_HoxBCluster"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"assembly_HoxBCluster"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["HoxB2P2"], 
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["documentation"]]], "Mouse"]], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["xRef"], 1, 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["429940", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["xRef"], 1, 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["toi", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["amplificationEfficiencyMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["amplificationEfficiency"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["amplificationEfficiencySE"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["detectionLimit"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["SYBR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["dyeId"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["GCAACACTTCAATTTCCAATA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["GGGACAGAAAGGGATAAAC", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["sequences"], 
                   Key["probe1"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["sequences"], 
                   Key["probe2"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "GCAACACTTCAATTTCCAATAGCGGTCCCCGCCTGTCTCTCTCTCTTTTTTTTTTTGTTTA\
TCCCTTTCTGTCCC", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["commercialAssay"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB3P2", 
                    Style[
                    "HoxB3P2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["HoxB3P2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                   GeneralUtilities`Slice[
                    Key["HoxB3P2"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HOXB3 homeobox B3 [ Gallus gallus (chicken) ]", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{720.0000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"assembly_HoxBCluster"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"assembly_HoxBCluster"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["HoxB3P2"], 
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["documentation"]]], "Mouse"]], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["xRef"], 1, 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["395502", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["xRef"], 1, 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["toi", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["amplificationEfficiencyMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["amplificationEfficiency"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["amplificationEfficiencySE"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["detectionLimit"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["SYBR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["dyeId"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["AACGCCCAGTCTCACCAA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["AGGTTTCTGTGCTAGGGGAG", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["sequences"], 
                   Key["probe1"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["sequences"], 
                   Key["probe2"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "AACGCCCAGTCTCACCAAGCAGATTTTCCCCTGGATGAAAGAATCGAGGCAAAACTCGAAA\
CAGAAAAGCAGCTCCCCTAGCACAGAAACCT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["commercialAssay"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB5P1", 
                    Style[
                    "HoxB5P1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["HoxB5P1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                   GeneralUtilities`Slice[
                    Key["HoxB5P1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HOXB5 homeobox B5 [ Gallus gallus (chicken) ]", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{720.0000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"assembly_HoxBCluster"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"assembly_HoxBCluster"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["HoxB5P1"], 
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["documentation"]]], "Mouse"]], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["xRef"], 1, 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["425096", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["xRef"], 1, 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["toi", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["amplificationEfficiencyMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["amplificationEfficiency"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["amplificationEfficiencySE"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["detectionLimit"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["SYBR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["dyeId"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["ACTTTGTAAACTCGTTCTCAG", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CCATTGTAGTTGTAGCCATAA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["sequences"], 
                   Key["probe1"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["sequences"], 
                   Key["probe2"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "ACTTTGTAAACTCGTTCTCAGGGCGCTACCCAAATGGCCCCGACTATCAGTTACTAAATTA\
TGGGACCAGCAGTTCCATG \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["commercialAssay"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["ActBP1", 
                    Style[
                    "ActBP1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["ActBP1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                   GeneralUtilities`Slice[
                    Key["ActBP1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["ACTB actin, beta [ Gallus gallus (chicken) ]", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{720.0000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["documentation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["xRef"], 1, 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["396526", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["xRef"], 1, 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["ref", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["amplificationEfficiencyMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["amplificationEfficiency"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["amplificationEfficiencySE"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["detectionLimit"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["SYBR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["dyeId"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CTTCTAAACCGGACTGTTACCA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["AAACAAATAAAGCCATGCCAATCT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["sequences"], 
                   Key["probe1"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["sequences"], 
                   Key["probe2"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "CTTCTAAACCGGACTGTTACCAACACCCACACCCCTGTGATGAAACAAAACCCATAAATGC\
GCATAAAACAAGACGAGAT \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["commercialAssay"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB8P2", 
                    Style[
                    "HoxB8P2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["HoxB8P2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                   GeneralUtilities`Slice[
                    Key["HoxB8P2"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HOXB8 homeobox B8 [ Gallus gallus (chicken) ]", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{720.0000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"assembly_HoxBCluster"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"assembly_HoxBCluster"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["HoxB8P2"], 
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["documentation"]]], "Mouse"]], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["xRef"], 1, 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["395737", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["xRef"], 1, 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["toi", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["amplificationEfficiencyMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["amplificationEfficiency"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["amplificationEfficiencySE"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["detectionLimit"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["SYBR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["dyeId"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CGAGCAGGAAGAACTGGAA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["TCTTGTCCGCCTTCTGTG", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["sequences"], 
                   Key["probe1"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["sequences"], 
                   Key["probe2"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "CGAGCAGGAAGAACTGGAAAAACAGAAAATGGAAAGAGCCCAGGAGGTGGACGAGGAAGGG\
GAAGCACAGAAGGCGGACAAGA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["commercialAssay"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB9P4", 
                    Style[
                    "HoxB9P4", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["HoxB9P4"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                   GeneralUtilities`Slice[
                    Key["HoxB9P4"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HOXB9 homeobox B9 [ Gallus gallus (chicken) ]", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{720.0000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"assembly_HoxBCluster"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"assembly_HoxBCluster"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["HoxB9P4"], 
                    Key["documentation"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["documentation"]]], "Mouse"]], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["xRef"], 1, 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["771865", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["xRef"], 1, 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["toi", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["amplificationEfficiencyMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["amplificationEfficiency"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["amplificationEfficiencySE"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["detectionLimit"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["SYBR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["dyeId"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CGATGCCCTTACACGAAATACC", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CTCCTTGCCCTGCTCCTT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["sequences"], 
                   Key["probe1"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["sequences"], 
                   Key["probe2"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "CGATGCCCTTACACGAAATACCAGACCCTGGAACTAGAGAAGGAGTTTTTATTCAATATGT\
ACCTGACGAGGGACCGTAG \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["commercialAssay"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["Hry1P2", 
                    Style[
                    "Hry1P2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["Hry1P2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                   GeneralUtilities`Slice[
                    Key["Hry1P2"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "HES4 hairy and enhancer of split 4 (Drosophila) [ Gallus \
gallus (chicken) ]", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{720.0000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["documentation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["xRef"], 1, 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["395128", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["xRef"], 1, 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["toi", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["amplificationEfficiencyMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["amplificationEfficiency"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["amplificationEfficiencySE"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["detectionLimit"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["SYBR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["dyeId"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["TTCCTAAGCAGATTTCAACACGG", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CGAGATCCCAACCTCTGAGATTA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["sequences"], 
                   Key["probe1"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["sequences"], 
                   Key["probe2"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "TTCCTAAGCAGATTTCAACACGGGGAAAGGATTAAAAAGGACCTCGCTAGGAACCGTGCWA\
TTTATTAATCTCAGAGGTTGGGATCTCG", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["commercialAssay"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["LMNAP1", 
                    Style[
                    "LMNAP1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][{
                    
                    Key["LMNAP1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                   GeneralUtilities`Slice[
                    Key["LMNAP1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["LMNA lamin A/C [ Gallus gallus (chicken) ]", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{720.0000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["documentation"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["xRef"], 1, 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["415464", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["xRef"], 1, 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["ref", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["amplificationEfficiencyMethod"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["amplificationEfficiency"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["amplificationEfficiencySE"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["detectionLimit"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["SYBR", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["dyeId"]]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CTCATTTTGGGCTCATTTCC", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["sequences"], 
                   Key["forwardPrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["AATAAAGGTTCTCCGTCTCC", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["sequences"], 
                   Key["reversePrimer"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["sequences"], 
                   Key["probe1"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["sequences"], 
                   Key["probe2"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["threePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["fivePrimeTag"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "CTCATTTTGGGCTCATTTCCCCCCCAAAGCAGCGCAAACCAAAGATGGCTTTTTTTGTTCT\
CTTTTCTATGGCCGCGTTT \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["sequences"], 
                   Key["amplicon"], 
                   Key["sequence"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["commercialAssay"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 643452786]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[643452786][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17059`",
 CellLabel->"Out[2]=",
 CellID->1175695757]
}, Open  ]],

Cell["Examine all amplicon sequences:", "ExampleText",
 CellID->43851099],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rpa", "[", 
  RowBox[{
  "\"\<target\>\"", ",", "All", ",", "\"\<sequences\>\"", ",", 
   "\"\<amplicon\>\"", ",", "\"\<sequence\>\""}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->1441276472],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 10, "Length" -> 10, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 10], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[67.20000000000002], 
            TypeSystem`PackageScope`AtomShape[1785.6000000000004`]]], 10, {}],
         "InitialData" -> TypeSystem`PackageScope`CacheHandle[1278467166], 
        "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 10], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[1278467166]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                "HoxB1P1", 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "CCAAGACAGCCAAAGTGTCGGAATACGGGCTGCTGGGACAGCCCAACACCATTCGCACCAA\
CTTCACCACCAAGCAGCTG \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1948606724][
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "GusBP1", 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "AATCTCTACAGCATCATCTCGTCGTGATGGAGGAACTGATCCGCAGGGATAAGAACAGGCC\
CTCAGTTGTGATGTGGTCA \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1948606724][
                  GeneralUtilities`Slice[
                   Key["GusBP1"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "HoxB2P2", 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "GCAACACTTCAATTTCCAATAGCGGTCCCCGCCTGTCTCTCTCTCTTTTTTTTTTTGTTTA\
TCCCTTTCTGTCCC", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1948606724][
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "HoxB3P2", 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "AACGCCCAGTCTCACCAAGCAGATTTTCCCCTGGATGAAAGAATCGAGGCAAAACTCGAAA\
CAGAAAAGCAGCTCCCCTAGCACAGAAACCT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1948606724][
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "HoxB5P1", 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "ACTTTGTAAACTCGTTCTCAGGGCGCTACCCAAATGGCCCCGACTATCAGTTACTAAATTA\
TGGGACCAGCAGTTCCATG \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1948606724][
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "ActBP1", 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "CTTCTAAACCGGACTGTTACCAACACCCACACCCCTGTGATGAAACAAAACCCATAAATGC\
GCATAAAACAAGACGAGAT \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1948606724][
                  GeneralUtilities`Slice[
                   Key["ActBP1"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "HoxB8P2", 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "CGAGCAGGAAGAACTGGAAAAACAGAAAATGGAAAGAGCCCAGGAGGTGGACGAGGAAGGG\
GAAGCACAGAAGGCGGACAAGA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1948606724][
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "HoxB9P4", 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "CGATGCCCTTACACGAAATACCAGACCCTGGAACTAGAGAAGGAGTTTTTATTCAATATGT\
ACCTGACGAGGGACCGTAG \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1948606724][
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "Hry1P2", 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                
                "TTCCTAAGCAGATTTCAACACGGGGAAAGGATTAAAAAGGACCTCGCTAGGAACCGTGCWA\
TTTATTAATCTCAGAGGTTGGGATCTCG", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1948606724][
                  GeneralUtilities`Slice[
                   Key["Hry1P2"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                "LMNAP1", 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "CTCATTTTGGGCTCATTTCCCCCCCAAAGCAGCGCAAACCAAAGATGGCTTTTTTTGTTCT\
CTTTTCTATGGCCGCGTTT \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1948606724][
                  GeneralUtilities`Slice[
                   Key["LMNAP1"]]], "Mouse"], 
                ImageSize -> {{1785.6000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1948606724][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1948606724]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1948606724][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1948606724][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17059`",
 CellLabel->"Out[3]=",
 CellID->1089780689]
}, Open  ]],

Cell["Inspect the forward and reverse primers:", "ExampleText",
 CellID->287315498],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"rpa", "[", 
   RowBox[{"\"\<target\>\"", ",", "All", ",", "\"\<sequences\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<forwardPrimer\>\"", ",", "\"\<reversePrimer\>\""}], "}"}], 
    ",", "\"\<sequence\>\""}], "]"}], "//", "Dataset"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->1922855523],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 10, "Length" -> 10, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"forwardPrimer", "reversePrimer"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 10], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, 
             TypeSystem`PackageScope`KeyDummy[25]} -> 
           1, {All, "forwardPrimer"} -> 1, {All, "reversePrimer"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[67.20000000000002], 
             TypeSystem`PackageScope`RowShape[
              Association[
              "forwardPrimer" -> 
               TypeSystem`PackageScope`AtomShape[220.80000000000004`], 
               "reversePrimer" -> 
               TypeSystem`PackageScope`AtomShape[230.40000000000003`]]]]], 
           10, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1624311575], "Type" -> 
        TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"forwardPrimer", "reversePrimer"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 10], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[1624311575]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox["\"\"", FontColor -> GrayLevel[0.4]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox[
                    "\"\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][{
                    All, Keys}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[All, Keys]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"forwardPrimer\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"forwardPrimer\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][{
                    All, "forwardPrimer"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[All, "forwardPrimer"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"reversePrimer\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"reversePrimer\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][{
                    All, "reversePrimer"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[All, "reversePrimer"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB1P1", 
                    Style[
                    "HoxB1P1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][{
                    Key["HoxB1P1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  
                   GeneralUtilities`Slice[
                    Key["HoxB1P1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CCAAGACAGCCAAAGTGT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["forwardPrimer"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["AGTGAAACTCCTTCTCCAG", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["reversePrimer"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["GusBP1", 
                    Style[
                    "GusBP1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][{
                    Key["GusBP1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  
                   GeneralUtilities`Slice[
                    Key["GusBP1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["AATCTCTACAGCATCATCTC", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["forwardPrimer"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["GCTATCAGTGTCTTGAAGTA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["reversePrimer"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB2P2", 
                    Style[
                    "HoxB2P2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][{
                    Key["HoxB2P2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  
                   GeneralUtilities`Slice[
                    Key["HoxB2P2"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["GCAACACTTCAATTTCCAATA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["forwardPrimer"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["GGGACAGAAAGGGATAAAC", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["reversePrimer"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB3P2", 
                    Style[
                    "HoxB3P2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][{
                    Key["HoxB3P2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  
                   GeneralUtilities`Slice[
                    Key["HoxB3P2"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["AACGCCCAGTCTCACCAA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["forwardPrimer"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["AGGTTTCTGTGCTAGGGGAG", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["reversePrimer"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB5P1", 
                    Style[
                    "HoxB5P1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][{
                    Key["HoxB5P1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  
                   GeneralUtilities`Slice[
                    Key["HoxB5P1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["ACTTTGTAAACTCGTTCTCAG", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["forwardPrimer"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CCATTGTAGTTGTAGCCATAA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["reversePrimer"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["ActBP1", 
                    Style[
                    "ActBP1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][{
                    Key["ActBP1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  
                   GeneralUtilities`Slice[
                    Key["ActBP1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CTTCTAAACCGGACTGTTACCA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["forwardPrimer"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["AAACAAATAAAGCCATGCCAATCT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["reversePrimer"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB8P2", 
                    Style[
                    "HoxB8P2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][{
                    Key["HoxB8P2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  
                   GeneralUtilities`Slice[
                    Key["HoxB8P2"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CGAGCAGGAAGAACTGGAA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["forwardPrimer"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["TCTTGTCCGCCTTCTGTG", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["reversePrimer"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB9P4", 
                    Style[
                    "HoxB9P4", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][{
                    Key["HoxB9P4"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  
                   GeneralUtilities`Slice[
                    Key["HoxB9P4"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CGATGCCCTTACACGAAATACC", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["forwardPrimer"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CTCCTTGCCCTGCTCCTT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["reversePrimer"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["Hry1P2", 
                    Style[
                    "Hry1P2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][{
                    Key["Hry1P2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  
                   GeneralUtilities`Slice[
                    Key["Hry1P2"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["TTCCTAAGCAGATTTCAACACGG", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["forwardPrimer"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CGAGATCCCAACCTCTGAGATTA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["reversePrimer"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["LMNAP1", 
                    Style[
                    "LMNAP1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][{
                    Key["LMNAP1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  
                   GeneralUtilities`Slice[
                    Key["LMNAP1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["CTCATTTTGGGCTCATTTCC", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["forwardPrimer"]]], "Mouse"], 
                ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["AATAAAGGTTCTCCGTCTCC", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["reversePrimer"]]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 59570718]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[59570718][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17059`",
 CellLabel->"Out[4]=",
 CellID->1817886965]
}, Open  ]],

Cell["\<\
The xRef subelement relates the targets to an external database:\
\>", "ExampleText",
 CellID->821206152],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rpa", "[", 
  RowBox[{"\"\<target\>\"", ",", "All", ",", "\"\<xRef\>\"", ",", "1"}], 
  "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->695714268],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 10, "Length" -> 10, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"name", "id"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["NCBI Gene Database"]], 
            TypeSystem`Atom[String]}], 10], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, 
             TypeSystem`PackageScope`KeyDummy[26]} -> 1, {All, "name"} -> 
           1, {All, "id"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[67.20000000000002], 
             TypeSystem`PackageScope`RowShape[
              Association[
              "name" -> TypeSystem`PackageScope`AtomShape[172.8], "id" -> 
               TypeSystem`PackageScope`AtomShape[57.60000000000001]]]]], 
           10, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1237215484], "Type" -> 
        TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"name", "id"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["NCBI Gene Database"]], 
            TypeSystem`Atom[String]}], 10], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[1237215484]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox["\"\"", FontColor -> GrayLevel[0.4]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox[
                    "\"\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][{
                    All, Keys}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[All, Keys]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"name\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"name\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][{
                    All, "name"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[All, "name"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"id\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"id\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][{
                    All, "id"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[All, "id"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB1P1", 
                    Style[
                    "HoxB1P1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][{
                    
                    Key["HoxB1P1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                   GeneralUtilities`Slice[
                    Key["HoxB1P1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["395900", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB1P1"], 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["GusBP1", 
                    Style[
                    "GusBP1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][{
                    
                    Key["GusBP1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                   GeneralUtilities`Slice[
                    Key["GusBP1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["427823", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["GusBP1"], 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB2P2", 
                    Style[
                    "HoxB2P2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][{
                    
                    Key["HoxB2P2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                   GeneralUtilities`Slice[
                    Key["HoxB2P2"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["429940", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB2P2"], 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB3P2", 
                    Style[
                    "HoxB3P2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][{
                    
                    Key["HoxB3P2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                   GeneralUtilities`Slice[
                    Key["HoxB3P2"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["395502", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB3P2"], 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB5P1", 
                    Style[
                    "HoxB5P1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][{
                    
                    Key["HoxB5P1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                   GeneralUtilities`Slice[
                    Key["HoxB5P1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["425096", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB5P1"], 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["ActBP1", 
                    Style[
                    "ActBP1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][{
                    
                    Key["ActBP1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                   GeneralUtilities`Slice[
                    Key["ActBP1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["396526", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["ActBP1"], 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB8P2", 
                    Style[
                    "HoxB8P2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][{
                    
                    Key["HoxB8P2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                   GeneralUtilities`Slice[
                    Key["HoxB8P2"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["395737", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB8P2"], 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["HoxB9P4", 
                    Style[
                    "HoxB9P4", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][{
                    
                    Key["HoxB9P4"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                   GeneralUtilities`Slice[
                    Key["HoxB9P4"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["771865", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["HoxB9P4"], 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["Hry1P2", 
                    Style[
                    "Hry1P2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][{
                    
                    Key["Hry1P2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                   GeneralUtilities`Slice[
                    Key["Hry1P2"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["395128", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["Hry1P2"], 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["LMNAP1", 
                    Style[
                    "LMNAP1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][{
                    
                    Key["LMNAP1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                   GeneralUtilities`Slice[
                    Key["LMNAP1"]]], "Mouse"], 
                 ImageSize -> {{67.20000000000002, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["NCBI Gene Database", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["name"]]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["415464", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
                 
                  GeneralUtilities`Slice[
                   Key["LMNAP1"], 
                   Key["id"]]], "Mouse"], 
                ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 161797328]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[161797328][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17059`",
 CellLabel->"Out[5]=",
 CellID->1170754946]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["thermalCyclingConditions", "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True],

Cell["\<\
The thermalCyclingConditions element describes the temperature and time steps \
taken by a thermocycler in order to amplify the DNA. It can be used to \
describe alternative cycling programs (e.g., a regular PCR or a cDNA \
synthesis program).
Show the temperature protocol description: \
\>", "ExampleText",
 CellID->1880844526],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rpa", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?\
raw=true\>\"", ",", "\"\<RDML\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"rpa", "[", 
  RowBox[{
  "\"\<thermalCyclingConditions\>\"", ",", "1", ",", "\"\<description\>\""}], 
  "]"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->428600974],

Cell[BoxData["\<\"Temperature protocol: melting temperature is 95 Celsius \
degrees; annealing temperature is 55 Celsius degrees; total number of cycles: \
61 (60 repeats after first step). Melting curve performed at the end of \
amplification: 65 thru 95 Celsius degrees (step: 0.5 degrees per 5 \
seconds).\"\>"], "Output",
 CellContext->"Cell$$17060`",
 CellLabel->"Out[2]=",
 CellID->833473445]
}, Open  ]],

Cell["Examine the various steps that compose the actual program:", \
"ExampleText",
 CellID->1013725298],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rpa", "[", 
  RowBox[{"\"\<thermalCyclingConditions\>\"", ",", "1", ",", "\"\<step\>\""}],
   "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->1890899376],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 5, "Length" -> 5, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{
           "nr", "description", "temperature", "gradient", "loop", "pause", 
            "lidOpen"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "temperature", "duration", "temperatureChange", "durationChange",
               "measure", "ramp"}, {
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[Real], TypeSystem`UnknownType, 
              TypeSystem`Atom[String], TypeSystem`UnknownType}], 
            TypeSystem`UnknownType, 
            TypeSystem`Assoc[
             TypeSystem`Atom[
              TypeSystem`Enumeration["goto", "repeat"]], 
             TypeSystem`Atom[Integer], 2], TypeSystem`UnknownType, 
            TypeSystem`UnknownType}], 5], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "nr"} -> 1, {All, "description"} -> 
           1, {All, "temperature"} -> 
           Association[{All, "temperature", "temperature"} -> 
             1, {All, "temperature", "duration"} -> 
             1, {All, "temperature", "temperatureChange"} -> 
             1, {All, "temperature", "durationChange"} -> 
             1, {All, "temperature", "measure"} -> 
             1, {All, "temperature", "ramp"} -> 1], {All, "gradient"} -> 
           1, {All, "loop"} -> 2, {All, "pause"} -> 1, {All, "lidOpen"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "nr" -> TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
              "description" -> 
              TypeSystem`PackageScope`AtomShape[336.00000000000006`], 
              "temperature" -> TypeSystem`PackageScope`RowShape[
                Association[
                "temperature" -> TypeSystem`PackageScope`AtomShape[60], 
                 "duration" -> 
                 TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
                 "temperatureChange" -> TypeSystem`PackageScope`AtomShape[60],
                  "durationChange" -> TypeSystem`PackageScope`UnknownShape, 
                 "measure" -> TypeSystem`PackageScope`AtomShape[86.4], "ramp" -> 
                 TypeSystem`PackageScope`UnknownShape]], "gradient" -> 
              TypeSystem`PackageScope`UnknownShape, "loop" -> 
              TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`ColumnShape[
                 TypeSystem`PackageScope`KeyValueShape[
                  TypeSystem`PackageScope`AtomShape[57.60000000000001], 
                  TypeSystem`PackageScope`AtomShape[34]]], 2, {All, "loop"}], 
              "pause" -> TypeSystem`PackageScope`UnknownShape, "lidOpen" -> 
              TypeSystem`PackageScope`UnknownShape]]], 5, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1482160647], "Type" -> 
        TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "nr", "description", "temperature", "gradient", "loop", "pause", 
            "lidOpen"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            
            TypeSystem`Struct[{
             "temperature", "duration", "temperatureChange", "durationChange",
               "measure", "ramp"}, {
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[String], 
              TypeSystem`Atom[Real], TypeSystem`UnknownType, 
              TypeSystem`Atom[String], TypeSystem`UnknownType}], 
            TypeSystem`UnknownType, 
            TypeSystem`Assoc[
             TypeSystem`Atom[
              TypeSystem`Enumeration["goto", "repeat"]], 
             TypeSystem`Atom[Integer], 2], TypeSystem`UnknownType, 
            TypeSystem`UnknownType}], 5], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[1482160647]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"nr\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"nr\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][{
                    All, "nr"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[All, "nr"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"description\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"description\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][{
                    All, "description"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[All, "description"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"temperature\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"temperature\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][{
                    All, "temperature"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[All, "temperature"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Center, Baseline}], SpanFromLeft, SpanFromLeft, 
               SpanFromLeft, SpanFromLeft, SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"gradient\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"gradient\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][{
                    All, "gradient"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[All, "gradient"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"loop\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"loop\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][{
                    All, "loop"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[All, "loop"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Center, Baseline}], 
               SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"pause\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"pause\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][{
                    All, "pause"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[All, "pause"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"lidOpen\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"lidOpen\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][{
                    All, "lidOpen"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[All, "lidOpen"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"temperature\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"temperature\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][{
                    All, "temperature", "temperature"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[All, "temperature", "temperature"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"duration\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"duration\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][{
                    All, "temperature", "duration"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[All, "temperature", "duration"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"temperatureChange\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"temperatureChange\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][{
                    All, "temperature", "temperatureChange"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[
                  All, "temperature", "temperatureChange"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"durationChange\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"durationChange\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][{
                    All, "temperature", "durationChange"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[
                  All, "temperature", "durationChange"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"measure\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"measure\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][{
                    All, "temperature", "measure"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[All, "temperature", "measure"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"ramp\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"ramp\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][{
                    All, "temperature", "ramp"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[All, "temperature", "ramp"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], SpanFromAbove, SpanFromAbove, 
               SpanFromBoth, SpanFromAbove, SpanFromAbove}, {
               Pane[
                Annotation["1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[1, 
                   Key["nr"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["hot start", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[1, 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["95."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[1, 
                   Key["temperature"], 
                   Key["temperature"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["30", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[1, 
                   Key["temperature"], 
                   Key["duration"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[1, 
                   Key["temperature"], 
                   Key["temperatureChange"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[1, 
                   Key["temperature"], 
                   Key["durationChange"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[1, 
                   Key["temperature"], 
                   Key["measure"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[1, 
                   Key["temperature"], 
                   Key["ramp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[1, 
                   Key["gradient"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               TypeSystem`PackageScope`KeyValueShape[
                TypeSystem`PackageScope`AtomShape[57.60000000000001], 
                TypeSystem`PackageScope`AtomShape[34]], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[1, 
                   Key["pause"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[1, 
                   Key["lidOpen"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item["", Background -> GrayLevel[0.85]]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Missing["NotAvailable"], SpanFromAbove, SpanFromAbove, 
               Item["", Background -> GrayLevel[0.85]]}, {
               Pane[
                Annotation["2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[2, 
                   Key["nr"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["denaturation", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[2, 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["95."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[2, 
                   Key["temperature"], 
                   Key["temperature"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["5", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[2, 
                   Key["temperature"], 
                   Key["duration"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[2, 
                   Key["temperature"], 
                   Key["temperatureChange"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[2, 
                   Key["temperature"], 
                   Key["durationChange"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[2, 
                   Key["temperature"], 
                   Key["measure"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[2, 
                   Key["temperature"], 
                   Key["ramp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[2, 
                   Key["gradient"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               TypeSystem`PackageScope`KeyValueShape[
                TypeSystem`PackageScope`AtomShape[57.60000000000001], 
                TypeSystem`PackageScope`AtomShape[34]], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[2, 
                   Key["pause"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[2, 
                   Key["lidOpen"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item["", Background -> GrayLevel[0.85]]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Missing["NotAvailable"], SpanFromAbove, SpanFromAbove, 
               Item["", Background -> GrayLevel[0.85]]}, {
               Pane[
                Annotation["3", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[3, 
                   Key["nr"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["annealing, extension and plate read", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[3, 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["55."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[3, 
                   Key["temperature"], 
                   Key["temperature"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["5", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[3, 
                   Key["temperature"], 
                   Key["duration"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[3, 
                   Key["temperature"], 
                   Key["temperatureChange"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[3, 
                   Key["temperature"], 
                   Key["durationChange"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["real time", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[3, 
                   Key["temperature"], 
                   Key["measure"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[3, 
                   Key["temperature"], 
                   Key["ramp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[3, 
                   Key["gradient"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               TypeSystem`PackageScope`KeyValueShape[
                TypeSystem`PackageScope`AtomShape[57.60000000000001], 
                TypeSystem`PackageScope`AtomShape[34]], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[3, 
                   Key["pause"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[3, 
                   Key["lidOpen"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item["", Background -> GrayLevel[0.85]]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Missing["NotAvailable"], SpanFromAbove, SpanFromAbove, 
               Item["", Background -> GrayLevel[0.85]]}, {
               Pane[
                Annotation["4", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[4, 
                   Key["nr"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["loop instruction", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[4, 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
               "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                GrayLevel[0.85]], SpanFromLeft, SpanFromLeft, SpanFromLeft, 
               SpanFromLeft, SpanFromLeft, 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[4, 
                   Key["gradient"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                "goto", ImageSize -> {{57.60000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[4, 
                   Key["loop"], 
                   Key["goto"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[4, 
                   Key["pause"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[4, 
                   Key["lidOpen"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromBoth, 
               SpanFromBoth, SpanFromBoth, SpanFromBoth, SpanFromBoth, 
               SpanFromAbove, 
               Item[
                Pane[
                "repeat", 
                 ImageSize -> {{57.60000000000001, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["60"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[4, 
                   Key["loop"], 
                   Key["repeat"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, 
               SpanFromAbove}, {
               Pane[
                Annotation["5", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[5, 
                   Key["nr"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["melting curve", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[5, 
                   Key["description"]]], "Mouse"], 
                ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[5, 
                   Key["temperature"], 
                   Key["temperature"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["5", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[5, 
                   Key["temperature"], 
                   Key["duration"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[5, 
                   Key["temperature"], 
                   Key["temperatureChange"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[5, 
                   Key["temperature"], 
                   Key["durationChange"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["meltcurve", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[5, 
                   Key["temperature"], 
                   Key["measure"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[5, 
                   Key["temperature"], 
                   Key["ramp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[5, 
                   Key["gradient"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               TypeSystem`PackageScope`KeyValueShape[
                TypeSystem`PackageScope`AtomShape[57.60000000000001], 
                TypeSystem`PackageScope`AtomShape[34]], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[5, 
                   Key["pause"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
                 
                  GeneralUtilities`Slice[5, 
                   Key["lidOpen"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item["", Background -> GrayLevel[0.85]]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Missing["NotAvailable"], SpanFromAbove, SpanFromAbove, 
               Item["", Background -> GrayLevel[0.85]]}}, 
             BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 633142629]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[633142629][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17060`",
 CellLabel->"Out[3]=",
 CellID->876155895]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["experiment", "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True],

Cell["\<\
The experiment element contains the data collected during one (or more) qPCR \
runs, where each run contains one or more qPCR reactions. Each reaction \
incorporates one sample (which is referred to by its id) and one or more data \
elements (one for each target (also referred by its id)). Multiple data \
elements are only required for a multiplex reaction, in which several targets \
are simultaneously measured (using different fluorescent dyes). If the \
reactions are measured in different runs, the data should be stored as \
separate runs.
Check the first run in the experiment element:\
\>", "ExampleText",
 CellID->1834505615],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rpa", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://github.com/ramiromagno/rdml/blob/master/datasets/rpa.rdml?\
raw=true\>\"", ",", "\"\<RDML\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"rpa", "[", 
  RowBox[{"\"\<experiment\>\"", ",", "1", ",", "\"\<run\>\"", ",", "1"}], 
  "]"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->352503711],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 11, "InitialType" -> 
        TypeSystem`Struct[{
          "description", "documentation", "experimenter", "instrument", 
           "dataCollectionSoftware", "backgroundDeterminationMethod", 
           "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat", 
           "runDate", "react"}, {
          TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`Vector[
            TypeSystem`Atom[String], 1], 
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[
             TypeSystem`Enumeration["name", "version"]], 
            TypeSystem`Atom[String], 2], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           
           TypeSystem`Struct[{"rows", "columns", "rowLabel", "columnLabel"}, {
            
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String]}], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"sample", "data"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["R-dsH18", "R-HCtrl13", "R-MoH9"]], 
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                 "bgFluorSlp", "quantFluor"}, {
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                 TypeSystem`Vector[
                  TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real]}], 61], 
                 TypeSystem`Vector[
                  TypeSystem`Struct[{"tmp", "fluor"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real]}], 61], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType}], 1]}], 90]}], "Shape" -> 
        TypeSystem`PackageScope`DocumentShape[
          
          Association[{"description"} -> 
           TypeSystem`PackageScope`UnknownShape, {"documentation"} -> 
           TypeSystem`PackageScope`UnknownShape, {"experimenter"} -> 
           TypeSystem`PackageScope`UnknownShape, {"instrument"} -> 
           TypeSystem`PackageScope`AtomShape[1920.0000000000002`], {
            "dataCollectionSoftware"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {
            "backgroundDeterminationMethod"} -> 
           TypeSystem`PackageScope`AtomShape[278.40000000000003`], {
            "cqDetectionMethod"} -> 
           TypeSystem`PackageScope`AtomShape[364.80000000000007`], {
            "thermalCyclingConditions"} -> 
           TypeSystem`PackageScope`AtomShape[355.20000000000005`], {
            "pcrFormat", "rows"} -> 
           TypeSystem`PackageScope`AtomShape[34], {"pcrFormat", "columns"} -> 
           TypeSystem`PackageScope`AtomShape[34], {"pcrFormat", "rowLabel"} -> 
           TypeSystem`PackageScope`AtomShape[28.800000000000004`], {
            "pcrFormat", "columnLabel"} -> 
           TypeSystem`PackageScope`AtomShape[28.800000000000004`], {
            "runDate"} -> TypeSystem`PackageScope`AtomShape[75], {"react"} -> 
           TypeSystem`PackageScope`ElidedShape[1]], 2], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[114644785], "Type" -> 
        TypeSystem`Struct[{
          "description", "documentation", "experimenter", "instrument", 
           "dataCollectionSoftware", "backgroundDeterminationMethod", 
           "cqDetectionMethod", "thermalCyclingConditions", "pcrFormat", 
           "runDate", "react"}, {
          TypeSystem`UnknownType, TypeSystem`UnknownType, 
           TypeSystem`Vector[
            TypeSystem`Atom[String], 1], 
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[
             TypeSystem`Enumeration["name", "version"]], 
            TypeSystem`Atom[String], 2], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           TypeSystem`Atom[String], 
           
           TypeSystem`Struct[{"rows", "columns", "rowLabel", "columnLabel"}, {
            
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String]}], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"sample", "data"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["R-dsH18", "R-HCtrl13", "R-MoH9"]], 
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
                 "bgFluorSlp", "quantFluor"}, {
                 TypeSystem`Atom[String], 
                 TypeSystem`Atom[Real], TypeSystem`UnknownType, 
                 TypeSystem`Vector[
                  TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real]}], 61], 
                 TypeSystem`Vector[
                  TypeSystem`Struct[{"tmp", "fluor"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real]}], 61], TypeSystem`UnknownType, 
                 TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`UnknownType}], 1]}], 90]}], "HandleQ" -> True, 
        "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[114644785]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"description\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"description\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"description"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["description"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}],
                SpanFromLeft, 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["description"]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"documentation\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"documentation"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["documentation"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}],
                SpanFromLeft, 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["documentation"]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"experimenter\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"experimenter"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["experimenter"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}],
                SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"rpa"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"rpa"}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"experimenter"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["experimenter"]], "Mouse"]]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"instrument\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"instrument\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"instrument"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["instrument"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], SpanFromLeft, 
               Pane[
                Annotation[
                "Block Type \"96FX\", Cycler SN: CC003296, PXA270 Processor \
Firmware: 3.3.155.524,  \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["instrument"]], "Mouse"], 
                ImageSize -> {{1920.0000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dataCollectionSoftware\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"dataCollectionSoftware\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"dataCollectionSoftware"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["dataCollectionSoftware"]], "Mouse"],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[
                    Association[
                    "name" -> "BioRadCFXManager.exe", "version" -> 
                    "3.0.1224.1015. (OS-Microsoft Windows NT 6.1.7601 Service \
Pack 1.Service Pack 3, CLR-4.0.30319.296, Culture-pt-PT)."], 
                    ShowStringCharacters -> False], 
                    Style[
                    Style[
                    Association[
                    "name" -> "BioRadCFXManager.exe", "version" -> 
                    "3.0.1224.1015. (OS-Microsoft Windows NT 6.1.7601 Service \
Pack 1.Service Pack 3, CLR-4.0.30319.296, Culture-pt-PT)."], 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"dataCollectionSoftware"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["dataCollectionSoftware"]], 
                 "Mouse"]]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"backgroundDeterminationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"backgroundDeterminationMethod\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"backgroundDeterminationMethod"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["backgroundDeterminationMethod"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], SpanFromLeft, 
               Pane[
                Annotation["Baseline Subtracted Curve Fit", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["backgroundDeterminationMethod"]], 
                 "Mouse"], 
                ImageSize -> {{278.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"cqDetectionMethod\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"cqDetectionMethod\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"cqDetectionMethod"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["cqDetectionMethod"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}],
                SpanFromLeft, 
               Pane[
                Annotation["manual threshold and baseline settings", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["cqDetectionMethod"]], "Mouse"], 
                ImageSize -> {{364.80000000000007`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"thermalCyclingConditions\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"thermalCyclingConditions"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["thermalCyclingConditions"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], SpanFromLeft, 
               Pane[
                Annotation["Protocolo-EvaGreen_55\.baC_60cycles.prcl", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["thermalCyclingConditions"]], 
                 "Mouse"], 
                ImageSize -> {{355.20000000000005`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"pcrFormat\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"pcrFormat\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"pcrFormat", "rows"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["pcrFormat", "rows"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"rows\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"rows\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"pcrFormat", "rows"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["pcrFormat", "rows"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["8"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["pcrFormat", "rows"]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"columns\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"columns\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"pcrFormat", "columns"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["pcrFormat", "columns"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["12"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["pcrFormat", "columns"]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"rowLabel\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"rowLabel\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"pcrFormat", "rowLabel"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["pcrFormat", "rowLabel"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["ABC", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["pcrFormat", "rowLabel"]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"columnLabel\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"columnLabel\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"pcrFormat", "columnLabel"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["pcrFormat", "columnLabel"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["123", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["pcrFormat", "columnLabel"]], 
                 "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"runDate\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"runDate\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"runDate"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["runDate"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], SpanFromLeft, 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "\"22 Apr 2013 16:12:11\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["runDate"]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"react\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"react\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"react"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["react"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 90], "\[RightAssociation]"}], 
                    Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 90], "\[RightAssociation]"}], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1312011060][{"react"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
                  GeneralUtilities`Slice["react"]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1312011060][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1312011060]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1312011060][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17061`",
 CellLabel->"Out[2]=",
 CellID->807518987]
}, Open  ]],

Cell["\<\
This run holds various details, including specifics about the hardware \
(instrument element) as well as details about the software that collected the \
data (dataColletionSoftware); documentation, experimenter and \
thermalCyclingConditions elements should have id references to elements \
previously defined. The backgroundDeterminationMethod and cqDetectionMethod \
elements include relevant information about the mathematical analysis of the \
qPCR amplification curves. The pcrFormat element allows downstream analysis \
software to display the data according to the qPCR instrument run format. \
Finally, the react element contains the actual data pertaining to the qPCR \
reactions, containing a list of qPCR reactions, each consisting of two \
subelements: sample and data.\
\>", "ExampleText",
 CellID->1558131444],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rpa", "[", 
  RowBox[{
  "\"\<experiment\>\"", ",", "1", ",", "\"\<run\>\"", ",", "1", ",", 
   "\"\<react\>\""}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->1695797116],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 10, "Length" -> 90, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"sample", "data"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["R-dsH18", "R-HCtrl13", "R-MoH9"]], 
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
               "bgFluorSlp", "quantFluor"}, {
               TypeSystem`Atom[String], 
               TypeSystem`Atom[Real], TypeSystem`UnknownType, 
               TypeSystem`Vector[
                TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real]}], 61], 
               TypeSystem`Vector[
                TypeSystem`Struct[{"tmp", "fluor"}, {
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real]}], 61], TypeSystem`UnknownType, 
               TypeSystem`UnknownType, TypeSystem`UnknownType, 
               TypeSystem`UnknownType}], 1]}], 90], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, 
             TypeSystem`PackageScope`KeyDummy[27]} -> 1, {All, "sample"} -> 
           1, {All, "data"} -> 
           Association[{All, "data", All, "tar"} -> 
             1, {All, "data", All, "cq"} -> 1, {All, "data", All, "excl"} -> 
             1, {All, "data", All, "adp"} -> 
             Association[{All, "data", All, "adp", All, "cyc"} -> 
               1, {All, "data", All, "adp", All, "tmp"} -> 
               1, {All, "data", All, "adp", All, "fluor"} -> 1], {
              All, "data", All, "mdp"} -> 
             Association[{All, "data", All, "mdp", All, "tmp"} -> 
               1, {All, "data", All, "mdp", All, "fluor"} -> 1], {
              All, "data", All, "endPt"} -> 1, {All, "data", All, "bgFluor"} -> 
             1, {All, "data", All, "bgFluorSlp"} -> 
             1, {All, "data", All, "quantFluor"} -> 1]], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
             TypeSystem`PackageScope`RowShape[
              Association[
              "sample" -> TypeSystem`PackageScope`AtomShape[86.4], "data" -> 
               TypeSystem`PackageScope`Limited[
                 TypeSystem`PackageScope`ColumnShape[
                  TypeSystem`PackageScope`RowShape[
                   Association[
                   "tar" -> TypeSystem`PackageScope`AtomShape[
                    67.20000000000002], "cq" -> 
                    TypeSystem`PackageScope`AtomShape[60], "excl" -> 
                    TypeSystem`PackageScope`UnknownShape, "adp" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`RowShape[
                    Association[
                    "cyc" -> TypeSystem`PackageScope`AtomShape[60], "tmp" -> 
                    TypeSystem`PackageScope`AtomShape[60], "fluor" -> 
                    TypeSystem`PackageScope`AtomShape[60]]]], 2, {
                    All, "data", All, "adp"}], "mdp" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`RowShape[
                    Association[
                    "tmp" -> TypeSystem`PackageScope`AtomShape[60], "fluor" -> 
                    TypeSystem`PackageScope`AtomShape[60]]]], 2, {
                    All, "data", All, "mdp"}], "endPt" -> 
                    TypeSystem`PackageScope`UnknownShape, "bgFluor" -> 
                    TypeSystem`PackageScope`UnknownShape, "bgFluorSlp" -> 
                    TypeSystem`PackageScope`UnknownShape, "quantFluor" -> 
                    TypeSystem`PackageScope`UnknownShape]]], 1, {
                 All, "data"}]]]]], 10, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1819411368], "Type" -> 
        TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"sample", "data"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["R-dsH18", "R-HCtrl13", "R-MoH9"]], 
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "tar", "cq", "excl", "adp", "mdp", "endPt", "bgFluor", 
               "bgFluorSlp", "quantFluor"}, {
               TypeSystem`Atom[String], 
               TypeSystem`Atom[Real], TypeSystem`UnknownType, 
               TypeSystem`Vector[
                TypeSystem`Struct[{"cyc", "tmp", "fluor"}, {
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real]}], 61], 
               TypeSystem`Vector[
                TypeSystem`Struct[{"tmp", "fluor"}, {
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real]}], 61], TypeSystem`UnknownType, 
               TypeSystem`UnknownType, TypeSystem`UnknownType, 
               TypeSystem`UnknownType}], 1]}], 90], "HandleQ" -> True, 
        "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[1819411368]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox["\"\"", FontColor -> GrayLevel[0.4]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox[
                    "\"\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, Keys}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[All, Keys]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"sample\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"sample\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "sample"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[All, "sample"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"data\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"data\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[All, "data"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Center, Baseline}], 
               SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
               SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
               SpanFromLeft, SpanFromLeft, SpanFromLeft}, {
              SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"tar\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"tar\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "tar"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[All, "data", All, "tar"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"cq\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"cq\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "cq"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[All, "data", All, "cq"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"excl\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"excl\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "excl"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[All, "data", All, "excl"]], "Mouse"],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"adp\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"adp\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "adp"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[All, "data", All, "adp"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Center, Baseline}], SpanFromLeft, SpanFromLeft, 
               
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"mdp\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"mdp\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "mdp"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[All, "data", All, "mdp"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Center, Baseline}], SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"endPt\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"endPt\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "endPt"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[All, "data", All, "endPt"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"bgFluor\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"bgFluor\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "bgFluor"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[All, "data", All, "bgFluor"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"bgFluorSlp\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"bgFluorSlp\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "bgFluorSlp"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[All, "data", All, "bgFluorSlp"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"quantFluor\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"quantFluor\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "quantFluor"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[All, "data", All, "quantFluor"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"cyc\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"cyc\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "adp", All, "cyc"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                  All, "data", All, "adp", All, "cyc"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"tmp\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"tmp\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "adp", All, "tmp"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                  All, "data", All, "adp", All, "tmp"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"fluor\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"fluor\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "adp", All, "fluor"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                  All, "data", All, "adp", All, "fluor"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"tmp\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"tmp\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "mdp", All, "tmp"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                  All, "data", All, "mdp", All, "tmp"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"fluor\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"fluor\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2092556412][{All, "data", All, "mdp", All, "fluor"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                  All, "data", All, "mdp", All, "fluor"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}],
                SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove}, {
              
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["1", 
                    Style[
                    "1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2092556412][
                   GeneralUtilities`Slice[
                    Key["1"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["R-MoH9", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["sample"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB1P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["25.4648"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["excl"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1.0708"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6718.44"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["endPt"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["bgFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["bgFluorSlp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["quantFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["2."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.78"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["14.4388"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6669.81"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["1"], 
                    Key["data"], 1, 
                    Key["adp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["adp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["1"], 
                    Key["data"], 1, 
                    Key["mdp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["data"], 1, 
                   Key["mdp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["2", 
                    Style[
                    "2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2092556412][
                   GeneralUtilities`Slice[
                    Key["2"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["R-MoH9", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["sample"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB1P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["25.4702"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["excl"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["4.51668"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6943.07"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["endPt"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["bgFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["bgFluorSlp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["quantFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["2."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.78"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["9.3975"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6893.22"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["2"], 
                    Key["data"], 1, 
                    Key["adp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["adp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["2"], 
                    Key["data"], 1, 
                    Key["mdp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["data"], 1, 
                   Key["mdp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["3", 
                    Style[
                    "3", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["3"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2092556412][
                   GeneralUtilities`Slice[
                    Key["3"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["R-MoH9", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["sample"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB1P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["25.3464"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["excl"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-9.76471"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6795.29"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["endPt"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["bgFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["bgFluorSlp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["quantFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["2."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.78"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-5.13399"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6749.46"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["3"], 
                    Key["data"], 1, 
                    Key["adp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["adp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["3"], 
                    Key["data"], 1, 
                    Key["mdp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["data"], 1, 
                   Key["mdp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["4", 
                    Style[
                    "4", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["4"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2092556412][
                   GeneralUtilities`Slice[
                    Key["4"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["R-HCtrl13", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["sample"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB1P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["42.2874"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["excl"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-21.6152"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6654.28"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["endPt"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["bgFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["bgFluorSlp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["quantFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["2."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.78"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-15.4492"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6631.37"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["4"], 
                    Key["data"], 1, 
                    Key["adp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["adp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["4"], 
                    Key["data"], 1, 
                    Key["mdp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["4"], 
                   Key["data"], 1, 
                   Key["mdp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["5", 
                    Style[
                    "5", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["5"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2092556412][
                   GeneralUtilities`Slice[
                    Key["5"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["R-HCtrl13", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["sample"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB1P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["35.5658"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["excl"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-19.3507"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7327.15"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["endPt"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["bgFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["bgFluorSlp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["quantFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["2."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.78"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-14.5557"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7289.54"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["5"], 
                    Key["data"], 1, 
                    Key["adp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["adp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["5"], 
                    Key["data"], 1, 
                    Key["mdp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["5"], 
                   Key["data"], 1, 
                   Key["mdp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["6", 
                    Style[
                    "6", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["6"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2092556412][
                   GeneralUtilities`Slice[
                    Key["6"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["R-HCtrl13", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["sample"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB1P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["35.7882"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["excl"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-25.4472"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7426.96"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["endPt"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["bgFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["bgFluorSlp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["quantFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["2."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.78"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-8.46998"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7380.68"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["6"], 
                    Key["data"], 1, 
                    Key["adp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["adp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["6"], 
                    Key["data"], 1, 
                    Key["mdp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["6"], 
                   Key["data"], 1, 
                   Key["mdp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["7", 
                    Style[
                    "7", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["7"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2092556412][
                   GeneralUtilities`Slice[
                    Key["7"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["R-dsH18", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["sample"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB1P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["25.9772"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["excl"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-23.5364"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7451.56"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["endPt"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["bgFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["bgFluorSlp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["quantFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["2."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.78"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-12.9856"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7409.26"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["7"], 
                    Key["data"], 1, 
                    Key["adp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["adp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["7"], 
                    Key["data"], 1, 
                    Key["mdp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["7"], 
                   Key["data"], 1, 
                   Key["mdp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["8", 
                    Style[
                    "8", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["8"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2092556412][
                   GeneralUtilities`Slice[
                    Key["8"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["R-dsH18", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["sample"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB1P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["26.4432"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["excl"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-4.29694"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6677.02"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["endPt"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["bgFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["bgFluorSlp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["quantFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["2."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.78"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6.52085"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6633.17"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["8"], 
                    Key["data"], 1, 
                    Key["adp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["adp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["8"], 
                    Key["data"], 1, 
                    Key["mdp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["8"], 
                   Key["data"], 1, 
                   Key["mdp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["9", 
                    Style[
                    "9", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["9"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2092556412][
                   GeneralUtilities`Slice[
                    Key["9"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["R-dsH18", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["sample"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB1P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["25.9489"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["excl"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-32.5886"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["8095.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["endPt"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["bgFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["bgFluorSlp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["quantFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["2."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.78"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-16.3072"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["8043.06"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["9"], 
                    Key["data"], 1, 
                    Key["adp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["adp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["9"], 
                    Key["data"], 1, 
                    Key["mdp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["9"], 
                   Key["data"], 1, 
                   Key["mdp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["10", 
                    Style[
                    "10", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["10"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  2092556412][
                   GeneralUtilities`Slice[
                    Key["10"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["R-MoH9", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["sample"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["GusBP1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["28.615"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["excl"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["-78.579"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["adp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["8568.89"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["mdp"], 1, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["endPt"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["bgFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["bgFluorSlp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["quantFluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["2."], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["cyc"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["54.78"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["9.45432"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["adp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["65.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["tmp"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["8500.29"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["mdp"], 2, 
                   Key["fluor"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["10"], 
                    Key["data"], 1, 
                    Key["adp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["adp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "adp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "adp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["61 total \:203a ", 
                    Style[
                    "61 total \:203a ", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][{
                    Key["10"], 
                    Key["data"], 1, 
                    Key["mdp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["data"], 1, 
                   Key["mdp"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> 
                    Automatic], Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "data", All, "mdp"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Center, Baseline}, Background -> 
                GrayLevel[0.98]], SpanFromLeft, SpanFromAbove, SpanFromAbove, 
               SpanFromAbove, SpanFromAbove}, {
               Item[
                Deploy[
                 Mouseover[
                  Grid[{{
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    90 (-10), {1, 90 - -10 + 1}])}]], 
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 10, {
                    1, 90 - -10 + 1}])}]], 
                    Spacer[{5, 1}], 
                    Style[
                    Row[{"showing ", 1, "\[Dash]", 10, " of ", 
                    Style[
                    90, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], BaselinePosition -> Baseline], 
                    Spacer[{5, 1}], 
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 10, {
                    1, 90 - 10 + 1}])}]], 
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    90 10, {1, 90 - 10 + 1}])}]]}}, 
                   Alignment -> {Center, Bottom}], 
                  Grid[{{
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 60.967}}}]
                    , 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    90 (-10), {1, 90 - -10 + 1}])}]], 
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 10, {
                    1, 90 - -10 + 1}])}]], 
                    Spacer[{5, 1}], 
                    Style[
                    Row[{"showing ", 1, "\[Dash]", 10, " of ", 
                    Style[
                    90, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], BaselinePosition -> Baseline], 
                    Spacer[{5, 1}], 
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 10, {
                    1, 90 - 10 + 1}])}]], 
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    90 10, {1, 90 - 10 + 1}])}]]}}, 
                   Alignment -> {Center, Bottom}]]], Background -> 
                GrayLevel[0.98], Alignment -> {Center, 
                  Scaled[1]}, BaseStyle -> {ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show all", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412},
                     100000000, {}]], MenuEvaluator -> Automatic]}}], 
               SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
               SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
               SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
               SpanFromLeft}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2092556412]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2092556412][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17061`",
 CellLabel->"Out[3]=",
 CellID->396354810]
}, Open  ]],

Cell["\<\
Examine the summary of cq values for all reactions of sample \"R-MoH9\":\
\>", "ExampleText",
 CellID->1476127065],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cq", "[", "\"\<R-MoH9\>\"", "]"}], "=", 
  RowBox[{"rpa", "[", 
   RowBox[{
   "\"\<experiment\>\"", ",", "1", ",", "\"\<run\>\"", ",", "1", ",", 
    "\"\<react\>\"", ",", 
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{"#sample", "\[Equal]", "\"\<R-MoH9\>\""}], "&"}], "]"}], ",", 
    "\"\<data\>\"", ",", "1", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<tar\>\"", ",", "\"\<cq\>\""}], "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[4]:=",
 CellID->1094834486],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 30, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"tar", "cq"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[Real]}], 30], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, 
             TypeSystem`PackageScope`KeyDummy[28]} -> 1, {All, "tar"} -> 
           1, {All, "cq"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
             TypeSystem`PackageScope`RowShape[
              Association[
              "tar" -> TypeSystem`PackageScope`AtomShape[67.20000000000002], 
               "cq" -> TypeSystem`PackageScope`AtomShape[60]]]]], 20, {}]], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[2029544420], 
        "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"tar", "cq"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[Real]}], 30], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[2029544420]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox["\"\"", FontColor -> GrayLevel[0.4]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    Style[
                    RawBoxes[
                    StyleBox[
                    "\"\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], Italic, 
                    GrayLevel[0.7]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    All, Keys}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[All, Keys]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"tar\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"tar\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    All, "tar"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[All, "tar"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"cq\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"cq\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    All, "cq"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[All, "cq"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["1", 
                    Style[
                    "1", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["1"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["1"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB1P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["25.4648"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["1"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["2", 
                    Style[
                    "2", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["2"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["2"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB1P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["25.4702"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["2"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["3", 
                    Style[
                    "3", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["3"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["3"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB1P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["25.3464"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["3"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["10", 
                    Style[
                    "10", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["10"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["10"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["GusBP1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["28.615"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["10"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["11", 
                    Style[
                    "11", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["11"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["11"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["GusBP1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["11"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["28.7352"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["11"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["12", 
                    Style[
                    "12", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["12"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["12"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["GusBP1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["12"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["28.4598"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["12"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["13", 
                    Style[
                    "13", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["13"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["13"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB2P2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["13"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["28.1536"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["13"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["14", 
                    Style[
                    "14", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["14"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["14"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB2P2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["14"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["28.2532"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["14"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["15", 
                    Style[
                    "15", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["15"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["15"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB2P2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["15"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["28.182"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["15"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["25", 
                    Style[
                    "25", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["25"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["25"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB3P2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["25"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["25.8036"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["25"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["26", 
                    Style[
                    "26", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["26"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["26"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB3P2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["26"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["25.877"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["26"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["27", 
                    Style[
                    "27", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["27"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["27"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB3P2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["27"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["25.6934"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["27"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["37", 
                    Style[
                    "37", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["37"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["37"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB5P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["37"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["33.4941"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["37"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["38", 
                    Style[
                    "38", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["38"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["38"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB5P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["38"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["33.251"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["38"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["39", 
                    Style[
                    "39", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["39"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["39"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB5P1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["39"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["33.816"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["39"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["46", 
                    Style[
                    "46", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["46"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["46"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["ActBP1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["46"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["19.1629"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["46"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["47", 
                    Style[
                    "47", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["47"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["47"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["ActBP1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["47"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["19.3586"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["47"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["48", 
                    Style[
                    "48", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["48"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["48"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["ActBP1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["48"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["19.5762"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["48"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["49", 
                    Style[
                    "49", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["49"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["49"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB8P2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["49"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["27.1971"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["49"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["50", 
                    Style[
                    "50", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][{
                    
                    Key["50"]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                   GeneralUtilities`Slice[
                    Key["50"]]], "Mouse"], 
                 ImageSize -> {{28.800000000000004`, Full}, Automatic}], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["HoxB8P2", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["50"], 
                   Key["tar"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["27.1728"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
                 
                  GeneralUtilities`Slice[
                   Key["50"], 
                   Key["cq"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Deploy[
                 Mouseover[
                  Grid[{{
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    30 (-20), {1, 30 - -20 + 1}])}]], 
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 30 - -20 + 1}])}]], 
                    Spacer[{5, 1}], 
                    Style[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    30, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], BaselinePosition -> Baseline], 
                    Spacer[{5, 1}], 
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 30 - 20 + 1}])}]], 
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    30 20, {1, 30 - 20 + 1}])}]]}}, 
                   Alignment -> {Center, Bottom}], 
                  Grid[{{
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    30 (-20), {1, 30 - -20 + 1}])}]], 
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 30 - -20 + 1}])}]], 
                    Spacer[{5, 1}], 
                    Style[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    30, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], BaselinePosition -> Baseline], 
                    Spacer[{5, 1}], 
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 30 - 20 + 1}])}]], 
                    Item[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    30 20, {1, 30 - 20 + 1}])}]]}}, 
                   Alignment -> {Center, Bottom}]]], Background -> 
                GrayLevel[0.98], Alignment -> {Center, 
                  Scaled[1]}, BaseStyle -> {ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889}, 
                    1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889}, 
                    10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889}, 
                    30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889}, 
                    100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show all", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889}, 
                    100000000, {}]], MenuEvaluator -> Automatic]}}], 
               SpanFromLeft, SpanFromLeft}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        Initialization :> If[
          Not[$CloudEvaluation], 
          TypeSystem`NestedGrid`PackagePrivate`attachScrollbar[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$]], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`Pathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 816605889]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[816605889][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$], 
         TypeSystem`NestedGrid`PackagePrivate`shiftRight[{
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`$state$$]], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]], DynamicModuleValues :> {}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
    DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellContext->"Cell$$17061`",
 CellLabel->"Out[4]=",
 CellID->369519620]
}, Open  ]],

Cell["\<\
The adp and mdp subelements contain the amplification and melting data, \
respectively.
Plot amplification curves for all reactions of sample \"R-MoH9\":\
\>", "ExampleText",
 CellID->427443016],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"amplificationData", "[", "\"\<R-MoH9\>\"", "]"}], "=", 
   RowBox[{"rpa", "[", 
    RowBox[{
    "\"\<experiment\>\"", ",", "1", ",", "\"\<run\>\"", ",", "1", ",", 
     "\"\<react\>\"", ",", 
     RowBox[{"Select", "[", 
      RowBox[{
       RowBox[{"#sample", "\[Equal]", "\"\<R-MoH9\>\""}], "&"}], "]"}], ",", 
     "\"\<data\>\"", ",", "1", ",", "\"\<adp\>\"", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<cyc\>\"", ",", "\"\<fluor\>\""}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"amplificationData", "[", "\"\<R-MoH9\>\"", "]"}], ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{
   "PlotLabel", "\[Rule]", 
    "\"\<Amplification curves of R-MoH9 reactions\>\""}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Temperature (Celsius degrees)\>\"", ",", 
      "\"\<Fluorescence (a.u)\>\""}], "}"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]}], "Input",
 CellLabel->"In[7]:=",
 CellID->1149511961],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1zwlIk2Ecx/F51XChovPIo1yGiJWYV3aoP8/pPBNRO0wtTQxSoxIxkBfN
KMUySzMLM5tYmphHymo2qfAICTsk8QhDITVXm2Yy5lbG/u8DDw+f5/vw8DyC
k7nxmfocDsdvY/5fdUMRoI2VlGsFygDagK3U7/nTmd3QkQu90UBtqkBANoO2
pmNVIXEi82EYMlNUP2JMtoEyazBROPSb7rOH8cwrw58pm6g7YuVLc82R4xrq
O7BuGtczvrBI3gm1PGPJ3NOMzjvDcFk1x/Oz6NfZBX942TZR203IrlALu/hj
IkPyxrsvyBpLm/lkN+jHWN8yX91KdofaqbOzjXEg78V60ji3v5293wN/gytT
5n3syJ7QCPVkE68tyV7gmPb0ljU6kr3B4eeXjlpxyT4waTjV+q1nhf6zD9rl
KlFFmiP9xxfSvK8DyYUg70d9oJfMfiKOfABneKFFb9zTyQeRm6564TqZQz6E
YduPyljvQrIfjPu2ZHhqSsj+SJ6qzdtWUkEOgOBYYezw+9tkQClPqlPcuacz
A+Ty1guC3B5SD0QWc7ElJVpMPRDFgk3Vw3bN1IPwyL14SHP3CfUgiAavyjcP
tVIPxmLt47c53W3Ug2E0oNIvTmunHoLPLVPSuZxn1EMgmZ/3lVh0UA/FWiYn
MaSJzIRiyd96mivopB6GMkWMx7lrZCYMiDJmfL6zXYh176PxYu8u6kIYnOXy
ExgyJxzVe8RNkX1sD4fXlcuWmWtsj8Cy1YP8eudu6hH4UFUuczlM5ogwe2I6
Ydd5totwabY19f51tkei4IZaxDSxPRKn5bZG0l62RyF7nPdp6B3bo1Bt8KPj
5hjbo8E3GKmLm2J7NBpeVv7izrE9BmKHBYlazvYYBE0ypU6qbvwDufQZEg==

         "]]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1znlI02Ecx/HfcqlpeOE8ytCWdopNLfNa+3hN55xg0R9SlolFynBRmEdk
I2YlOAxLLcMsp9NSymNKRaZFhwcVOLNlSkRYYeHd1ozRwb6/Hzw8vJ/Xw/P9
rc9S7DmygmEY4b/1f7d+c6I/GTKeu6sb6ACc2vpR1TCf2h62c41lAx9XU7uA
qRYcVirZ++74UdC0GDRk6rO2F7h+JmNfJOs+sNjVfn1uNpL7gdvyZX4qbRU5
H2aNfqkmjqH2B9dwvMJwgp23Ecs2PyVrqzn91t4Mi2+UdsjHiXwrOHMPx94d
sIisHQhGIBNkDc5QB4HjslfMefOd5gtg6isKutRpS+8Fw+GYoFKV6UwdAuZm
gjF/hr0fCuOH99JDk+z8HbD0qXlu/fbUO/G73iE0sN1I88LApCyqPcf96P92
wcTEjJW7+FOHw65c69zqL6KOQGzO2WydVxp1JHLyp7X6xUzqKOSJp1uiMxTU
0QheTtZ35hZTC2EI671oEKiod+NFtaiA81lNLULEZE+hh2sVNZD+qNORP3/d
2krAhnf6QZHiFnkMWs3cpWFNI3kMpp/J3+aUN5PHYkurZJtpzR3yWOT0DlQJ
5G3kcWjomZpQye+Sx8Fp/+vKUa928ngIYzI808eplfFoTmvKsC3rIE9Aye1w
G0VAJ3kCGjQO5/Wt1IwYp/Ke8rzXdZGLUdsxsiA4Q80kYlx2sHBkhPVEHDW6
nrzH15EnoeOb38vHWdTKJCT11phmr7EuAVN6AxODrEtQF7pJ573AejIu31fz
5N7d5Mnw4F/wV4dQM1L4GLwkr1JZlyLyXG7qp0zWU1AhDdhenM96CuaT92XX
lbAug5ZjHn5SyroM3FlHjq+a9VToVo5ofl1hPRUbutqEoqvd+AvLnA+y
         "]]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1zX8s1HEcx/G7QxIjOlIoHUnN/NYPP1/nOD8OG0qbjLpLtdX6IaRhHWVU
y22uY2H50Y0hJVlj/RGTadMJE7HYNfNjazpNfszOXbV7fz/bZ589Ps/P3p9D
4htJmRwWixXyb/8/DWslTPdZVlhW6tJLF2AVqIb8H3LJO7GRVagVjx0m7wbr
4uzoyzQXGMzF9nyPrV7kQLYH27H8wqTOnuwIrUlnToPtHrIztqekXwr8bMk8
sFlFNvGyuQ8Gu4KtPlpT8mcrzGA3aKMCmq8NW9P/7uCUFZvvX9hBPgajJfWI
uaMZ2QPre1W/m9yMaL4nVu5VWUHdT/O8YVx/4BfXy4be+4Ct1BipdzmTfaFr
W4vYtDMl+0F/q/rZWg7z3h86yaL4e6UFOQB6q25N6+QCzT8Ok9xsXWGjHf1/
Ahv5KT6NCh/ySZRqvKafpgrIp1BU3ZRxxjiZHAjWuJw76iomB+H2xot1XuZN
cjBmsh34C8n55BBMhAdd9+1/QA6FVLH+KjO3nBwGa8HsoiZRQQY8ZsbtJJa1
BkuBc2n1l6XiBup8HNxXJOflKqnzUXd+UNQb3Ew9HGOS6ihOWwv1cPTredGR
U23UBXhSWbNZPdBOXYCc9CfRZndfU4/AVqIJlvM6qEdA27fo7+rwhnok5FdM
+mRtZGkkLNXC5SmXTupCWLiXVinlZKkQ3BizwdpVpkfBdl6RsRz7lnoUZMpL
oZUVZFY0Hh9RPbJSMT0avJKegtOcLuoxaJ3o7nDyJEtjMK0N/HH/LNNj4VYs
fC7JY3os+EqL7K8VTBehTjNQmtrCdBEkSyPfZO+ZHgf5p7SZ9CGmxyElKaPR
dILp8RgOyvroPcv0eIxGblY4zTE9AdLiqxarP5megIr2mDvvNrvwF0GqF1s=

         "]]}, {
        Hue[0.37820393249936934`, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.922526, 0.385626, 0.209179], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1z3lIk3Ecx/HHLZmrnFKaGpYmJZb3mdfcR+c5dZVWmAce4EAXDDuIZpKm
kiSZpZFkahr+YR5paVuZeWQkeUSYR4RolkstI7JaUs6MfffAw8Pref9+3+f3
7EqTxaSzGIbhr9//n9rrm6DqmLjGsD62h16A7eZ5+Na8DbQ0AJsX5Gikb0o2
xpp725vqC+ZkE7Cshzocuy3I5tBvEvTllBmTLcG4jKZ0vVQJtLbG6oFPUv6E
qltrG3Dj8sSNY3+o74ZaVpiZv8yi89iCU57PenZSZzto8Hs1ddKa5u8D+3ZP
XGDOW5rnADbj49rCVdI8J2gyJNy5V1tpvws+m01NVOZ9p/Wu0HCu8Tvb9am7
QU+k8hrN0613X/+Og8fZYFOyBzit7/t/CozIntCoa91cEreRvaDhF7L7Zy3J
+8EymRsPSjAhe2Nj4pZZg2FDsg/WnDdYNFxfoPP6Qn/7imTNypb+zw/5082r
wp3+ZH88SS/i35dHk/k4xTerzDqeTA7Ac5ZF0xWFlCxArP2LrLrkM2TAVFLP
4qnztM4FZH3ZvPiVS9QD8U456FRWUUY9EAm5exPU3ErqQSg+dKNouLGWehBs
gqfGBNP11IWA3cLHgakG6kJ8mY0oERY0Uw+G5E7XsDSzlXowjq7mlCZ9aKMe
gl8/LAZvejygHoLN8UbZVknt1EOxeE++ZzGjg3ooYroKJpNjH1IPg2Kq9YjM
UkE9DJooZ3noCJkJh2lA2t15qZJ6OBrO+y/tWCYzEVB5LhWfkD6iHoGrrKen
x0fIjAi80Jlehf1j6iKcy24R1cnJTCRi/CoG5L26HomKv76pF1d0PQpKbs2Q
r2Mn9SiUp3kbboonM9GoDps5WJKv69EQl3L0LlfruhgFtilfI5S6LsaYe1XS
wOtO/AMIiQ6x
         "]]}, {
        Hue[0.6142719099991583, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.528488, 0.470624, 0.701351], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw10H8s1HEcx/GvO9zh5Ee3hTuRqFi/cDi/7l7n96/DxNTFChFGrsRa84ck
Y5pfK62mrD8UavqF4uxytBprfrRmTH+Y5g8/NjJiQmn3/n627z57fh/7/Ph+
D6UXJGRyGIYJ3Hv+z/qxIjcuF59d3OL10wv8GbdPVa5ZQ5/8vbnp/Kj4p1zf
ljCSPGmqT7YgF2KneaGYd0ZMbQNmTnU028iRWozNWvWEyMec2hGcVqmursKW
2gmmY1WtMX7sfs5Y564+SDPj0n2OQMAITYVNvXT+MRipnw+Z3LYidwMPS9EH
tWMf9X0cJobTcZHDxuQnsSutPuHs4UR9GhyJeru+VEjtjt3mu2Vjq+z3eWBH
tD/je7KA3BPctZLBX2YiagkM+kcEs53jdJ4XjL5uhOT1su4NQ+m8jXrQlNoH
zKasPat9H7UUW/Kpy3OLa7TeF9zt3/zsAENyPzCWmRe7k0T0P/xRWSE6oJHL
qAMwMDukjciIow7EX7t2gUCVQi3DDWt8HriUSy2HPT9RIfAqpgYcMtMmhcwt
fZcChcEXklyKqsgV0L0STk3UNJArIEtxXOEPPyQPwvL2IseE85Q8COnKKltX
9xbyYFR2yEalXm3kwdA6fPuROvWSPAT7CucVFnavyUOg9rnjH9b4hjwUvo9T
PZmFt+ShaMvPytIJOsnDoFKZf9mw6iIPQ827jStu69RMOFpGrBPctd3k4VCd
4y/dv/aePAIGvDi+zvIDeQQm6yTPZhqpmUjketjl3DTtIY+EolpyaryAmomC
y1jR9vgn1qPQNXmvJ8eslzwaQY86y/qiqEujsTx6uGS6nPUYXO3Q1Mb3sR4D
1/wGu7w51pUoj9+8XszXkCuhbjNLnhFTM7Hwt1pHkTfrsXiRXi7OT9TgH9Yp
/lI=
         "]]}, {
        Hue[0.8503398874989481, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.772079, 0.431554, 0.102387], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1z3lI02Ecx/GfznMeiU4ync5jDtGM5pFHzn3mfc+jEtECs1TC0lCzksSW
qQUmlZSWogxBk5F5pKWhEoaJUdMwUMKyQCNJhBKHc1vFvnvg4eH1ff/x8PU4
XZp51phhGNG/+//Vny2xxrWyN8HFYYoG0PDcBNaXlWI9LeA48HB/Nc8betuB
rXC9f91KQOaA5VEoLxp1JzvBsSxrLpq3O6k3F8YCeU9EiQN1d2hYHdfsN63I
njAzWc3e67Sl//lgM6H89Xwz6gLsnW9YPLHjQt0HpmvyYulbDtkXLL6wfJ3L
Ih+EOrjyTWvxAfIhbM8knLnE3qN9DsOcM76rMmdTF0KlbnesKbAhB8AUgga5
zJwciL2LNWaWUkdyEDZEEy1F733IwdC2XbAcPuZMPgKTP0vj1X725BDomoWz
9TIuORS6sqamL8Ee5DCozeelU1Ec2jccJq1epap7fuSjkNl9P97XLiFH4GtW
rqBEmE4Wwaief65WkU+ORI9SJk1uKyWLEVsts308fZUMhO7zueGvqNO7Fsj4
kGKzHN1MXYLKjPnMgPEH1CXQOr2SL3l1Uo/CYsi3yWWLbupReNbn3nUzq5d6
NGK5vr1OyQrq0VB4fzRqfNdPPQYeKt+OqqoB6jFYZwL8G5WD1GMxEjmUKtYN
UY9FnarDel09TD0OszhpZrXynHoc8n4pV7sejVCPxwRvOc0lZpR6PDLTc7zt
F8hMArI/bRQVZrygnoCcquad7kEyk4ievLufN9kvqSdi29hCeDuTzCRhWph+
q7vF0JPgVtE7b/za0JMRFGhdrl0z9GT8LMgeFGsNPQVbQ7mafs4Y9RT8rpNw
az3JTCquzCxU6AINPRURLU9WfoQZehq0znf6T4kMPQ0twXPlT8PH8BcgVwes

         "]]}, {
        Hue[0.08640786499873876, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.363898, 0.618501, 0.782349], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1z38s1HEcx/HrK+5wIkIbQspMrZEfJeHl13HcqbFiS1aijQjd5EfMifKr
ppWyVks/WMh1HeeP0vzYdaQJk2W1i01IVlYr+TWu2r2/n+27757fx97vfT+O
iRnRyQyHw/H79/x/686PAKZc3l0stAJ9wHoK4/It1oKaB/3eofTFSUtqM6w1
yUeXNttQbwEzpQkO8jKl3orVNT/H8BJralssd/G5wkwOtQO0QzFOjh2zXbre
Dv3TPusCtU23rndgJUWVl8s3o3YGd+r3oQQ7huZdwJHqDSVFfKV5VzDX3tRW
qqapd+OP9lL8eO5AgK73wLB7RNKuHCR3w5oFt/phmR7td8f6L3ml5oMt9V6s
TFzISg36SfMeYHJdLTrDeOSeWA1oNDJxZv/PC+t9w18K3m+i9gavpU3/SoYB
9T4sqpKyVeBT78dql/JUYc0I7feB1sY6b1uGA93vAJYX7lUl+npQ+0I9Y7Um
TguhPogJjeSTW90Raj8wkhwD06Fkan+MtdVezBZLqANw97zWM8FXSg0I53lp
HU/KdS0FLLPFs5/518kDUeNkmVNlfJs8EEZuS+ZC0X3yILztebqhnFdPHoS4
uZh3kvLH5MFQPOjrsZc1kwdjtU72ffyEjDwE1c6lxTntcvIQKNWzRY1jz8hD
MV9YkGUuU5CHwjB92tv9aCu5AJXHYz5GT1JLBVgoe9nvGNVGHgZjk/xSqwZq
aRgGK8IyZXOsh4PPtW+4aackD8cxy1jNDQE1RwipWXOx+iTrQryqPOM8nMd6
BOIvt1xtrmI9AjvDZ+4M32I9EqKCVFVfHeuRkCkGFDNNrIswl8xYxLWyLsLZ
kfzFkuesi2G7cbTlcCfrYuzyL+zlqlmPwqO4+qIX/axHoal4suLcayX+Al6e
F3c=
         "]]}, {
        Hue[0.3224758424985268, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[1, 0.75, 0], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1zglIE1AYwPEdgYuBjWotM9KlZS3xzq3c2rd7XoOiTCuplCijcrpSkFgr
1zxSlBSUIFHzwExJZ4Qr2wjTGZh4YJKWSJFHl0oMXJur2PcePB7/93vv8bgZ
2ccu0CgUiujf/L96x7LY3dzFKS7cBrgBnrQqwa93PGwGrB+YG4yiBmKzwMW8
w22NYGBvhbXxqg0vNDTs7cC06x2lU0zsnTDjucVZed9n9XYgOPzl7KUhcn83
OD3XwnWmSfRg+O4Z9KHnW7H3AjWmbEDHpti8vQ/c/km1v0N88D4PPI/0NlcH
Az0UXKNtAqWWhR4GTqutvsxBR48AmnaiIGvoC74fCe7ZWH3fB9JRwNCmmsMq
ffF8NFDLOkdnF1nYMUBfiExTTzvE3j4IawFiYWQ76Vhw509Zsoo343k+uNId
oembONgCcAdMWkNek/8fAvfDFJ+0bDb2YbjZySvRsaOw44BiOvrt7aIEWwj0
r5Yzo3uOY4vAmKm5/7E1E/sI5GWrxtK7crDFcFt86nS0XI8NMOzbOLGHUeRt
A0C/35vw6fFKdAkMXKzukV2tQZcAV8iyrDbUoUshYmbEzp9vRJdChTTR1Ctp
QZdBnj7mT4qiDV0Gip6se55P7ehy8P8xeM7A6USXg7A2tf8k9Sm6AmqaFsQj
w9gGBTRbuPU5N7rQlbAliOKqcGIblPAgZAe/OqMbXQVq7bxyvxnboILzDYwr
PcvE1dAdZDSeCDKjq+GSXLVqVGBT4iFY9HOu5CzxeOiyxg08ySGeACsrjOtN
BuIJ8Jx2uYJaTjwR/Hc5BKIa4omgeVVkYtYRT4Jc59LG+RbiSfDMT1cqfUw8
GfjlBS8/dxBPhrs2Ta6unbgGeguHZLxu4hpgjdnt61Yz/AVmIBhM
         "]]}, {
        Hue[0.5585438199983166, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.647624, 0.37816, 0.614037], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw10A0s1HEcx/HrkKMxmQpTKc0izw9JHu7j+Vlm2mIelmji1iW7IrU7dKPW
PJyHLo/RIVZCltg8NJWsJW1EZalsSbRVl4e5nLT7/v/bb7+9/6/vvv/tvy+R
H5nMZrFYHpvn/616fnK3rQ4aSdKWuPQCbJPPBlv9DKFKDtghAwGOh0yp9bAe
fWXkPYdpA6h/+lt/+szEgKoNsbyxUJeYrkNugrVjckPOwDLtN8UWkcWolL9G
8/vxw3Z8R9Ob39QHwGYNVgkq5mneHNp2lmE1RivkB7GxazFTZ11zUNWW0GB9
uNz9XU5uBe1xH6lOO5vcBut8M96NkVnaZwfF3tkCtucktT1YylvyqTx9mneA
mlNsnvVjZr8jliZ/6TWIFbTfCUpxn3lWvyG5M1i9ww783j3Uh7F40yJZPXuD
5l2wsFGe3bazn753BEph+VC+5VdyV2g4CCSpOrvpfx2FcPjEnyIbZ2o3aIa6
3W147U/tjgTdWsmFjOPUHrC1juq/mpVE7QnF7dy3aqnnqbnIadOqKj4rpAZc
wzufur/LV7UIkBWZTbcISsi9oKiMr0+LkZJ7IX5G2ey2XEfujbmThZem+u6Q
eyMuI9e40qeZ3AddsrGkeH4ruQ/EHuUdLrb3yX0xvxhUVlz0gNwXOeJ17uJI
O7kfqq1qYdfQQe6HmB5eXEBkJ7k/WoUvXFdmqEX+0P9YKn8Z/pA8ALwn0SkL
MmpRAMZezeg5zTEeiJrVtqFM4y7yQMiehflVcqlZQSgtSs9qjGU8CJNDEcH3
zjEeDMGpgmspQsaDMa0/JvG8zngItBI5hRYVjIegGlLt53WMhyKCL28KaWE8
FI8umvJG2xkPwxctmVpmN+NhsMdEY0kP4+Eoi9Lt4zEtCofg23brhM35f0M6
GdA=
         "]]}, {
        Hue[0.7946117974981064, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.571589, 0.586483, 0.], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1zwtIk1EYxvHppMwllC7RcKVms8TMW96Xj5vzPkELsvK2xCktK7yCUM1h
OPCCIgsRLS0NvK2lpQmmFmk4EvMGoQihhWmZhgjmWsvY+31wOPzOn3NePudr
t5KyzFkslmBv/d9N32ZYcMJ63qQOI3QAY0WBTeq8F9kSRrPMjo1JW5h8CGz+
l3cl8w5kLixGsu9PTO0j24Ot+qZ2qzhAdoT+JMcisOco2QnGszckXe0csgt+
GZdY6brtMJNdYdXaWLi1aEHz+TAPeWsXVOlCPgWLaKVG7rmf7A7zz2P9wrm5
YZM9YDb4KENrZkvdE+Yfx8f0P9bpfS9YNndzkhOtqXvjd5hItn/FkuyDP7yG
i/oFe7Iv/hol3MuhR8h+0H8vSnJ1Yu6fw+57XnmvvZ7m+8MwzFGtyWZpXgAM
0lqPtXIe/W8g9GO63iWpPzkIKGG3eFfGkoPBbqoPKl68Sg5BhqDVvfKEnBwK
PldgnS0uIQvQYzOjne8pI5+H8nDVzYHUanIYGnOHlmVQkwGx4zanNr/RZAVQ
+rSDd9vmMfVwqERKQ9BgG/VwhPRP51yxaqcuxHxC93KLsZO6EIkf5MfymjTU
RUjbubTELdRSF8HJOCD3K3hOPQL6znsT0xd6qEfgePJ0fbNNL3Ux7NRdRdpX
ZIUYdVIje1T0gnokqlVbmWmvyYpI6B8Ozra5vqQehZSdmK8/C8iKKKxm8Far
BpkeDeGnNzmeG0yPxoB0YW7LuY96zN78dYlGTFbEwJDpUTOVxfRYHNw47au+
y/RYnEmR1aiqmR6H62WbDXUNTI/DeqpLkrCV6fFwG5/kl2qYHo8hyye5zwaY
LgErLf+BwxDTJdgtWEl3H2V6AhYiZgJ8dExPwJ1ipTh0qg//AG4CF3w=
         "]]}, {
        Hue[0.030679774997896203`, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.915, 0.3325, 0.2125], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw10GtIk1Ecx/FNXGlGLC8xRJnasDDTtGZuaft5mTrnbWILR2SFWmoqUS9S
Vo5SIytZNzXRApdiYOZtFhamlb0INRQCp0mZZrChM/GWOc3Y/3ngcPic7+Fw
zuN5Jj85w4bFYoVujv+z9ZuTWETGwuwEcQ8tgBdvzzb4eJPtsFqUk5LcPvLW
ai5sm3LPNe9xgtXOsNSrqkpc3Mk8cMSWP8UmPtkNK7rS5is/7cge4CZ99K2+
8FtitRc2+Pvv+4uG6HwBLHyP59H536l7w0a7fk358gd5L7isXnMNp4v2+8Di
L5iciDWRfTGzUbeoGF4k+4HNGuvXP5knH9i8v3bYLHWk9wWAtRCSFtfGJQfC
dqrqZF48n3wQ7G165adCF/IhcE70DbgbnMhC2Dd+kMuVNuQgrM04xAyOcOm9
h7EuUvQjlfk/wVhOaWlL1QvJIlhuu3au1kaTxRgrceVVGlTkI7hxv7zj4uVs
cgh+5Sw1af8WkEOx0/tNgLChmHwUnJuWsi3p5WQJFNfvOpmPPyQD6ok7SdUV
NVZrAOdc9ulVvzrqYVgwXdV1f6unHoa8Hdu17XhGPRwq3udKfXgT9XAkzU8r
HE3N1CMg4OeMZ9W2UI+ArE/o0VvbSj0Ss2Xp5xPVbdQjUTFVaciStFOXonVw
aG7MSNZIcWv3MDtV3UE9CivJo6emFsiaKGTyv+aeVempR6POtSfiUQtZs+mM
7MzRRabHIK30fdyXfZ3UY5DSJThmVJJZMrwwcy4ZC5kuw9N+vyDDA6bHwmYy
ODG6kemxyNw6+1irZ7ocRctBDcHvmC6HbmKX+9AA0+PgX+CVIB1jehwcqtQ1
ommmx6PoXuLr8Rmmx0PmtrTebWZ6AtbaX3nqFpiegNJA8cryWif+ASfVHVg=

         "]]}, {
        Hue[0.266747752497686, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw10H0s1HEcwPHf/RzSVljdwyzNQ3Qkistjuo/jDudpVKitkmV5uLBM89Dm
VobaSYthCku4S65wkv4Q0665LVq1yDRmcyHMZc11zrm0+/x+23ffvb+v72ff
7eecnpeUQRIEEbq7/u/mT8szziVkaa2YI3gAphmHrXTjATDnHtDZPlcRTjqe
ue2AFv+N61TogH4QtofLSp46/hg2Nxsskoqq/5JM9ENgXyWt8mMbcN5p9/7i
hxXQYLuAfrh4Q02O4/wRMKwvcVhtLJx3BxvJ2cvM35/QOUDa+VdmihewPYFW
F8wlFxh43wtIbVPzo8lldG+gj1Rs0FaM+N4JMJYVa6+m6dBP7nqlSjY6i+0L
m7xiZbZyC9sP6PKhioAeGv4fLuzU+FdW35lHPwWm8fOJm15sfN8f9krpPqV6
a+wA2HG7W2B/zgU7EPTRwtRFRQh2EARtJq/n3ovFDoYwvU7c/+4Sdggwljt7
B9fE2KchovyKKUN6GzsUNi6+r2+vqcA+A1Wtmtq68ofYPHAlFatMWgM2gDL1
guHLkxZzSwAskj9Huqc8Qw+D5uzHjU2eMvQwOMwXlHR2daHz4WH/x69uowp0
PgjYE0PTgh70cNBZFkxklvaih8OMSanIr+5DjwB1t2h/3i0legTk3Mia8OX3
owsgzdLmrfwPtkQAKXJVYfv91+hCGGvQePdZDaALgZVw/UFOHjYRCdJpj7Vu
NeWRILZt/dXBeoMeBS9UHM9jCdiSKHilOM7pkFAeDVOT+S4v5ZRHg8xVlWga
o1wEAYWNS3ZzlIugLTnUQb1KeQys1gstfXSUx8C1n4YW0kR5LERpcjVT9EH0
WJB9Hwtc3odNxEHRvMf2LIPyOCCW8o+yHCmPh4GbXFGrM+XxwBiqtS53HYR/
KIochg==
         "]]}, {
        Hue[0.5028157299974758, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1zn8s1HEcx/Gv86OrbvLrJOfijBtmiegid/fy+7fEQpuVauqPusKULmm3
Vi5GhDO1hpotq82sCK3lalnjH5d2yoi4rNqEkR/t+Eq793237757fh/f7/vz
Fp2+lJ7HYRhGunX/f5quBfnPtXGFVumlpRfg1VguyQtX+0zJxe/mQIUge11u
ajvwGjJE/XXeMLUTdj6sV1TctqV2ASf3VMq9TidqN2y4S3U9R+bofw/Y1Kgr
YhlLck+sbzrLUnQcai/w77Bfskv+0PlisOcre0veMLSfD+wWkrLWq5Zonh8Y
Vy33Qr8juT9WHBPyJ+a5NG8frLc2uBEyTPP2w7HjrmBKuEb/B4KVvK5S1rPU
QdimEmSOtpvPO4CV4gCruKu21MGwWtA89Y2fpXkhYLwCuD7brei8g2AjWkbE
Wfb0vQSs/RUbjcy83yGwak1Ujt8e6lBw+E1CNsSDOgzW4TsGI945Ux8Gp0F2
scDBPC8c7C5JfcHCbmrp1rkn+Gsb5n1lWB3zTDwjtqZ95JifOdkn5ImpAWP/
95gBg8zUKuDWcmVGizGNPAKu+dONQw9yySPQ/FfzeFavII9E9YB4kHFXkkfi
x1njyOKTm+RR4DUrH/UZK8ij8GFi0ijYrCWPxsfjQTMZv+6TR2Nad9RiVNtC
HgML3wT7MU0reQwirw+7ScPayGMx5HjNydD2jDwWzcNlErmunTwOkf4a9Zy+
gzwOsomM3G635+TxkAUrBXrpC/J4GEby3haEdpInoHLXXnmSaxd5AriXF3sy
x6mZRPDiy0rdy1+SJ2K2qfiVQdhNnoT0wnPixjZqVRLSLLsUWlEPeTLEn/j6
6nJqVTKWi4yFx76ZPQVq7xnRVEAveQpKi8Zba4upmVS8d/hcN9lt9lR8lXW6
5Cz14h8SpA7d
         "]]}, {
        Hue[0.7388837074972656, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw10A0s1HEcx/FzHufkGKEIF1JpUpxE3MfzOQ8tsyVWnsdSwmosmSu2tiuy
4rZoKytbRE/kjtoOl2u2VHpYxa1dE512Ynm8M6faff23/357/1/7fff7/TnZ
Z5LzmAwGI/Tf+381PHM8ncpC1Cbc208foEnsqBwY9aS2wHJ6d+oA1wSGtsGa
hGvVUuBMbQ8zqcQVr42onWCUeS8ub2mFZ2gXGF8Q9454bCZ3x0JVZrDM56XM
0NuhnX9VlC1lkXvC1Pcss7zSlnoH9FUXeSUFXTRvJ7RurZFN40Z0vt2wFBp3
BPkryPeAFSRNscqYp/m+mD2aFn37zjK5H1bd9N1DM3PU+6D7fMV6+KEJzdsP
/aycMy3/Sfv9oa9wHtYa25MHwERlZxmRpyHnwnTuRUi51po8EEuyBylrjWbU
B2Dm9yGUVW1HHQQWnzVZ+P4P7T8IZt/gDfXEVvJg6NZz2J/CxHS+EDBXCr+X
htmQH8LihOhj4yY2/Z9QWKXyPCzZG/cJw3phvlfpSQ45D6yad5e49/2pgTCl
8rBtXZShhcDd9sAGYXoKeTgcFEWLv0/lkIejX8mfcpIXk0fger76tGqogjwC
kz/ER3oqa8gjIeoscflWV0seCVe3NxL1owbyKBxr8BaP6ZrJo7CuCWBmTbeQ
RyNawzVv/9JKHg22u1KxcK2NPAbIqqrOte8kj8HYat2uZq/H5LEYd1yJ7W16
Qh6Ltq85avnUU3I+Wl14TAW7m5yPLPPBDIHdM/I41Do+X67VUgvjsEUlTaiW
95ALcJVRfNynTEIugHeyMPGErZQ8HrLxDmnZLWphPJZaz/MdnHvJEyBbDJz+
dZlamICk/NxtaZMbngiBvaieFdhHnoib59Kr889TM5LwdsS7vb5nw5MwWt7F
mZ3pw1+lHBis
         "]]}, {
        Hue[0.9749516849970554, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1z38s1HEcx/Gvb86hRU6N/Fh+TT9n+XE6J93L+XHucJVspKWlRFqhxKwM
kx+5UM1ySujX0lZ+5PePxcTWD5s/MqE/bGT50XLFOj8O1e593+27757fx2v7
fj/2MYlhsSzDMD7/7v9P7aUS5Xo1B6QsC3roBbhZzmfL5/dQG0Kz8510xmq0
W9tbwTWsvsw34ELb2/BTlFBbN74k0rYlOILVSMvPPHIb/FFHNxXcXiO3AxvW
V7mlS+cOWNnVPdHltEruhI0I3k3hKQtyZ7DMHZUsPJF8N9TenQvfplj6v73Y
XFE3n2dkQPv9WEg08cy8tk57F2jmlBbiSA75AbCozrAdH6PzuIKT1Kc5fl23
d8N6hKB6sYyhvTvmBpdS75eqaO8BVtWfz3cxpe/zsfLdZF8yoyb3xFqiyLP+
+Rr1QTBJXfGSgO20F4DjdNE/LZRH7QWOijtalGNALcQmTXYVT2JO7Q09ee2O
3igz6kNgnd7P3tvQp/bBcqbCWi9Tj/ow9HsaY90e9NN5RND4jNa8/mRL5wHY
equrclOhtrMA4e+o+ckeGbkvNAo3iXPVSXJfTNd62r1UXiAX40Nx+yV+Riq5
GI4D0y3pjtnkfnAcVi47GN8i98NASpBH2se75P5IaT3C2LxRkvtD4dJweuRE
NXkAzpj6Ps0ofkYegCqTogRZWQ15IIZmSuL0k1+RB6J5eKT8xlIduQS/xgTJ
+Y8ayCWoCH/bNmTRSB6E84UFqxNxTeRB6PWdssovaiaXIjc++ssxRQu5FJpB
/8fNV1rJZbA3n4w2FbaRy5C2EbmhnqVmgpE1KHqYl9NOHoyYadf0Yl4HeQhe
iEMs5gqps0LAzgVa2qt0HooOo+HFo9JO8lAYp5eY/SilZuSYifvy5NxXnctR
2ege1mPdhb8XFBNP
         "]]}, {
        Hue[0.21101966249684523`, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw9znlI02Ecx/GftTR0noSOPDAdrsLGTNMsj4/3NTWm/ZGkjaVop0flQUR2
CFaC1kpXq7CkLLQUNbc8mlCJV1ZilpLSPNMINTRMUyv2/fXAw8Pr+37++G6S
pUqS1jAM4/33/nt1Z8aXI9WP+xQzqaEBDEvvPehhONBxPVa+Fz2Rh9iRzbCs
lWsdTKzIG7DysrtXUWtD5mHN+ROv67U8sg041cEdWe1aX53tsWjAU8ffmCc7
wEgq2T/dpdeiMx/LhbcX3pWN0T5O+D1d4TmbaER9M5iovMi3jebkrVhN5SpH
t4zQf2fomQ20aqymyEKsHCj5dpBZIoswY9xd9TCPT/u5IF8/wfGUTETejhau
VnLkvR/ZFYNlA91KfizZDYM+UkHhrxTyDvibzC/FJJwku+ODuqpL2X+O7IFV
zqRtceQV8k4c5r9xd2+Tkz3RVjw8a16hJO/CmXU2MZzM++TdSC0PcxxPKid7
oUbU35q5r5LsjQuCm5ZuZ6vJPvD80WN8VVlD9oVgwaY5NqOODMi54nqVab3O
uUC1a3TWoRwVdT+kjyty82vV1P1QM+XYPNr0nLo/JPHJny8/baDuD49FjxGD
043UA9A3NySpdm6iHgA3i6aSxGYyEwjZmOX8kKiZeiAsONxXeYVkJgijnXWX
tANsD8Ijf1WHiveCejA8j+7NlkaRc4MRYK0w+ZjN9hCIFEXqzDtsD8HxNC+l
aT3bQ9EYd+tZVifbQ7GUfGz25yDbw9A5ESfYOMP2MDSoDSUFy2wPR6WL8Prw
Wg31cAhdCsQaYzITgYz00mt9FmyPwMS2tFpbW7aLIcpTj01as12MnKSqx/H/
eyScTVRf7tqxPRKCIln7V3u2R8FjzmxPrxPboxB9MT8lQ6jBHy81Gmw=
         "]]}, {
        Hue[0.44708763999663503`, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1zn0s1HEcwPHDiogyquNuinOYTIo4cnzcOdyDi2vJptXowXE7ptlaW9O1
pPOX2q2jJ8naRHS6NYurTsuVzGPZnbjGrUy6mJqouZ8edp/vd/vsu9f3/cfn
G1xULjvlSqPRuP/m/+08S6nUauT8Huu2XnwA+yd59JiADU56AHWzhl21PQS9
FWhl8aOXZoLQ/kC9sdauUgFoOvwW7+6rvueGZoLbF0fhBx4dvQu8m+54dRjW
Up0OgbUjLE6Jpz/uDwWH3eZDMdzRYeCmPuhbZgpAR4BjqsE3UEEcCbSC8UBp
PwsdBTTHZJhneAg6GjbE3U1I4fmgY4A2U6kxWxeNTu8FF+85rS6Hhf/bBxdb
BbKTG5PRsVBkmDZfZsjQceC9PhHKbytC74dhY02jVl6Bjofable/glwVOgEs
nlLhsqUWzQHF1fCjAxEadCJsGfnZP77zFjoJJOJ3VFhWM/oAVOqED/NyW9DJ
UM8KVpkq2tFcKLa8/BPV1IlOgR+v1Ocm5/ToVLjBWAnSzz5BA5ga5Av0li6n
VQCNbdxYJfsp9jSY77RcWFd0Y0+DQaapbaKqBzsPWsbz826XG7DzYHmgT3eI
8ww7H1j5AWrtPFrFhxGb4HtxxXPs6dBReniCZUer0sFVntMoS3+BXQBKGxVs
uY5WCSCGYw11f096Bnx2OV1dt9mIPQOmjYM2XiKalgmPw3umBMdIzwRuiriU
UUV6Fniwh6o3aUjPgkdpJ5qD7pMuhCSl2aDRky6E49TY4ute0kVgECnOCIZJ
FwFT2zpLmUkXwy/+g4KGj6SLIUqyoi6xkS4Bnb6rZMcs6RJgKutryu2kZ0Pd
W83Zya+kZ8PolfMe/kukS6G33WuocIF0KYiurfvRvxnhL4JuGtg=
         "]]}, {
        Hue[0.6831556174964248, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1zn8s1HEcx/GvyIrSkSu/6shlfkToB879eOH8PM6vkqVQk+mfTJsffyQ3
1VyTmjVbfkyOYmam4VY4IitKYyvqH21iJJZCDZvbVbv357O999nj8/zj/XG5
nJt0ZQfHcZJ/8/82nl8yLr1p8dWszSA9wDTHpNC+ypq8C5YJ1uJrn81hNA+m
5bJpob8r2Rb6mvL7qesuZDsY8gdT5h46kJ3AQ+T4TMKgzGhnWOLpFFe8Sj4C
s6KeyrUqHu0TQl9i/UBr2HpptBsssqTDIY2m1N2x89NIS/ZRPtkTnE7ati/L
lXwM+ks2IjM/AdkHJplfCoa9DpB9sS0oT/9esIfsh+20AMGtbkf6rz/23l5T
lEJCPoEbytTlQJ6SfBJPasyL7nlmkk+hsqW3QuacSz6NIdEMl68vJgfg4lTy
ZJe5mhwIP/V5tWKlkhyEJlvp+HB5NVmEulaPsep4DTkYihxJ4khQM1mMH80L
Ql9RG1mC2Tpx3cRKB1kK+3Y3i/f2nWQZvoodsl9vdZGBwOQMyWSt1mgVYCf4
wBNbPacego6qq7IN+QvqIVh++9GnNaWHeihSz81Oy4N7qYdCtNF/tse0j3oY
Wg+OJz7TkFVhyGm7oMv11lGXY95nfZTfQFbJ4f3z8KEhA+vh8Ck+4zcR3U89
HN1hv8t2l5G5CIhc3bv4OtYjkDG3vzNrifVIDFyvUH2zGqAeCa7ZaWzOg8xF
oUnIX1RLWY9CLeIN9bGsR2P9XaZgNI31aLxx0WbpcliPwSFtgIhfyHoMtBLH
zc2brCuwOFvvoLrDugIemsI+VRnrsfBq/LPAVbAei7z28RKvStbjUJpXYC1/
xHochENLq9kNrCtxd6Mj6bGGdSXajzsvzdcO4C+5Hg1E
         "]]}, {
        Hue[0.9192235949962146, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.922526, 0.385626, 0.209179], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1z38s1HEcx/Gjq535UeaMhfkV2SU/Lgrn3Mvd4fy8+RU28mNhshaLMGuz
09KwSFbMTAhXfoQ0XH6c1OqPNGNNW9psTavNrznpyKXavb/f7bPPHt/nZ+/v
5+uYdS0u25DFYgn/rf+7/tkSmShrNj9JvdX0AgZxt4+rxyzIHBhlZOw/+aCZ
1vsEdC2RHXLHI9CbC12vV8/7Tg7ZGgd7tU7OufZkW/xO6poIjLIkO0BXl8zv
8VyjeU7Qbc478F9vkE/hoM3cuPkdc94V7NRSK/EdQ7qPG7Q10WHq8WNkHtjq
Q+GGel2ktzt09vWiriYN2QMGBTaVbTfWab4XuI8+l38c+EP2htb5yrPmHQ7N
40NrIW7O2jMln4MuaemxEc+S7ANDdcP4l9CjZF8clr/0++pqRT4PU3jJX2hn
6fsXoHmY4pGu3CH7Qfd241fSDy79nz84fs5u3fNe5ADs18+kO21JyQKIpeYm
xTaJ5EDklVZtXrp6mSwET1gsnyy6Tg5C1aBqTRGoIIswUbJQvWxVSwZ6hcm5
Cn6j3hXARIu7vLC9hXowKqZXLIyNOqgH41vK5MhwfDd1MeKVb2zzJE+pi5Gp
vFi23d5PXYJ6v+8yie8gdQkWTbaNb8UMUZfibsDO6Xtnh6lLkRCkilUtkVkh
eDD1c64s4Tn1EKwUDC9m9JBZofDJtWO7rzI9FNZjSrNRsxHqYXDLGWqdOUOu
CEMRTyZyFDFdhnWFb3W2nOky9Gdl5uSkMT0c3NVO/74spodDMLe7nJPP9Aj0
qk7ODhQxPQJLJTOHsptMj8SCi4vddAXTI5HadDgSXsn0KIzaxapeVTM9ClN9
As+0OqZHQ8AWaQobmB6N+5as2d16pscg3345bqeR6THw361pTmwdwV8f2BWb

         "]]}, {
        Hue[0.15529157249600445`, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.528488, 0.470624, 0.701351], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw10HtIU1EcwPHrNBhaanO5iUGaj0yWuSwt8/FTp3NzaiYKuR4maEKRSZHK
NF9rqTTBMrPHQjBx2KKV03yEZgr+k4+ERJgPzHLOIWbMauK2jP3Ohcvlez/n
/O7heucUnM2lURQVuXP/f9qun9FSlmetNDvqI74A2UBg1QUWF5sOjgHiP7fN
vwdt7QqWZwv+Ki0TbM0E+xtmF+6TjWhbs4Falf/d9Gag7wfzQr1paJms9wJz
+UVOn4879kHQW1lyY+UHnO8LtKyZzqxgD3R/MLxJC3Qt2kYPgD3Fi5IjMgt2
IFDZVUJqTYff54C9qJLTwXLE8wfBdj9zasyTwnnBsD6xpNbmWXE/F+w0nYzx
6V24/hhQn70VhaJ92CFg/eLDkbgwsY/Dpo5xR3+Nhn0C6PkNNHmmA3YobJfP
mMR1epwfBlt8dqVQRv7fSbBopx0m073wPKfAroweL2vlYofDYHdp/uMQHvZp
GOhjy6r8MrAj4LIkpz+jNxc7EtzLnIKca29hR8HIclO4KqUaOxoenFOsvdyQ
YwNU721sm29+ZOsKgKKbs5J5pQI9BsZD9DxDXit6DKiLndt2eyjRY2E5VU21
F6jQY+FM6Xd2HluNHgf158M7etvfosdBoWWD06R7h86DgTojv2elE50HYl1P
jPaVBj0eou79qBqN7EKPhwnjbOa4AptKgBfvf3GVi8QTwI1LN40xutH5cOjp
1fm5UOwKPjh+i1CmphFPBHaNc5g5m3gi9Cpq/EzXiQugUmBosJYQF0Dc1Mje
4LvEhdB4QCquu09cCOslkqGlh8STYPWTSmVtJp4Ebi1GqaGFuAictrxDBe3E
RTDceGVy5TXxZDjsNexrryGeDKyvlyRHu4ingK/HaLqmm3gKPB8tmdPt9D+J
mx1O
         "]]}, {
        Hue[0.39135954999579425`, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.772079, 0.431554, 0.102387], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw10HlI02Ecx/E57yOPZaaWlqkx1MJjWmbTj/e5oaJZI01Gh/ZHHkwroVIy
EFcpUooQ5hFm1qB0ZoJHedFhGB5lULZJKOY/apo2p2Ts+/zg4eH9vOA5fi7S
nORzXA6HI9we/2fdtxiypjKoyywSvqYFlGeXrqvvBVKbYDNd8eKa3IbaGlYq
wZ+zwdoQXduCo+rj9Cpmqe3BGfb/2MlzgK73gnu9w9vGcQ/1fnAzvuc31PGo
D8A4ZnJSP8KY2g0bXa/WxKHW1AehGcVcyZA5NR8mmbLWy76f+3TtAaPim/sq
BRo63wurVpPvMrtXyA/DsN65u6rQie7vDYMtxBvxd1P7YPOCnaNHpyW1L0zL
BndmSVZoPz9szDnOXwzbQS6AnuBr5/qyKbU/tPp8w/5d7P8EwCz3dM+VpL90
/pHte6vcbxxS0n5HseXaph6d0qP3BMKiKCvF4q6A+hi4m7UJi8OR1EFQa+Qy
g8VU6uNYsnrkFiQ5Ty3E+4XhIalfAXUwko3HtT32pdQhcC57mjJgWEENTFT7
5EbEVOu6GNhyEVflVdSRh2LhJP+JUtNEHoqGjJ+NliMt5GEYmJFp7wsU5GFY
PSN1kpc8Jw/HiNpDKOW1kYdjlW8wlJbUTh4Bh5yuvK4EJXkEZgrGROWGHeSR
iMt9Y/fwNnVxJDrX+3zSZplHwawmqFDk+ZI8Csmu7s1rqdScaJx4ENxrns88
Gj3ydF7zLeYxSOz/Nc+vZR6DwuxT0y2PmcfCXLas0Fcyj8Vg8TeFVzfzONQH
lPxOHGAeh4LWq601Q8zjIalOfdb0lnk8yiesKsc+MU+Ap1OgVjXOPAGX7kiW
26eYi+Advhaw9IW5CFEfOgSR08zFsLflhen9YC6GUD6madz2f9gMEv4=
         "]]}, {
        Hue[0.6274275274955841, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.363898, 0.618501, 0.782349], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw10H8s1HEcx/HvkZjWUoflR5wfNWF+Szju5fevc2GmQpbbLJvmV6HNlZNf
tdV2qWjCssnPnV3IjyMdmqSWH38QSo1lbf7A6YfNodq977O999nj89z7n4+V
MCsuTYthGL9/8/9Wnw3eTmGFBbQsQA/4/XA5azVFl6wH1lrVp7fV1mQDMGM1
i4LaE2RDqLQThupTD5OPY792srKugUM2h3a2Yvxz3gpPbQ4MxPw0fr/8tdrW
2HMOEjeJflC3xQGX9oxxtop8Cowir+RoxjTZDhtFpr0ejUratwd7yqe4dXKL
7IitAnm5w8o22QlG62bf/U1tFWq7gLHNn5E8sCK7gtk6UjqfbE12g9ZsZhrb
3Yjsjr05N06ZQIfsgd25QmVHhQnZEyqessD11SHyGbA6M0sXTDXdC9o3Npy5
niz6j7PYb72yFjJrT/aGzvzS9MVqf7IPUmXGToHCWLIv4lsWREpdIZkLO/My
2VpZDtkP6cGzX3wPisn+mMkcXEyrqSDzEFwXV1l8QUIGODqy/Pvdj9UWAzk2
P7N3tp9SD0BGvtTg3rkG6gHoezMW3dnaSD0Qc3ZTSR/2mqkHokHC38062U49
CE/4xjlD7A7qQSgKSeiJSZZRD8ZzHXl9vOQF9WCE9V5NzGjspB6C4Zgu73e1
XdRDIBZ9/Xi5oJt6KLa5jvqrvJfUQzFfOZx7bZPMhCFe71fd5KMe6mFoeajf
VGfTSz0c0lGHopFmsjgcm0ZSYYlZH/UIDLSw8i3LyeIImNi3cv8sa3okRDeV
rGNe/dQjYZly3cn3NpmJwvuNZ7mLI5oehXWh8m6bStP5SEwylMY6yanzsRa1
dGfyPJmJhpCZSI8XaXo0FAPSSxNVmi5A2y13f7ZU0wVY+TbKPT0ox18NHxa+

         "]]}, {
        Hue[0.8634955049953739, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[1, 0.75, 0], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1z3lI02Ecx/E1HW5eGToyNXNqMsxETfPK7bN5zfv4Q/FCW1ooyRwU6SJb
oVghBnb4xxJzaVmRms7MXChhGP7QSZaUBub+kOgAyQ6nzg723QMPD6/nzfPA
VyBX5FawWSxW3L/9/7SsVbFt+Gbnh0/7QBdYkXLMwTohmYutCs/ViHw+2QXm
ExcDSvVOZDeYR9albjZuZHdstaUrKlJ5ZC+Y+mY9y2UOZB9sNm1Uyrdcyb4w
HQvnZPlzyf5gq5/7bIa+G7M4AKaxEeWEZk5ssRDmSHNRicM29UD8Mrw7WKji
jVschJ/DMofGGC45GLbj8tBJ92l6H4Idb1SVhRHe1EOxJZ7Xd886ksPgPKvo
OB5gov8PgaNyYV4b3amHgzO/PL6e7UGOgI0w1zGE7Uo+jO29HrZ+xbvJkeBN
ROgEPzg0XxTYSpFROeRDjoazhvW+ThlLjsEYk2j+fCCHHItbZ1/Z+cmPko8g
qqO1vaynhhwHLdNiVNidJ4vAiHtq2KwmshgzyuJu4derZCCQX3R7IOiGxWrg
4YRR3V+poS6BuL5JcInbSV2C1sHBvI9VXdSlyPH8bih7cY+6FM2MKK187QH1
eLT99knUf3tEPR4Chu+Ul91PPQG9PaWjHc2PqSegSVzdLukeoJ6IGH1zdoN2
kHoiCrTRO5cu6KgnIYwv9V3IHqKehPprDX119k+oJ2NN0npnaYCsTobgpr2k
KnWYugyM3aKjYYaslqG35lRXVfJT6imo9WcaGnVkdQpypqXLU14j1FOxK595
qa0lq1PReve+8PqktadhtX/RUG3/jHoaRs95t8wnkFnpKNAk7e9WWXs6Fsps
st52WXsG9lRfntNMWXsGJOXtJzdWrD0TJVeKRLw/1p6J3C+nTWdcRvEXdfEN
4Q==
         "]]}, {
        Hue[0.09956348249516367, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.647624, 0.37816, 0.614037], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1z38s1HEcx/HvnTvJj81xmuQqIvmVH/mVo3tx5/w6jJjNUgrNH6QpqbCd
luRo82PEEomNpvn94xK6NLWIWlprqk1bYlM6tJSGave+7/bZZ4/vc5/39/O1
OpUZk8pmGMb/3/q/ax61aHG+tCCL/+MRvQDTO1DjXWkODfXAXhtz8NO3JhuD
tYMjXLYQkPlgn1WaxY1bkc2xabq1XjJhQLYEt7qgpNzJhLwXjDztg6K0n75n
DZY8Mb7QeUCksQ0M1Jn57ku6Ko33g5MeF7S6zND5A9iKt/fKaGBRdwBbni0Y
rX1P85zAnVLFunkYUz8IVlmubt2UCdkVG0UnhBXRlmQ36HRmT5oN7SS7Q0e/
03BFwicfAsfaPG2skkf2AFc3xfqlTDvPE1xZo5o3qJ3nBWY9D7OOu8je4DDl
qvq3C3Q/HzBRhpIoqT39z2Fce+62Ma0OIPsiIFI6oudylCzExTCXrdziFLIf
Xvlc+nx86BzZH1+M85Mz7a6Qj0AwPz5xd0BBFiHJLNH+p7yCDNi8adl9s7RG
YznQUzc8+U7ZQD0AM9tl/hn3m6gHoNi0b8v3Rgv1QDwpsKttO91GPRDbvGwf
F3E7qIsRLczrFrh3UReD92yaf0/ZTV2C5oQ73XsseqlLEBh13XUqoY96EJba
L7yW5/RTD4KqS7TJuzxAXYqsuWaOOklJXQqO4UJZs+sD6sG4uvhiyfErWR4M
cWVfSHj1IPUQrPCFn5pcHlIPQW/j/K+TSjITCn3R2uCmxxD1UJyJs/1m1Ehm
wnD+ab3nLGuYehg6N1bHqmLITDgMOlJdqm9pezgU+9RVph+1XYZjMwp2K2+E
ugzO6b/bv4PMREBZIs7xTtb2CFjONKlaC7U9ErE+c8Wjt7U9EmWNf4zSekbw
F0H3CYE=
         "]]}, {
        Hue[0.3356314599949535, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.571589, 0.586483, 0.], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw10AlIk2Ecx/FXF2pqOq/SqDwSUTFzmZVX+zl183VOl1BpkqIkRlBRUpZ2
DBTRuUo8IqKESCtSE2/NGxTF1CxLCA8yqQx0W3Z6rFXs/77w8PB9Ps/D8/C6
pp2NTzdmGCb03/g/Gz6tMDszT+E57N9LC1hvLBmSqJ2pzWBqWVLhMG9EzYc+
wOKEut8JhrYH74nkxtYyG2pH6Doc8iKdd1BvA49996pp0Y3aBTyGzTUymxEa
2g18uSZRbfOzx9DusLqkv7LM15J7QHfdsahd2EbuCV1K4+sK7TS5NzRCu26v
mlVyHzCLmr7mB6b0Xl+Y+2XLvPTfaL8fdIEmC2usLbkAplgc/SXYQL0HFgVx
tYfqufP+MA6yzhxo3Uy9Fybykxqdwok6AEwZPyxZz6PeB6OmEWWPxJ56P0yY
ymTx+BDdfwBMJzs3x3L/KxA5dvlVmUdCqIOQ80zpM1oqow6GRa6xxcqFJOoQ
uKaq4vMTTlGHwmpty5IlL5v6IL4XBKe/6MqjFuKMJul49chNauDpwLHbIXPl
hlYABZNvVpf675OHob1OmvWBfUgehqKIjIWGlsfkIhwVvyyU6arJRbgm/OMb
sFxHHo5yIft7d189eTgaJtTyLnkjeQRE5e19yrom8gicX5l65D3bTB6JyV06
M+GnFvJIRLeoHH0HW8nFyO/9clWlaiMXw3Xso+1lQTu5BOtq/x9GHdQKCT7n
nXapFzwnj0J4n6i/qpRaEQWPmlnZ/DznLFhr+zStewc5i68TGwsTkqmZaAwP
BVfOKDmPxt2ULJ+pOs6lGM9JTa4f4VyKsZLEW0ULnMeg2PZOd8865zEY3CSV
HDbvJJfBvfhixT1baoUMszO55+K2cx6LAWnG+9qdnMfCabrtrbdnJ/4ClRYX
2w==
         "]]}, {
        Hue[0.5716994374947433, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.915, 0.3325, 0.2125], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1z3tIk1EcxvFNNosummiaNsrC1MxKV6Yunc/mLl7mGGGZC8IERUkwi61M
q1FKooElpWKJgpMZmLdqTdMS8YLmH2F4Kc1UIpgXmJaZLbViv/eFw8v3fM7h
nLMvOfNUih2LxQr/N/7/bZ8lYrtmOLdVIOykCWgt6pBRKZ96M+wHnTLrS7ZS
78BGWc7Fpkg72NoFa4cW1ZktHtS7wL5uTBQGMM2D9W7RBX6oK7UnuJ2rRRWs
jQhb78falYKbJsUOci+sJVofz1x2ofYGl8VtL1BN0npfOFef5WWNWKj94OLp
MaB+t/zW1v6wFv/xyFZz6b5HYK36Vb08NUkeAHbvyNr8sAt5ILic2rqhZh41
H6ylhXEHzk7qY+AkBc8J3jPvP45NrG3lH7mO1EFYn56uvDXH7D8BjmJ6tfwR
hzoYKwn+wbPzP+j8EHBL5CvVS3vofaHQpXgnzKQLqAUQXZv3gVJJfRJfRdNt
ecXnqcOgEhk8MyQZ1OFQziw+KArJoRZC5Z5YJWzOp47AQX1293jAfWpAINVc
fWpfZmsdcK9yfO9yfBW5CD3neH1ymZ5chKRvhX5z5jpyMawHNAZt6jNyMRod
kgXa3ibySBg+fE8T61vII/HzTungmPgFuQT1b/oL9I0vySXoQddo3ayRXAqT
T67j59+vyKVwS97Sk/rFRC5DY/1ovqW2lVwGe+HpxQBFG7kcD58Y3fhj1Do5
buxuiHdSvSaPwqf1JovZSK2Lgk//1CVX+3byaDh3CdVaKbUuGrIz8UN+GsZj
wFaVdstqGI9Bg+G25XAf47GoX3F9LjEzHoumAROvjd1BroC7b9CC1JVap0DW
ROzRMC/G4+CmtauIDWQ8DnmVaR3+QsaVkNeYzRMyxpUwpGcVFyo68BftIBWo

         "]]}, {
        Hue[0.8077674149945295, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1zn8s1HEcx/Hv6S62k/wKp1vJVLQWnZ/50b2czq9D5Q9sSEViRfWHU93S
/VHHlthZWZlIqNbK1OV3aJWtmFI0bSUkhDhXmx+HSbv397N9993j+/x+3p/P
tuNnok8YMQwTsPb8fxvWrDhrizb9iNznJX3Akvx2zwhvO9kEy66PZsxSZ8QG
m4NjM2gv/GwNg63B8Vg3V1BpQbYDt6qF0XoKyEKsqNsz+VnmZAesZn/T/lKZ
kh3BO+2it3ptTHbCSm6avYdcT+ftwFz7cJJOzaf7OIObWZHe2WRJ3oUlrWnh
koxD3o0FcXteQxef5u2BCaPSmc3/pXlu4L3tcfctWk99Lzi3XMZqqx1ovwjL
g6FJvZ3WZHfwZstTcgSsPcBtPra40dGW7IklmbNR41Eu2QuM3EU61i0ke4M7
5GhlKTYm+8DOK/38gMaJzt8HxlN99rK7H9kXbWKeU/eYjOyHVytTDmWpiWR/
fJWvWviqT5ED4DXxR6+puEjeD+SbXAiQXiWLERxTMjJaV0gGhu6UVAlVxQYr
137/WX2DX1pGPRDDteYDNb2V1AMRb96ZMHTyIXUJdMzOrnv9j6lLUP5G6/lb
Xks9CGHC/I++B59RD0KGKK6ubUpD/QB0/fYT0XF11A9ga8eXvtyb9dSlsPnR
4aZ/0EBdCrXdsIJf1Eg9GBn1CUbJiU3Ug5Eymt0gMG2mHoKYofms1FKyMgR3
F0WRh2xaqIdivC++IEdBVoaixP+wRWw328OQ1DkZ32H2gnoYij4xaToJmQkH
d3xq0ucc28Phej1WJSlmuwxPkhsXrtSxXYbNojyTtA9sj0DbO9mm7yNsj4D2
6fB7wTTbI5Fo251xTc/2SDzX2Ex7c1qpR6HMqFpxaQNZGYUahWTmvlUr/gHf
sBPE
         "]]}, {
        Hue[0.04383539249432289, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1z38s1HEcx/E7Halu7hQl06bmDEN36FB0r3PccY5hJ5nNLF1Z1/KXfozy
vZkstWlCnRi1/Ep1C+VXC63MP0XrlN2STMmP4Rhpfky1e993++yzx/f5/uz7
+R48lZ2ksWGxWOH/1v/d8pglvQuRKoFQ3UsvwHYLYm8O7IGF9mAPrFX9+M4l
8+HGDPtPDXqQnbDjvJfwfrkD2QVzhsGFd3vNEovdYJsVkF/vv5O6Oza3+vYH
/rGl7x3CduQXcvI+0rwH7IOqxAk+NjTvia3u5JK4ITua98JMiUyk467RvA9Y
tekp2dJhsi9+b61oJguqeiz2hy3DyllPsJ4Xgm125akdXcgirBddGcnsciYH
gD105+14HY8ciI1Wr+T0Tut9g8AJapgsqnAgHwHHtFKddZtPFmOjZrixZWwv
ORjbemV3L5pMdL8Q/PTi96t1Avq/UFzVGU3X5GLyUXAqeaGOk0ryMVwWJx4+
9yqVHIZS3xNNoalZ5HD44c2EyPUS+Th+9dk1c+d0ZAnCU9IKXTTFZOBrgbO6
bLrUYgY4WxEhlO6rpC7Fkoy3peA+oC5FTr/Ho3jHOuoRKFvSSAIWG6lH4LG9
SPNN/4S6DPMrDZ7MhIG6DMlJ9e41Z55Tj4RQOx5hfNpCPRL6L2JjymAr9SgM
Xnj90NbYRj0K8Z9rtfqOF9TlEIzOzZqvv6Quh5bldDM4uJ26Au+dDW3qUTKj
wOp894FcbQf1aNwKWS5enSUz0ej/wMvMSeykHgO90uDr0U5mYlA7U55h4HdR
V2JanCtnZZIZJeQqTnV0s7XHooNR1OimrD0Wu7w1aUWCbuoqaBflfEESmVGh
dCx0WctYexw+ed8whNVaexxO775n395j7fHo6/RrChix9nicfJbnnWHuxl8Q
Xg0J
         "]]}, {
        Hue[0.27990336999410914`, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw10GtIk1Ecx/FnY5vTMEZJKc6Vo9ZYZrq8ZGbPz9vc5nQmSaYJKc5uyBxG
USCtm1loqJkVlEu8pSh5yTRNNBJThgha4QKrF5VJZVaE2apl7L8Dh8PnfM95
cY5/jjHVwGUYJmp5/l+dY4G1WxCRUSIAbUAgbtJUXuaQhWDE0rScNX5kETgD
2lVVSinZC3+vSX2zKiVkb9gH+cLJjYus02K4V21qKHG4UV8PZrhwb0EHnywF
P91QqzF6kTeA31o1mxbkTpbBo0AvSn2/OOi0HEKhF6/ipGDIaQX4b40FY2Yu
OQCOi+m+ysN+5EA4ChlF8Bt/chD4xxvdzpS7ejAEozOGU7UcshKM+ti+dSWr
ydvAsb5WMdmu+yHL57srbCs9yaHgqSUy2ycROQx2S6Aj9KCYHA6h9xWBjWXI
28FJKfd8vjRH/xOBVWmFpU3FcnrvDvRPDX1rHgE5Eqw1coSXu5u8E1N37MrU
gWxyFCK/hweOl5nIuzClGMvPnCkisxgPmd08bCwmA9y8FQFb48qdNgMvbPwb
I7Zq6tFI6OFdv1dYQz0a+ldbPA4o6qjHYAGdTUuORurLjpFxj1S0UI/FU8uP
lpbJNuqxyJo3dM1ntlOPg6fA/2xbcwf1OMhs8ZbS8U7q8fjYe7pBbu2iHo8v
Nomu/+596iqoE7Xc+vxu6ioMPhJVf5A8oJ6AtWr2kKmPbE5Ahn6a/a3qoa7G
nvrZ+vwhslkN7/26IFbeS12DrzdzipQXyGYNrNkOn7lpV9di3qfsc7TsIXUt
LrG/co/mkZlEvJsYbn9W4+qJCBka7faYcHUd9H61J4KXXF2HhSfnvAIkfdST
8Pjqz4gwlmxOQtuf6dvIdPVkvHTkpNSZXD0ZrQO3TO3n+/APyTsGUQ==
         "]]}, {
        Hue[0.5159713474939025, 0.6, 0.6], 
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1zn8s1HEcx/GvO5pLnLglm+bH7MiP8jPy8+X3cVzH2oWVP0iWKZuosZ0d
spAfuQyZNUSzaJVwfoXVYllr64dfm0XN8mOaQ6SIavf+frfPvnt+H5/v3m/L
xPSYZA7DML7/zv+35lH7H4ndunr4ttqfPuBPNa9idNQCmtQFt2EyekJmTm0I
nQxJfdPSMWoBODcdL8a94VMfBW9uJMHKWp/aDHv7Iy3ZntrDmrYAZy78ernL
BM2zwvKCjVpWtTOkaWtwGenT8rEUciG0t6e3Xhqw+9libdX7bolqg+7b4cD8
YLb+T12a54Bfrj5Sh36G5p3A3pC43nZ6gf53AlfqpfdwbZHaGdz2Vt3MHXY/
FyyHFaynCnfJXaFVJdLhdbLuBpOGma+iwi2a747fs8fnV2pYPwUtJr1vo/YQ
7eOB3aQ8/U9pptSe4NdXvK5U2VOfRmmhs3Wg3I3aC/lZOTIT61Bqb5jvRT6o
lsRS+8DnrDBIVpJM7Ysenqv7PXEmtR/kAcIrn/sU1P6wWhkaL+suogYyvJ16
8wYrNa0AfHnNBTrtteQBUMacMckRNZAHQDaWE7MqbSYPhMGu5Wa2fSt5IIaX
m4vfjraRByF7vDcq3+gJeRBstdc5S8wz8mDkCs4Zdok7yINxZ3XNyODyc/IQ
+JtGNjamdpKHIH5Ae8pP1EUeirq41qj7gm7yUORW3sjlD1EzYVA25bVNnVeR
h4Gjsy+u+0bNiPBh4aRpfEoPuQh84/R3m++pmXDovviYuOnaSx6OS0mmjxS3
qJkIyEXyBJtJ1iNQbLbokWbSRy5G0mNV1ko0tUKMDrXetrKI9UhceyU1blOx
Homa2pIf32dYj0LDl9KgwR3WozBwcNeuzKifXALBBUd7pR21QoKa2c6WWPTj
L6WjDK8=
         "]]}}}, {}, {}, {{{{}}}, {{{}}}}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{0, 61.}, {-80.7522764847954, 8176.07825449291}}, 
     PlotRangeClipping -> True, ImagePadding -> All, DisplayFunction -> 
     Identity, AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
     DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{
        FormBox["\"Fluorescence (a.u)\"", TraditionalForm], None}, {
        FormBox["\"Temperature (Celsius degrees)\"", TraditionalForm], None}},
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> Medium, 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& )}}, PlotLabel -> 
     FormBox["\"Amplification curves of R-MoH9 reactions\"", TraditionalForm],
      PlotRange -> {{0, 61.}, {-80.7522764847954, 8176.07825449291}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"1\"", "\"2\"", "\"3\"", "\"10\"", "\"11\"", "\"12\"", "\"13\"", 
       "\"14\"", "\"15\"", "\"25\"", "\"26\"", "\"27\"", "\"37\"", "\"38\"", 
       "\"39\""}, "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #7}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #8}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"], 
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #9}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #10}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #11}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #12}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #13}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #14}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.08250000000000002], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #15}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.922526, 0.385626, 0.209179]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.3523253333333333, 0.3137493333333333, 
                    0.46756733333333333`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.528488, 0.470624, 0.701351]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.528488, 0.470624, 0.701351]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.528488, 0.470624, 0.701351], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.5147193333333333, 0.28770266666666666`, 
                    0.06825800000000001], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.772079, 0.431554, 0.102387]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.772079, 0.431554, 0.102387]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.772079, 0.431554, 0.102387], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.24259866666666668`, 0.412334, 0.521566], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.363898, 0.618501, 0.782349]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.363898, 0.618501, 0.782349]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.363898, 0.618501, 0.782349], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.75, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0.5, 0.],
                     FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "RGBColor[1, 0.75, 0]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.75, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.75, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.4317493333333333, 0.2521066666666667, 
                    0.40935800000000006`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.647624, 0.37816, 0.614037]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.647624, 0.37816, 0.614037]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.647624, 0.37816, 0.614037], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.571589, 0.586483, 0.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.38105933333333336`, 0.39098866666666665`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "RGBColor[0.571589, 0.586483, 0.]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.571589, 0.586483, 0.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.571589, 0.586483, 0.], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.915, 0.3325, 0.2125], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6100000000000001, 0.22166666666666668`, 
                    0.14166666666666666`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "RGBColor[0.915, 0.3325, 0.2125]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.915, 0.3325, 0.2125]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.915, 0.3325, 0.2125], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.2672148173956843, 0.34800444289592275`, 
                    0.5666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.40082222609352647, 0.5220066643438841, \
0.85]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    Editable -> False, Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6485525936249404, 0.4144296347913687, 
                    0.048907997212660946`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.9728288904374106, 0.621644452187053, \
0.07336199581899142]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.4911884484706007, 0.23866666666666667`, 
                    0.3353511049170246], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.736782672705901, 0.358, 0.5030266573755369]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    Editable -> False, Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.18684294025131137`, 0.4766666666666667, 
                    0.2861392881649977], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.28026441037696703, 0.715, \
0.4292089322474965]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965],
                     Editable -> False, Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, ",", #7, 
               ",", #8, ",", #9, ",", #10, ",", #11, ",", #12, ",", #13, 
               ",", #14, ",", #15}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "True", ",", "True", ",", "True", ",", "True", ",", "True", 
                 ",", "True", ",", "True", ",", "True", ",", "True", ",", 
                 "True", ",", "True", ",", "True", ",", "True", ",", "True", 
                 ",", "True", ",", "True", ",", "True", ",", "True", ",", 
                 "True", ",", "True", ",", "True", ",", "True", ",", "True", 
                 ",", "True", ",", "True", ",", "True", ",", "True", ",", 
                 "True", ",", "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellContext->"Cell$$17061`",
 CellLabel->"Out[8]=",
 CellID->1810796092]
}, Open  ]],

Cell["Plot melting curves for all reactions of sample \"R-MoH9\":", \
"ExampleText",
 CellID->2063762238],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"meltingData", "[", "\"\<R-MoH9\>\"", "]"}], "=", 
   RowBox[{"rpa", "[", 
    RowBox[{
    "\"\<experiment\>\"", ",", "1", ",", "\"\<run\>\"", ",", "1", ",", 
     "\"\<react\>\"", ",", 
     RowBox[{"Select", "[", 
      RowBox[{
       RowBox[{"#sample", "\[Equal]", "\"\<R-MoH9\>\""}], "&"}], "]"}], ",", 
     "\"\<data\>\"", ",", "1", ",", "\"\<mdp\>\"", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<tmp\>\"", ",", "\"\<fluor\>\""}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[9]:=",
 CellID->91809002],

Cell["\<\
To highlight the melting temperature, calculate the negative of the \
derivative of the fluorescence with respect to temperature:\
\>", "ExampleText",
 CellID->1650252892],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"meltingData2", "[", "\"\<R-MoH9\>\"", "]"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Values", "/@", 
      RowBox[{"meltingData", "[", "\"\<R-MoH9\>\"", "]"}]}], "//", "Normal"}],
     "//", "Values"}]}], ";"}]], "Input",
 CellLabel->"In[10]:=",
 CellID->1481199410],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"interpolatedMeltingData", "[", "\"\<R-MoH9\>\"", "]"}], "=", 
   RowBox[{"Interpolation", "/@", 
    RowBox[{"meltingData2", "[", "\"\<R-MoH9\>\"", "]"}]}]}], ";"}]], "Input",
 
 CellLabel->"In[11]:=",
 CellID->787523271],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"interpolatedDerMeltingData", "[", "\"\<R-MoH9\>\"", "]"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"-", 
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"#", "[", "t", "]"}], ",", "t"}], "]"}]}], ")"}], "&"}], "/@", 
    RowBox[{"interpolatedMeltingData", "[", "\"\<R-MoH9\>\"", "]"}]}]}], 
  ";"}]], "Input",
 CellLabel->"In[12]:=",
 CellID->1165463827],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"interpolatedDerMeltingData", "[", "\"\<R-MoH9\>\"", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "65", ",", "95"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Temperature (Celsius degrees)\>\"", ",", "\"\<-dfluor/dT\>\""}], 
     "}"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]], "Input",
 CellLabel->"In[14]:=",
 CellID->1909800384],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
Oo5kYF37PJlu6gnjz+Tj2tG9j0Vbsu094du/tiZPJzLQuSR6v/p5QqdelDCr
MxmKfpU59zp6wps4FYcL6NUbdgeOBXrC4X+T5P00MiQ6Pz4wmuwJjZGVR/rR
29xfJl/N84T6EOP9KgwyGNn3rJa3esJTbxfJKlcyFAzJekdu94IS67yuT15k
2Bi8ZJQ76wXpahuo4sFk2HBydF6y3Bv4yvrMn6AVfrSZ57d4Q8q2mwedQshg
fIEx4fzLG5KU9uy+GUoG6tdM/pPKxyFmE1lEK4IMhTzL70Pyj4MPd1Y7NZYM
iz1yVoP5PjCWaNX8Fy0q3GY1+dIHvNil63LjsH6pGJ6Wu+YDo3HDjw3iMf+r
cpJ6X/iA27/Se8PoA+5bppa++cBgZPDtFCYZpjT/tURz+gJ9cf/1HSfIUCMl
IsNQ8QXHmTdZIQlkuG/BLmvt6ws9/mdObUwkw6czPW3uZ3zBdtI2rgYtOT83
3V3pC9SfP3y5TmK9TZ1vnmXxg6P9a46eS8b9poUo25n7wfQmpqlWChn6qzM7
zzr7wTmbZf3P6IUcncB/gX7wtX1q18Y0Mri+PxxMu+wHPq+6NuZmkGGHg8kV
tzE/yCi+M1x0hgwnGquCj5/3B40RxX7js2R4rft3pajUHzrl87pG0G92tQau
r/cHqatn3245R4b1t7ar+P72h9LM6PulFzD+C5of+FoEgOXb+TsWF8kQpJR3
S9ktAGa4A4om0d7buFP5YwJgP9PtgvplMlysztzgWxYA/TX9p9vRrUZ3Xw43
BEDCkm1q4BUy1FrS7DP6AuBt0NGYh1fJMDgeRT0uGAh+95pCqblkEI4drizc
GggiE4b+82i27G9cfEaBULW1xuvCNTKUKfkbFjgEgr37XhftPKynznonRQsD
gaXwvkM3Om6Ue3z2WSAU9qtaRV7H/FhnXPvrUyCM2cgefpZPhp/bJR+K8wXB
Wr0/oq9ukrGuxTXI9AfBYZ7zpR/vkWFkYfX5wQshQG/IbPe6j/GwtC/+/P0Q
iDhxap7lAa5nMH5k6W0IFK+E62+vIIOpl2bBMmsorJ2270h8RAZpA8VPvd6h
oHCX8leyEvtZ2PMX9SdDYb+3hfR9dPRZ16M1+aHgPazn+bUK61Vch92Pz6Hw
tltuZc8TMkQqGKlLG4fB4HlJuRZ0Urqu4WVaGCyTRUwYT8kw02Pwd0t0GKi2
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
Pcn5H9BMj0k=
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.560181, 0.691569, 0.194885], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
9dmdLtuZ8Pnx1qIWtEHWrKLdTia0Ojy+LVJDBJ+HLQq6GkxoeBKe9xh9bXTP
VoW9TKheZ5pjXYvjizP+yKXNhEfPujJvvSYCWclSv0KfCVfX/0tVqSeCzkPL
Pf2HmLDqO7ysRQv+eWzscZQJvq/Oj9k2EKHRoK5k1pwJxzxEdRLeYnwtTGUu
UJjA9UZ14EcTEZx/nfnQbMcE7yAX5fvviXD6m9WNS6dwvIRi8sE2Ihh13z3T
eZoJhxX/hPSjpz/cKRbzZ8LWdta7de0Y398eqp8PYkLvjkxf749EsL2ynKIa
xQTTL+2Vap+IILfi9Cj3EhPKH0uNNaC/Xc+3ykxlgkIiU4jZi/XgQJrNpXQm
LGtPO6T0EeHMY5afVwbO9/Ia3t/9RKiRTmafzmaC/EmSetwAEc6zic/X5TEh
yeCqjcIXjDe+y9Jpt5mwKD4Q/Qy96vF9MfpdJrhNbi0mDxIhkdttaHMhEzpr
PTrH0Qaz1VHDRUwwznjEFj2E63vh6VxmMRNkTQ3Jj4Zx/qlnrblKmRAvcyHk
yAgR+gWszO4/ZMK/mXd5w+hQ5cY11DImtGcdnxf5SgQ907g1FyuYELsQcMPv
G9YH6eDZt5VMmC2+/1VzkghLapJBJm+ZcMH4rnATOu4I83t6IxM29mTrMaaI
kHF4kDHcxAQj7rRLcdO4n3PnnD3fMSHZJkR/4BeuB5dDnUk7E7bzmKVfmMN8
nXUa4OljQuUNw2qZeRyPlXQt32cmkHbr/niIjr+15v7qfiYE2O0y+vyXCIq9
8dd+DTCh7pHolPoiEei88vXxw0ywOrRuQz36R1LyiPMIEyb6eQ4cX8J6928P
n+4oEyL8OLx/oS8cEtbk/8qE9WsWr51fJkJa2BbXTnT+rT+vN64QQSHdK+fG
GBO0NaemH6DVLk8P231jQnPjmNRBNhKojhDktcaZQGcMmvSiN7f+HZpC/579
dOoUOwlchXdJZU0w4Vx8x/VVHCRgK5p+c+QHE+49rv+lykkChREJ1qVJJsDR
auk69L3o8KSdU7j+g89MbbhIEBfsI1yL/rf2fuZZbhJoey0FfJ5mQmLOnYYN
q0iw1j3V1uEnE+S0smfuo1VfPSkbRJs6ph7qWU0CD8/b9a2/mPDpb6KfFw8J
ouu9Wfq/meCZFHOLi5cEk4F1D+6gU58Gz+7kI8HjQbFTbjNMUCL4ydWiRa8J
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
lkx5OJjhu/IP7WTUYF9cJg//A27DiFw=
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.922526, 0.385626, 0.209179], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJws2Hc8Fe73AHBEWUnIjDJCqNAyc5IiZdxJJXvda2/ZM5s0NJSGCAnJiqis
JCslIyE7W6mU0e98Xt/fX73er3u7zzrPOechbu1GtGNiYGDYtJGB4b9/b9qm
MjGAMThFVEV4SVvBrqkvi91EY8gJ/p+fusl9LbQzBunA/9ny4sAV0QBj+BPw
P3PfuXwiIdkYNob8z7q1/LSM+8bQG/o/h0zcSnhaYgwK//+5+6LvqO0bY3D3
+Z+tV4iagn3GkP7/bnD9bHm/3xgEff9n2WGbKLlBYyj+fzP8O97agv7y/+4V
keV3GzKGZwZMTW7dllCswm6x9asxVCiOquWg4ykzj56hr/emUbh7LMHGs22B
MmwMFD1hwRy0RkqR6jJ6Nsg1wq3XEvjyL0fcGjEGK78rV+37LGG2yfudxij+
/uE4w6TPltA4RuUbRA9VGxWN9FtCBpPq+fAxY5hgm3hOG7AEvx0i2ZLjxtAq
YuS0Y8gSjDXW5hrQyT9i6pmHLUH2zOBhxwljkEtNbRAatQRG39dh7JPG8HDJ
ydV8HOdfGM1j9A0/33yl3HfaEhJaHM4tolVrB0305yzB9tvJh1emjEFKc+2u
waIlbJPkOtQzbQzxUXkyI78tYU5rISRgxhjYCWoOPis4X7PON9tnjcFy5Jbh
4X+W4J+WdsZqzhienGnj099kBYRn/g82zBtDhub9H7c4rECu4+x0FtppQidA
hNsKPrPtCJ5aMIbLieshj4WsoESasTFx0RiWYvjWKsWsIPHYCNe+7zjfkysS
fyWt4Ejwo3teP4xBTVTdftM+K+C/Ffdt25IxMCtejew6YAXzZU7KFehi1hq9
D2pWcG9hX/3qT2O4xRHVfF7XCjbYVkxELxtDo0nv4wJrK+gPu6Uo+8cYAm5W
bPpLw/HvBF1oRq/fc+Tw8bAC+27g2LJiDCWM6ux/w3D8JQnyU3TL2fMszHFW
ILCV5Q5pFX3BOEcz1Qqa9N/uvbFmDFS23DGtB1Zw3+Gxn9q6Mcxc4ApjfWwF
AVFJr/rR54t0ahlKrIB4340t9J8x3Mk/lS9bbQXyNQSiOAMBnnCldY0KWAPz
5/3pdegDXR1eJ8Wtof/3tlE7RgJoFUnk5stZQ7JSn08eEwGkH3L0umpaw+c2
tamjGwjQ5H24cc8Ja5B1TjfvRe+9zn5h2tAaarPNdFlZCHDiffY+G0tr+Cky
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
ww/Ho2ycTYJJIPrPhZ8f4IcF51Mx8+hAOXr8SA8/xB0lSsIuk7Cmoaf642N+
kN995Il4CM43OutHyiN+eLxW+2M1OuJ6oPHEPX6wYVWn6IWSYP3O7cnTEn5g
m1LeNIkudvQ5TWTzQ3bXVp2LYXiflRKEAhL5Qa1cxkYoHO+n8v1R7cv88CZJ
PPQWmtvzV0epKz94eTPyNCJIWPl24FnVaX6gm/O3DKCtygvmTPT54YjsMgtH
FAnOo5mhgdL88Innh+QNNMN45+IqXn6ImJ9V336FBDm2segNC3zQXDvsZxlN
wlVxe/YDeJ8sMvrTf6M/h+l+1Mrig6Wgp/VxMZgfW9VmxwP5YOfhht+NsVhv
tpvuX9Tgg77/qtccj8P+LTE4zVOcD1zoJTtn0YsKD/gS/vBC8Ui6u2gCCZuk
HA/klvKCTnNS0h30uPsob3ooL7wruFJ5MBH3n8tqbpsZL0i4+H7xTML+dDKH
S42DFxJWnXTsu0qCsP9yVKc2D3w3zJLwS8H83P5cuJKfB0yyJns2pJJwJaxq
crKXAhJ7HZU9r5EgwVUNUiYUKPG49E8kHftJ52SuJX1uEGx9VPEI3UJbTN/I
xQ2uVE4r+xuYB4T7hfQHXKBSHttxPwP7w5rMtyc3cUH7TFb8qWxcv+HeTo1p
Dti8650m103MR5fus6WJHBATuulHOTouZ1jLai8HHJO+Y8qai/V3TLGlMIod
xk82S+flYz/dVtudRGWDpe531R+KsT88Fq30JWtF47S4nG3ibRJ4VV/F9jX9
02hxcGLuKSFhnbmOk87wskYU989L0aW4HsdTK8Z4ljTWaHLp/FeB+yv80/C1
+m8NpRq51+41mG89Zb8nWL9oXGVzviJ+l4RLs2lzN15+1vhtVKnWjuYql/6S
nP1Jo2lONWdNLQmc14RYZtZNa+ht0nOor8f7xnhTsCNvSKPCM17c6j4JDZJL
7xdeD2jQ2vqf8zbg/q2r2vqNtVfjjaX5DvNGEg4NNJW6GT3UUKu4OcXxgATv
16XNrHuLNLL/vb9Whu40/v3awyuziV1/82GyiYQNXiu3q1Y3NNmmOy+voNX9
U96CeWfT/wBOyw+r
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.528488, 0.470624, 0.701351], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
c2U7Zi+ieWzf+v/3/7eiSe2qDwnYlqRM/Pd8G/PZsia0Scjo2Vr0JvH20zaP
CGCqLmuVoRsnyvxm0an3AvbfQoc8OE1Jrieg+JdhWS5aOdVPTfwxAW/ZQmJO
owctKTyV6F9dHFVx6LPyaj8OPsF+dMkOWIf9YPR707sBNHXRWWcF++dv40xp
0FOcDxKh/xtdcuZt5roGAqRvW0fMoB0dS32voXWeRP2cRAuoZZJ3P8P+s3h6
fQr9esVHtRXd6SOROYuObDPfdKwR84PzYtUf9I5clZkF9GEpNf5V+P5Rj41v
M54TcL9uuIQHfVFr+p5sE57XOipjpdFmXG9O1aEXva9l7kKz9ZT4kF/geTil
qMcUXV2YYT6K3rzlrbUb2j3IWyXiJeYdkAQT0eL7zTaSXmG9fvLdcBPdTto+
fRP9/M+4bjM6YWjDG93XeB7Kjrs1i95TOlnyHp1WudtUDPt/IrI1g9mM52OC
U/kQmiaabnauBfNo00pOKZpz3HP71lbMe5UtW76hH94/zP0UnffGdUIa80LW
Yn3bRBsB45kGivnoni0Td2PfELCvvO/KKPrkXHO60FsCeGmnzLZjfsydTjPd
/44AQWEzmxfoW/Ye2/rQh3Us64QwP2xUDm3wbSdgYSCS8EI/a1nbeuk9AVW3
pNQkMS+CL40Vq3UQ8KI193gkWsn99ckXaPOAXQsD6Kw1qYd/dhLQpP/oZjHm
h6MBV4tJDz6/X/KJJ/bnVdNV1pPo8id+ctPoj5YrX0/14v6/Jcsy6L/+8fnF
3tmH/RSyVzLdkAlnwmZOH/+A9e/8tkrciAlvE8YlNn8kYLpzu2Al2uTykPbR
T5i3eta6Y8ZMSLr58RVrPwGfdsmzpR3Eei7vtriOZit/lqVigvtLffuI4QCe
L++pTHej9V61BnxHp6l6CMYfYkJ4x0vWk4N4vk9+3vDVFPN94Nmp7UMEdBuc
E7lohnk9Vi/2Dq2iFbjH3Bzr7ff9OwGfsf69HYXXkDEPWas0Bb7g+WDoaP1T
dPH60he16JZMT/koCva3TOGXpWE8D96qOMBGxf2TnCWS/BX369qFckUG1l+R
e9rlCXyfrR15yYYJ+lXOwvqTBEwVmu8atsX97on9zSG0/zbyYKsdE353MZ7J
TWO9zUZG37Znwhj7vn+lPwg4Z3fmR4wTnmc36qVQZwkQPbM8H+nMBKfNmoK/
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
zP9D1yXYmmi7ycD/ANJTR3o=
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.772079, 0.431554, 0.102387], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJws13c81f/7P3A7o7JpiFApSrQjehQiEWc27HnOQVZG2ZvKSkUSCSmSVEIq
lZAGlVTIaFhJSMoKv+f39/785Xa/nZfX6zmu63peT0V7D6oTDxcX1xt+Lq7/
+5vueJqHC+aQnn2bsf2fBVYOdPz6SDVHD3/T//ctD9UvN53M8U3oP9vGdJ5Z
FmCO7/+zWGbKnlOJ5ljA958Nq2U4WZfN0fA/h/RdOHWr1BwRIv/Z85dft+Mz
c+gu/8/201SdRW3muKLwn2vdP9lebjcHW/4/r/7qEKXaRcYj95+55gwaXhEf
+59bl66W8fhsDpnSPsnhDRa4vU3YRvyLORxjG7+EbLTAScbg1TvEzP2TMnGb
LODg3TjC+GqOn4LsO8JbLLAjqWT7BPHq8iXlAtssIFWUEnHhmzn4DokrBWlZ
4Ge9z8sd3eaIG9o35qJjgboeplQXcYn/i3XvYIEsnu1W4T3m8B+LbyzVt4C/
wtJ85V5z9Due+SC61wLmO2aGaoln6zsMuk3JfA51bWX3mePmcje5DTQLcPs9
CRPuN8d8N93DkwfJ+G9GS5h9N8f1jmKRMScLnHrFsvhF/IfXNFTliAUcv+/N
OzNA1mPZ+sPNPhaQVl64peWHOXLWPjK4EG2BoZ0jIQGD5ghRPMK8k0jGa9n0
TO6nOUaEbBoNzlvgWGrqIbshc3TcXTj2ocgClDvHcniHzbHv+KvL78stoPrm
8I8rxFYajWWmTy3wSUgheGDEHBbHM2UKP1mgdBV3XfwvYhFXu8R+C8TrfVu4
fpTEQ3KQ5OAfC+gGX80++tscS/1db0hKWELmwonv0mPmOPfR6FzHcksMl7lu
qCB+rubSvVzDEtkj62v+/TGHwM1jFZLmluB1rOiLnjDHXsXarYXnLNEedkFj
9aQ5/slXH9p5zRKlmUHHXxBvEuP9ZnrfEs4fISI6bY7XDeZqH79aQndMiX6L
eDTdaoAybglZcf5M2j9zfDpULLZnvhXqjZ+rn58xh2/p0jMXtlrhMuu6v9as
OYzNtg1PmVohICrhcTtxTcf5282OVqBe9hAKnTPHQxudDpUgK6hVUaiKXBRo
NW1bkmFrDb5PGzOeEq9/dVH05DFrtI9LdztxU6A6s2ihf7I1EjXbfAt5KPjD
d3jVvsfW+NSoNbCLlwIBs/rf6R+ssdotw7qVuH5QQ6Rv0BrV+ZaGgvwU2Cn/
kg1abIM/S7sWOc+joDJoXcFpbxtYCnTfV5xPgcuIMWOzhC3UPv3kTpemYFF5
ipTLU1vUR3Enxq6mIEQlO5dbxR5Z1sElamso6Nm0emPpBnv4bJtsek1MM/v6
1l7XHssHR2QXqVFgcH1wRynDHsdony9fW0dB6Nyh5ypR9lit9Oju8w0U7Fmc
dp/y2R4nHgV1iOhQsEMig//WOQfYpk/M3SROf+wY2JPtgC1HfZTouhT8CLTl
kilywHzTEf0JYn39xLO7yx3wdZUb6+JOCvIWD211rXZABVf/CYCCc3ra02p9
DkhscyjqJv7eGXJZd9QBjqVdjXG7KIgeyj+lM+MArUSLX2t3U8DxvnNvtaAj
xNgfJd8Sn3XJU+OSdETvLtoWXz0KBD8e//J0mSNS/hgHPtQn6zu/aZHYRkcM
WGrx7zekIP/H1rL7lo54vKVMZZRYPMbE8I+zI1LFNhinGlFQc9ZAbqmXI3bX
rEnq3EsBr2jPabVoR1xQW7zYw4SCz36t122KHGE8Nb42mULBUqnzF6TGHbHn
zCqKJpWC2as5F/vnyP+vZfg2ER85uia9QNAJWta3H0rRKRgquR4+utgJa6rd
9qczKXCvixDL1nbCCosMb60DFFyW8ej9pOeE5WPPUz8Ru2d9LOMzccKiVSpd
yw5RUEBfZrjM0gmCJ7945FhQUGgRuNIl0Al8ymJn9SwpMGLvfb0g0glcD3Qr
uom9is4czTrphH/0I+3RVhSsWn1YQi7FCRM/M7hUrClw/nTxeky6E8ZiXqyo
J95QZ7GzM9sJIwqTRhwbCk72pzYoXXPCYIXKEWFbCijGTeM3M5zQR2Gevk58
9FWexPscJ3wdiLprYkeBWIVv82iBEzoj77T+JN64wEBH6JYTPtwVU9JwoKDv
dyfv8kdOqFv88napEwUL78w5/mlzQvXtyQ8MZ/K9gafWLV+cULVv9fRf4rBT
MXN3+p1QFhytt51NIXVp3hbGXydc+bKz+aELic+JMb+d4s6IKij9U+dBgdzF
KKM7Bs7Q2561rfU4WZ85b9VFBc4ope6L8wigQDm8MKmg2Bkr3CY+8geS+D20
LXlTqTP4LlH9NwRRkCJ6wGHrI2fU8M0rOxVCQV1SNmWk2Rn6bzw26kZSkDNk
aWvEy0Lpd7nIZuILgpFmzoIsrOB90eQSRYF0GQoDF7DAt2WFd1o0BWkvI3Li
ZVmozWgpGYmloOmzYpahGgt7WLvUc+MpmL7z8okihYWysKHg7QkUaAq4upQx
WFh1IaPhNfGPH5dDdh9mQaDhj9u/RAoGvD58hwMLzzYUXmecpkCBffjlBx8W
jGYl1gimUqA901DpnMqC8blu5SOXKLB54bBP9h0Lej+KFMWyKYh5x+Vy6SML
O3b5KtwhDls9ccL+Ewvrf/IvnbxM8jstXfP5VxakDFQkovMoqIq9qrDoFwud
YxyuzAIKuO8O+z0QYeOj8YbZnYUUNH5xzPyykI032VPTX4k3mD/W/ifOxlOT
U+Oriyio/rXms/giNq7lFQ2VFlPw07D+WZUyG9704fZXdygIh6aEwnY2XAvL
2zxKKaiIES7P0GbDkSusReIuGe/CF+8W6LJxoEis+WAZmf/XaZ+m3Wzs4Nvw
sruCgodZqsyOfWxsPjxVH3uP5MevzZX8+9lQL6muU62kYF2MSqqyORuKlrRq
z/sUTB19eHcnnQ2BUp97/x6S/bQvPTNpwcackE75pSoK9Kp/lTVYsTFhw393
9yMKAh2kqWk2bPwQSS2Je0zBzsxPCQsdyHwdyq9KPaVg/ulMM38OG8/vhV4p
J/623nTVuAsb1aJGuYdrKJApuOnt5sZG6f2WrOxaChJVE9y2erCRLjl1bm09
BS85hd37fch4BvCohvh8Z+N7Z182fB7H9ls+p+CZIyXN14+N/UektRNeUGB8
xfOU/zE2HuhZOq58ScElmwVVLsfZWLMkN+EhMV1N8Ak9gA2+Zxqff74i+fZX
dtuCILLemf5CMQ2kvv1dW/SJuOto1Qb5Rgp4BLNHsoPZqFxuEr3/NQW51tkD
oqFsrB5PKe4lnpe3Lvse8bmG1o8hbyh4NbVo1eEwNjwDWKo331IQ1C6UGxrO
Rqd5Mc2wiQI2S/QCXwQb+1T+BHURl/IetQsjrpjRzvd/R4H9rU2To8SrmiNe
izaT+uFJt7OMZONs4fOJq8S9aEp/QMwdLqaE9+T8UyrOkYxiw/3AgX0txCPS
/YF2xO3rsnw8P1AQuyRsZT6xMV9PpuBHCiI0/C59IS5vU3uWTdx54MV3yWg2
VtzyHtnWQvI1OYhPhzgl9t7it8SVbfHDlsRc1lx6nFaSP1umC48SH9lk6Mbd
RvIr99mWcOI24cRz6cSOiqMp0cRGX5qrND9RIHwr4FEYcVn50v7nxBJUuwfe
xMqJ9uL27RQE8+WfsCBOdizQmiI2rjdS0Sae1RpxSOmg4Fjm3nPixG7iWxNU
O8n5FXXtXScZf2tfcFk18VSg09cc4j1VNV2HuyjYHx32xIq49KyI0G9i3uxJ
T1FiJVfqhlOfKcgUGtwz5c9G0q50C+UvpN+gJzvnEP+T/Rx1n1g29VGyIbHL
0Kpi2lcKXr8+XvudxNfHmiMffxBv4H7Ed4JYP6OUK+obqQeqSftXEisY7aaV
dlNg4vCGm0HiM17+RJBJDzkPju5y7SfxOzX2+ko38WyATtcx4ubLVhNSfaTf
8PrQm3yUjZPTxzJ9v5P9nTzlk+lF8uvto7oFAxRoPKNvWEzsdE1g5Aqxcvy1
qdOebIBxdveHH2R+MyOFASRf/hbf7NsyRMH1AP6Tq4+wcUK/QOIVcXx3ZWkS
yS+5thwdu2HyvqjgeWOubOjxp545NULBU0fVlaUkH5MtgnZ+HqVA/rrSLgk2
iYdfvi6+v4mf7iqyZ5F4ifE4JzxG8lfMfWeJM4nnW/Y/Nv0h8WE61LHbiQ01
wb1pJ8ZJ/JgkTBvYs1GVubtafoLUHwmZq6F2bFA37vh5hzhnYVFAmS0bx6zX
63VOUvDg6lz6UlI/5o+tdj86Rc5//Yc9e63ZuHRCKV1wmqyHbNwhX1Jv6kql
hzf8o2C5jcG9p6QeHTIWXVJP7Phu65Xew2wMdgkaWM1Q4Ba89Z4AcZgvj+co
8VYr/T/Kh9iQFPl3IXaW1Atv60O6B9nIz/5TKzdHwbKq6B7GATa0tgyP3CLe
uLMy3YXJRsPL/qWGXFRkuOVrrqCwYWv3dU878c8Th2w2k3r5QlI6P1ySCpN9
+UYLNdnovbD3x7g2FWk3M8pM+1nw+9k+nLiDCs1x8/vWfSzMg+fYSh0qLuoN
xHj2srC6J3WGpkvFwEC9d2o3C67ru0VLQIWO8PHhbV9YGHkasoltQMVoZrUg
TxsL04N3glv2U3F4YL2MyCsW4ncaRniYUeHOmj+g8ZIFuZS2GAFzKmzm2Vse
eMGC7lbu5E0UKt7dPCaXX89CWPj+nGQaFQtzacL7alkQb/6Sr0Kngmfr5Fvf
GhZyVvleryJ+91N22+WnLDx9mVE6yKBCsOZx1+QTcr7KfK8zOkhFtcTji7er
WEhlB73sIk57qH7w60MWVO6LvvE7RIXhKZnbEsRGtlta8w6T+SRRdvneZ6H1
9vMObQsqwmvz/K5WsuDCb/W1ifiyvJdx2z0WThVG/uCyosJvu2/DrgoynxmZ
kTRitemiIL9yForMCsfUral40GX14noZCzo5OpO1xKv7Ysu+3GWhcezNjKUN
FV7iarsWEVsbOvKMEadaG7qYlbIwnD4ucMqWCr2MB7YDRWQ9Bk+KKNlR8bR5
/U0VYrGd8mL3iIWEo8U411lQbXxVbWlPhRlchC8VsqBvFejL5UDF57aihtYC
FvwDW9oMHan4vsO4xOoaC8nCsQk/iG35rrzOv8pCYfpmJDlRoahhVTGWT/qD
8pQrH5ypiCvt6cm6wsLEnl0HA1hUqC8oU53OY0Hiw7CwPJsKhRfftlkSG4yZ
eDpxqOj3PHBrbS6Zv8Y87TFXKgS8L0nMu8xC3aO7P9PcqJj/83DOiWwWPu93
zNY+QoXVq6PTYsSSR57wR7pT0VP+UEj9Egtr/3lUrPKgYmnNUNXTLNJfnZJ3
fUGcuSlYx5o4oCDwjbgXFVG7b6dezmTh7DbVyLvE37sOehkTFz9r2XzIm+TD
F0vpiYss1DNj+/8Rnzesiigk/tqzOSP7KBVfxYPv2RH/8+k21fehwh/p95YR
y/Cd4eonPvROIrIzgwWNM7vunPKlIubFd+k84r1KI07r/ajgXiXv7U5sfytr
0Tviup6baTrEQTB96edPRYvQpRhx4tTX08FLjlGxJeWH7sAFFkqsCzWqiLtC
zj1+Rvzi58FvdsepeP/6okghcXfQvFT+ACpkormXnyaeFSkzKiDOy3o6E0S8
KMNx2iSQimC5b3lHiDeoShaPEOfO2kg7EJvce2J7NohK+j4tMytiZyNPyW3B
VDQNe1EtiUM/ytd9Iv40K6BgS3zeueFYaAjJf+/JUjbx7T+Basqh5Pm9e6X8
iF9FqXbWET+O/rsjjrhXsjXZJYwKUXbYbGUiC1y5sXoLw6n4IC2wvIt4yYYt
f28RWz4fZ4omsbDpSfc1RgQZfwQjdx+xqfkZi0ni67sU+M8SO3ftWpgZSYW3
ACOonzjMfeQxoqiYfvNXcG8yCxdmso52E+++zHf9LnFpvOmquGhSz/xD7NVP
k3xa+q9FLYYKaZrj+jvE/YWFp17H/F+8lInrp7DAo3VI92gsFX1LfYS+EC99
Pu+XTBwVI4JZMifPkPEdLMutJL43vXH7zrMs7O9zZFqfIPk3ttmL6xwLEfzV
96+cpCL9b7DiVdKPV9OUPfecoqKxuHFfXBoL3DlRK/qIr3K8l/qeJ+PXNUxY
nUCFcd/tQi+yXo/jr+16TixVaOYSTuKB65PQX04iiV+Pna8vkngL9X9lfT2J
CnOeRSf+kviuql0naZJMRdFrrs5NJD9mJZOeDRKXXNrREkLyKaSEoqGeQsU1
wxsPNpP8C/r+gfvWWSoo5d4G60n+P9i6rYxyjsRf+u+aF6Q+TEenu4wS84Y+
++51g+SPkuW7jWlU7KOwlb+VsHDc4kteWToVF6QTmRRSzyoKdh86cIEKowVX
uYxJ/ZsYz10wQXxpnqT5/gcsHDvr7Lf9IpX07d2dxx+T578+U20jjhDYK3+5
moVxjTVdAZlUuIhw8zaTeu3X8MPwQRYV65a5PLB8Tu5HS03/WV6iYp7q0tO3
yXnwh1NcMkMctV1BRKqR7EeFqFNWNhWne242HBpgwUfAa/HOyyQeXPe33h8k
+09vaugifmp2R3fJMAtjORsjwnLI+ZTcOeND7jdHd/4deJJL1kMt7oTCXxLP
CQcu2eeR90UJMD0mWBj9VEHjvULFRu19QfenWPA+FvhAP5+KM49VPhjNseB5
iyvx2TUqHqmte7RVkI2SObvd7AIqJj06D7kIszFi+vSvYCF5nzhzf/p8NjwG
om2Mr5N8cjuvPyhG+ltlEc2GG1R8i+Q4Oy8m96Fz0s1Nt6m4u1En9PoaNuQd
/9xh36HixZGulnA1Npo2vD8zS5x4e4yfsY6c72/O0lTvkni2PNb2S4MNYRGp
d+HlVCiv73bj30b6ldbft2UryPer5O2ryX3L+9q7lBvEhQdfqQaR+1arwRlq
6z0q2orCtvSS+9a1MIkmjQdkv96bbj1rwIal2eitOmKuyuX1Ww3ZEJNvOm35
kJzPBc5rW4zYqBm85TVKHJer4OhrTPqf+6cpcVUkXq7t8xA1YWPtSS9N+UdU
3C8fMM03ZePzQYp4KfH7t//mtpuR/l9F89fex1QMT3aGvif3OcO/Ym+7iNOv
LbZzIs9P1YyU+D4h8bDUJmeM3O+Kz7xJFqmmophyUy+S9CsymsnmW5+SeiDs
mZ9FI/2Kq+ibxFoqZgq9BxtIf3RBa/jmijoqfuxYqH6Q9Ff7hV4nVRI/TSl9
/cWS9O/5iWa9z6jYfFJx42/Sr0V/WfBa5wUVS64FBSwk/eCKA/MbBxup+HVp
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
ztd3Fw==
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.363898, 0.618501, 0.782349], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
g/JtOgEqd3mi/7/R9SMS9f93i2LLFcjj5NGPGDsMlNowKtK8UP8UbpqJsEH5
1zzu/Qc56W/cgSIrDASrNN7J96bDxhx3zTUaBsj5hRMGPnTIWYoMtUH5eYDj
jOg0sgFrldsEEQO4CDf7DF867Nr/9uwBSwwMHZX63O2H5omXQfEHzNB8UsPC
d8KfDmyirMcmjDFQIPX1uGAAqpeXg4k2Buh+uXmn1S2QDlsv/q/i+o6n8u3j
AE4D95kO55xQZBQtSqgoP5+mUhLpvpKQNKxUVkKSjJJKg0rKJrKSChEaKpUG
lZRKaGe0S3iu58/3i9d9zn1d3/E5t/vSTek8dY+WU9hMv4/npYwAExHGN22Y
m0+tqR8SITIUoeusXtX3LSwKP0V2ZOrRPDNC4e/xrSzS39VvTNYW4fzu99PM
fel5/Hyr5aQuQpBjbnGUH92vS9PMzJREWHVz75fx/iw8Ey1OsDwRZhl5Tmig
7ug9bzCL9r8sd2KmNJCFxhuNgbW0vzsCuW0V1C8DJTMyaf/Wvfmk7rKN5h2N
N2cKaT/GVuQfywli0ZrTbzC6VRFiT4N9M0Lo+6WY3/Opov38WHDrBfXLux1V
f0ppP8zuHrYrlEUSf22ndb4iKgruzx67g4Wv64W5Xhl0HqgWh92mZm+9bLZN
UkR4VPzlTWF0H895mSl7SBFre7f8Fu2k+eD++ZxgmlfnOdmaXKSu2uzSVrmD
9uNtQ99V4SzuDzc00BgQQsFEqWiA+l6v41/nj0J8Sv36KX0Xi85h89defSJE
cdD59Z8i6D5NtR3eWySE6TgTh9AoFlFF9se/uAkxZ/mtY+rRLDZ5/GSSbIWw
CnN8coX6yjD7pxsthFjVtGu57B66n1/Nido4Uojg8Abr6FgWzTrd+r+aBKhs
3jgn/iCLXx93lZCl9PfS0L5ww3han+Vtr1T/E+CuwYHqR9TVHv3u/foCtEaW
zpIcpv27yf3AOIEAA1NkpycdZTEwjK8rfMAH9iZNzDzBomtr/B71VXwsLNX3
nJ/EYsOKwq0/FvOx7FXNmbfUE9T2XOwy58PV5N3Y8ck0P1luXj5fmw/PNcHr
6qkFxaFn08V8+O7jZ3idYiHzd76LljwfEW1GmoWn6fw05LVEfOYhlnfT2SaF
RfJoJm39Kx4OT191qoe6sqv2mscjHpLWfnl+KJVFwvkZuqPe85CxP1zNKI3O
x+vOKgue85BfpuzQRH3K/OrD0AYeStuzjwWk03mq4WZXU8vDddN74rIMmg+k
TrmbzvBg+XGw/04B3RdjLvkpdHJxPUHkvraQxREvU3mmhQvM1nn0m3rcrSXl
4vtczDi+IHtsMe2HWt3t1uVcTFiwf+nOElrvF3M2zjvARXbv6TLJeVoPZ0q6
T+3mQudUsXY+9Y/ipYlDtnMx6nvjz+ZSmn9lzSy+uHEhSFdLmXqJxcnM1kFL
My5irScxt6ll524N/TuZC/k/5n4uZSzu/EwYUTaWC5llrpZx5SwaTh/OtRdx
Edrne067gs73I56pRvJc/MmOHFlOnZbceEG9n4Ov/TndnZfp+/asnKX8gQOf
3HKH0EoWtmYBBRqvOPhkf+eaUhWtrxPa5iaPOXCXadXPpU4TuH5i73DQcbbr
mMUVFgonppTtruVgDZEZ8oS6fcahjMuXOHgxRMnbu5qFUVdEwUABBysLdZ4M
qWExrVx+d81aDh47mOAEdf+f/A0THTiwG26ZN7mW5kX9Jauu2XDQULxSXEe9
w77Tac8CDurkQ99/vUqfHzw84YQxB2UXrsYvucFCdWL/1WYlDoxdm/6+oU74
6TXtGYeDc7y367bX0fxV2lQuN5SDPDfGNPsmzT+coz3vvzFIFi1rG7zNIlu1
Xr3+KQOVKtfFifV0X4YqiIweMkhw97sw6Q7dT48gvl3P4EB14l6HuzSvkxSr
0CsMOF5nvnVTD0Tf2HGijEGMtMIp+h6LT2c6a9pLGIRvajU830Dz4g3lbYM5
DP6pdJ9cdJ/m7xqtjw/SGWy/LiP3mnp54fhN908x8B05poX3kEX9Wr2M5UcZ
dNWZzMugDqYh/NlBBp6+loWmj+j8beepxu1j4HbbM2JDI4sFk1sagnYzcD93
LIlpou/vH7HGbScDnxPXS/KpKxZofIkIYeC/q7fe5jHtl6wC/6fbGAR7aLR/
pT5xaMqvNf70+9ou7kt4QvMZJ8d/9FYGUaZByqZP6f4Qir4o+TCIZx7N3dlM
50VtdcNxdwaJvQOO2s9ovts0bMbEDQxOPpvof4O6K3tW8lc3Bqm1K+PcW1g8
8Xbv63JlkJ0blcl9zuJ4dcwKzTUM8g+VVBZSm6Qk5UU7Mzi3/VWT7QsWJdy0
v1pODC668r58p+YMPzn/qyODykWmw4+3svhv3559v1YxuGq4QX3mSxZLTnvc
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
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[1, 0.75, 0], AbsoluteThickness[1.6], Opacity[1.], 
      LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.647624, 0.37816, 0.614037], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
Buah1if3498CoycpxXRQa9r66Gf3Y9pufr7pSzqeZkoe33NpP37m1+Z+I6bU
Dq32vLkfQ0KXcyJfkfvOy6c6Ju5Hj4Ptg2Wv6XC3vMGTkbkf7U9U79UR88us
1+TJ2496pyeZlFI69g8n6wvV7kfV09MZT4iNeJyoT5r2o0R06y3rMpL/q9oN
T/buR96zxuTUN3QcGPu9fg+XC65J/rmkVUnHl1flK7fpu4BvEC/LiF9HHyzq
NHGB36sz/TZVdBQUxCyJ3eWCXR5ShtFv6dgtd/CK9kEXzKvQ7vxeQ4f8mt1T
4Uku8A44oPnwPR1HskdSAhYcwNauj8U6LXQoRvomnJ84gIIntP4q4tQPKaL/
eA9CJcZR3LGVjpkAuttZyYOYMxhzuthGx502k+Ju3YPISxBaMN5B8vsnpzPT
9yAUt5oy83pIvIWOydaPHcTkg4d9q0foOFstdrJhoRvOmmVJ1BCPzfXaSii6
Qa45zchhlI5+y3bGIR03bJx/Of78GB23A7R9DnLccGFv4IbOn2S/IY5nYm+6
YZnAtitnp8h9JM9S49Yfgr1D9+ZWLgZOJmbdOhXgjvHJFh8fbgYa59LfDMW6
IyLqUxIfDwPp15iRRzPccf9J5U9tXgYKjrwdHax3xx/hh8nh8xnknBS2mGh4
4FLRickVggzwvXOQudfhgbeSUreDJRnoPEw3DnDyQu83jdMqFAYcc4v8uk95
gbfQeM8bYvOxoKee172w3uag4AJpBjJcl3iOv/fCg/RnnhdkGUjK+vqao+SN
OH3HNSnyDFQFGWv7XvLGA/6jYiYKDMxftLd4c7o33jadH+gmrtK9zVz+2Bu9
d1NLwhQZ0KpWHFta4g2eU/mJqosZsHevP7m4whsKFm/9KokHkg/eMPnsDUPl
jp1uSgzsla2sCfjmDb9yAa4Hygxc6Wi11p/ngz2WDyufqzEgIswU7A7xgZ9G
2U1bdQas4kz7VOJ9EPe3MYBLg4EYm98fTt7ywdsUnuVmmgzsqnjeerzMB+v7
2XHVWgzEjly/e5HfF4rHZ6yadRiYC80z3nLRF73Xtw1NGZLnV9sYPH96GP7f
W0dj1jOQ8kZwR371YfDDe2KpEQPTAk8sStsOQ/3b5VmmMQPhroJ6Cjx+OLSy
RzQHDDz/oMwxt/DDWOmpVQc3Mchzznis6/PD3+HHJxt3MaAz5aSzUMUfYhsU
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
S5nXaZi5RlvYQrxAcn+XfzwNATJfeU+fIPWp0F9TMZqG6YTsv8qBJB9qDyfv
OEODv4TveDlxL93G6F8wDROx64bcTrIgv1mbf81JGnyFub+KnGJhPGv07/gx
GsbOVTbnErudvE5bfYQGT4ELDZzTLIS80naZ9aFhONzy7R9ig8O5Ldu8aHDj
VSxJDmKhriZ6wQcjOfQH9T41DWZh/fn7Qh6GcnCZu/+ol3h+1bx0oXVy6Dlx
JOtcCAsaEfEND1bLwfH3+psrQkn/KLG6wlklB9uJ6gv+YSzkP436+nilHFp9
4iMXhbOw0e+3m+tyOViPWgcVEy9/cCNSZZkcOIMDXnxnWBBPjYrIUJXD7k7+
3ZfPsiAdOC+6U14OP+VCtq45x8JrU/43ZTQ5XLaaMWkkfmtZfvA+VQ7tDWOr
FkWR+uh+fPw8uW/PN02LkmNY6Nr4WOqUsBxisu/2ZsSz8PTWkejVczTo9i3t
3JxA7tvCKNhhhobPKqlNfcQ+2193XvhDg8KNhBqNyyxka811z0zScD/2ZO79
qyykJW6fWDBGg0XN1N1d11hgPvu1ac8IuQ8B34xRYgcNG967wzSsD3G5qpPI
QvLYvtf7BmjoLO6MayCu3fb79Ys+GsL+Wp8/nETu+4fFCuVeGmr8dp/Kv0H6
/TJ98+luGrwfVR3lJLNgXvz6t2sXDZSRjT5TxNYpglKdHTQUaha7XU0h+68T
TbJup8HmwFrndakkHtY22zXxyoErPXdfM7HmqurvW3lIvnVqWZ64SeppmMGb
DC45DFspmb9II/1TMcFCbZaGC5cTN9reYgGHTs3bQfJh1Qcpo3/ExYJ93La/
aQjcIahtkkH66Sa9pm2/aBDaMC71JpOcX9aT3yD7fXDCQ9TlDgtKCQm/35H9
Mgr7BPizWHjeMGq6g+z3uk7r363Z5Dy2K+UuJPvTXPKmq+YeqRda3jz3P9NQ
Z7+hxeM+C935G3bd/kDi+cbTjyIPSD7HR3+NqqehSPpBhcVDFgrM0weV3tJg
vuDK/Y+PSL3KfOF26DkNjuWxDW65pB/skHsr/JTkU2jkFNdjMn+d6e5Kyach
e/a4yfI8ko/PMwziH5D1/7T5FF7Agt0y/riCFBqWPGT/oT0h+ROY9vhzIrk/
912KucQqzhkxvVdocO/d4NpeyMKm8S6PT7HkvpqVZ1c/YyGGsvr96Ckaeq7Q
lGuJP0uIPIkOIPnNomxxek7mtds72TR/GrTezY+LfcGCTizvs/keNJhFzeUv
LWah/uvxEMeD5P62TTU/I55fZ8nz0IkGP76xf/SXpL7svGEwZEvqU2n/kn5i
NSfzZTLWNNwO6tp26hXp1wt2nI47R0OxUbMn5TWJz5LHQ0fDSTz/aYjPJr77
tD1YN4iGkSfVhShh4chIjclrsj6+I2Vtn4l5HE4tW0Lqg4LuCx6PUlJvxMeN
95J6sOvegx3XyljQW6b6dRNZj4trps/KN6Q/JfQc/m1D6plq6uU3xHLrXVYE
c8j9p8Z1/ign9dbs8WLhbTSIXvLzM68i/W6t3x9pLRrUGR7XOomjLuxoOrSE
Boi6FPu/ZWFsaX9XghyJ97OWAreqWZhd4OrttJCG+pMGSX9rWdB6Ehfyc2AR
+g30XsfVsdA6E/qwv3MRuKaX9aq9I/Nn0Dq+x18WQcdXXptVT+ZFjGiXlS3C
RReusnsNLLzMOHWiMWkRmLvLh/Z9YaFhnuG3SrNFmNjaXMzVSObJJx383GsX
4bLpSNwt4pQtxUnzly1Co7702oEm8vk8DXk/sUUIWKkpFNVM5qmV+QLtPItA
0zBuX9FC3jfWnXCh/KLCVs4lzK+V9K+BvGO9jVT8kwqwlGkj81uM+vKQt1Sk
isZoFhGnSXxmDj6jwnRB2qxNO4kPvxfDCvep+MpTUP+P2CS/fUoxmYqwmapb
aR0srPq47sj3GCpUJ9v8N3WS+YQV4XzOQhYVoz+29RN/+8W3PNFEFgcH5suf
72Jhw8joDm09WSz4Sh1b3k3i0cikbNtSWWS3Li+tJ77b8+din4wsvr9ju0r3
kPtZk7k6Z04GMVWu658Sh/VcE2r5KQPt0pOiNt9I/e+fWHOuTwa+BRn5N3tZ
OPvr6+UjDTKQzHkaadbHgtC/o1WPKmWQl1W7t4/4rZ0f0/elDDi3ulac6yf1
VqZp1ZMCGUwl/eJePsDChOptj6AHMrh6ecGnd8Ru0S2ztbdlYHBB/o7vIAuU
7ce/paTIIDB0067CIRbW1Hwvqr8oA/mTVkp7h1m4FVt2Z2W0DIr9PSZmiXdm
845IRMrA3ju4IvU7Cyvk7p4LCJUBt9ul6xtHWGB8KzrlcloGaU5ZHr3E+fP1
3n4+IQOzfS9wdpT085OSHtXHZPCN815Sa4x8f4fNATN/GURYfOutI97qK/zU
xE8Gaua/n/r8YCF1VNWx1FcGlRuFoyk/WdAvu+NY5SMDNyMl+yfE/GMXi5jE
Qmv09azHSf86/M3Vkfie9ja+WWLnnanev4h3ae5rSpkg8X+qtG7hYRmMqvjc
M/3FQiH/7rA75PcuyIef/kZc3GcaV0nWoyNzjRE5SeYVxZRf7sdl0CB2f+my
KTKP3nd6dClQBn6Cr6driTfGXygzDZKB1LxP1d7TLBjXL13pFyaDgtn+ZMnf
JP+dVX5okDeBPVMzPgXEE7vPCjrHyOD3mNgmqz8s3L5oeUI5QQbXB5fIzhBf
1orZuP+6DAx71g4l/2WhTH65k9ZNGbS27Sg2mWFhpcuq5qN3ZHDqi31cD/HX
+el3tuTIQPG9n/OZWRaqZk7UJRbK4NXbyDWacywMmz/f7vdaBo5lSYK1xNZj
zovfv5UBb3FOm9c/Fn4PH9mR+1EG6U/KciS42HARD1+utJ+KIh3Lh9nEx5ec
SKrxpOLd3YH7ptxsFJ+8ryh/jIo/KSJ3fXnYUOKtcLx/lgqxRTezBHnZMFr5
QPl7HBVLE/TupBFfuPl+8v01Kiwi92Q0zGNjgVVty7k7VLjwDN1ym8+GdnLG
sO1DKk4Enkzj4WMjVqNIvDGfiguTojevE+v+Fdw+SfL3tndaii4/G4slr159
+pqK54Orkt8SM3wc/ihVUPHeuSLJUYCsT+qA98oaKmb2DF+7uIDsR0ft2rpP
VEh8OHVVU5CNm3e6tq9uokJtp/iVEmKqS6NEYysV6ytuXbIWYuOTq9CIQicV
DJPVCT+JGx8HtAl+peLgs8qL5xayoWCm2pX4jYqT+nvjlIXZuLVI5Pf7Piou
PvweW0R8aI3u0vsDVNzRCIphiJDzu35x//IhKopvSUQPEr/duLKIMUzFB/mM
8yGibOzVE1CR/05F/5U15xaJkfNwlU+NIp4TfxuZS7z1m6fOTWJKlM0Zc3E2
0jJnPlsTa/CNhncTI6f8wlPyPOOg4LAACTaU/9XYviC/x/ojGSohycamBFET
l0Eq3PxuB2cTZ3nFrMnrp+L0yNogUwobrLhtppm9VCQcrD7VTLzxNxw29FCR
3b3vpK8UG96ZfgmBXVS8shk7ISjNRkdiT4ttOxWfPocEpBFf/nxhTW8zFYMW
UscNZNiIszyeKfGFCq7qzKMNxFUKyct6GqiQ3mTg7ybLhqnWv1LrOiqWvazx
46GywReU5O1fRQXW2R2+TiyyyF9nTRkVnMc/fHQXsWHx5zzfjWIq3JeHeb8l
/rC4fTSzkIrgTGkvRxob6dHu3y1zqbiXaOh+UY6NeQbGSzPTqSiRqnPTlGcj
/niw3eYbVHyJtXctIfb+x/Xg3CUqhheMH7BWIOutfi7mF00FT1i4y0/ivra8
MzzhVMjOyew/p8jG6dUDEqsDqVh+LNtJeTEbvT20ukUTsjD9ud6xiNjzsPTG
qkFZ7HF/Z89QYqO+YdmIXZcsPHsd7AaJFXht3rV/kUWo/cS+EGU2DszL7N1U
J4sHLOreXBU27hyPflJTJAteIye2hCobBiuTup9flIWx/x12JrHFvAarR5Gy
CHj4nb1ejU3mg/SJmFOyGFM6xnFRZ+OZp/yl+W6yaOeLtizSZGNJjVNw5wZZ
FNYXWDmuZIO/awP/TtJPJhbMWE0R8340KPzQIoOVG02so7TZ+CnbELWxXga3
86utC3RIPF79lNpO6kf89c69gqtIPnlo+/GQ+uXpLGibu5Z87qtfybVUBtk3
dttuWcfG7tBfuVRZUs8/J9i2Eq/rpb+mCcmQ+UrRjs+QjYSbHVtbxqRxJcTZ
LpFY7o9YydWv0mh4lmWnvZ6N8PR22w2fpbFtxSp7ayM22kZ28W59Jo2wA8ft
R4m/xfwQzL4vjVepxfZhxmzkBWmv/pUijb9NvA7UDWwElAmFa1yUxmrJbQ4P
iJWsQ6c2h0nDd0eMw0awUa1mpWM0LIX74R8cGomFqCHPvdql0F8s6+hhwoaY
itSV9/VSWDK9z5HHlI3STRKvHUulYKdzy/EKMSP4uIFKgRSuu/U7am1kI/OT
Oa9klhTE23ydOGZsnK1cFhoUK4W512ecszeT+vKl1zDeVgpN5x+5MLazUXjd
JO7KfCkkc0tITRCf0zsy4/mHAsejvqWXdrDh3qUpd2qUgkFHvcVNO9lQDZQ7
vrGZgpl1+U12FmxY3pfNcsul4NVDqUhuOhtLR2wK/92hIHyp/+pbxF0bVQJr
UigQEV8T38tgw27FaiXhGAoW9xfu8GCzYfzPr0vTg4KefdS/Ihw2fvVVJZzc
T0HWh+NZOcTJ31Jn+G0p0H1pwDdhyca44qeB0t0UTK5KzLu0h40UG12vX1sp
eJb913GNFanvD8SzbE0pMLv8/GWANRunLnAMGvUpEFgo7ym3lw1Fpedx/Ssp
qA0+KVdMnF9+64a2JgUcD+Pj3PvIei1+NxxQpGDR12S1W8T++gdmOIso6Njz
75OZLRs8Ky2bT0pRkF5nF9ZLfN6oyr1VjIKDZq90I+3YkHV48dh3IQVaRYu7
NOzJeR7e8KrvuyR+rAyOrSbWPxh/4PeAJAoyuow8HNhw3sc8w+iVRADNdFjE
kcQf87TieLckjOPSrucQ79kmo93SIQleft5tDCc2JEF7KtgmicpAp6lxYsaa
80XBzZKI+lmaccmZ9IuVB1ahURIWB5ew1uwnz1d7qLr5sySk2sN4moi1FzvF
xX+URDPzW06AC6kf1FA/9Q+SSK7aZCd3gA22pGj9vAZJOG64LVxM/ECYP139
vSTU8vme2x0k8SRwaCy+XhLDmgfcuF3ZGOA1zN9MnJNaIXuLuO6f/08Q+0mr
V5i5kf3OKNwJIV4XFXmkl1j5t+5nIfK8Oe4BlchDbFyczA1sJS45uq1Bw53k
20Ry4gT5/YjvWUHVxH9/TuqyyHq3Owmu9PBgY/pHkenfT5IQa3JrE/Ek/evH
4NuBL5L4uKv6fA7xiR8R1YrkPK6WLTNgeLHx70eM2Y1WSewziOofJxYe51nt
SM5TOWf48iVvEj8T3Sme5Lx7l+7ctMaH7HdyRUjJN0lkJ94fb/T5X7/pbd1H
7stTXCQtwJcNqxnBHJD7nJqpm3txmJz3vCsvW39JQnv8fiPLj/RDpx2vTP9I
kvk7KneIuNjJfrp3jpz3J3MXqj8b97amiwwKUCBRo4EcYvHlH4e3ilCwvURg
0ZajbLzLdeTplaTg+YPyWr9j5L7SEj80k3j8lZ6RKXScjXahzbG6qhSsSAwL
TiNuld4dUqlFQcoZU/36AFJvxU6KPDSgIMS+OGnZSdLPEra+dLEi+cG54V9C
7CXQr5/jQMHEjkALq1NsDMn3fl3jRuJ1417NMeKsj6ZVs74U7F9nMO/MaTbe
aM194w6kIHkltV0+iOSP7ovgLaSefF46/SSP+AZllnPgqhRE5b7EbQ8m9e6Y
6CeDm1LYKlFwqJv49r6Jv69JPQoSuLTpeAgblLK71TOPpPB07rCiWCjZz119
s6GnUtAc0vlgFMYG59+rlV8rpeDUJXb/I7HooZK04XdSSPoyGnEonOTXnsvF
WZ+lIFx23+BaBLnPgvwx469S2FwURdE+Q/qHGje/zIAUTuUcGikn3kBVLE8b
kcKT2+aV+yLJ/BQluqJ7XApjSRppE8RFwQ3Gn6aloB4vEHj+LOmvUwemT8xK
weFsH1v5HBtuo++sP3OTfnAkY4HFeXL/jjKLbi+QhpB72Nde4uq2SX+asDTM
HJ1enIxiI7r5TqCZmDQC95heoUSzcW3P8mVKktLI36Xkc5f4t2VYyCMpaYyY
cW03jSH9tfF+yC8ZaagadixpIk5vzlr2nSpN6nvxnFcs6X/7jp28SpPGVbUb
jXwXyLzqSD02JSeN9/KBuTeIT/ZH0QQVpCFI2Ru1Ko6Np6MNB+qJTQUNXKqJ
Nx4bsjFXlMYJLiocL5J+H/L5z1HivMkp6m/ibcIJJlbEw8Ofx2PjSX+hLtEZ
Id9f+jW/VjWBjajMiKrVxLZNCZkviDMKngnqyUvj8rvDwaxLpD9tKZ3oJut7
94axd4i4fM+NM5sXSUPguY5+yGU2aoe2le6TlQZyxUSpV9hQ56rKVJeWxvE7
o/0PiWsvLdLPJOeTm1xXsvkqGyX3jA81kfMbTLif1Ea8cJO++Utyvirno/z9
rrGRajv3fo+gNHpeRMzJXCf3xVzyk8EnjdtjQRHPiA+1nNs7Tu7roMoJEbtE
NnR+6YgYkPvU5By5zJPExtqbVEE1ct/DkV4Kt4lDOkx2F/2UwoNnrre33SDz
XU522zjpx7pKtgUXkkl+8Bt/tuqUwgRzj/GqFNJfYg8iokkKBRGM8i/E9Xc+
jO9pkMKxpzt2nUgl88G5XT42olJYN7z5s8JNNl42nX4sJCCFPwomtiXEQf03
xD5ySeE53bB3fxqp50/uROb/pgBPVk7eu8XGl/iwqtIhCngGNU5ZpJP5M419
cayHgjK5JXwTxFLekv6r2ynYEiIrbXibjabt7Bjh9xTs2sm9uuoOGxXcP7kH
nlCw72vDkW/3yTx0IPYX6xwFCtK1s5EPSL0/rOUhGU5B59aKcK2HJF83FPwb
PE2B84Nnlw7nkPlD5sKRb0cocD+ens/9mPTfMpt0fidSb+4lG2UQ57yzG48h
/Xis/eqbrXnkPq7v3rfSmoLDZtGfYvPZUPH+FfyMTkGAqP8v+UIyX1GtRbhJ
P15v6n3yNXGSSukqujEFc35u8/c/ZSP0u6x/EalXwc22UveK2Pjx6ty2Rj0K
TIWtbux+xsaxt7dborQpmAfm0nHi5viHkdbLKYjM2KJv8ILcp8sZPRM1Cswb
TV60Eet7cXSsl1CwUGj9puBiUl/XSphHKVFQZ7S6dslLNmpeFZ38okDBBW9t
diWxywKLGkM5Chi3NNsOvSL1ZLEld6sZBZTPS/aLvib1tL/xK5Os/7OA4vdc
4iLXFP+3Gyi4Ykg9wikh8X8r++kGI/L8kTj1UeLJEr3edrKfeWmCrWdK2ZBO
5RoJXEuBt8CM6dMyNqbi9sfmk/1t/dQuJlfBhgnLhkol88e0Z/q9rmqyf8bs
tixpct7K8vYBNWTe3lyiuZpC7ufTJUnJWpLfk297X4tTUG94JsCsjswHsZlj
n8i8cUfAbWtmPRvyKdHbx3go2JO2ssf9Extla4UVRkYkEcO+c2X+ZzLP/RN+
fHBYEmUCStuTic1DGSrdpL9pe0nkvvtC6nXJ7UvveyQhsP7Xad1mkl+Kga/T
SD81HvXQqyY2rr+uTSHzhV9ab69TC6l/RrMBYaQfdwo07rzUykaERfRNB9Lv
pZ9bcK9oI/PVr6KTdbWS2OFVlVdOTN2jpW9QLYkQZdODdu1sPD7aVZFeKYnC
T0W0aeIwVrO+SLkkRiL13l3oIPPTiPRp/1JJLFl/L0Sjk9xX6vG7p8j6rUeX
rC4hVl/On9tA1n8h7caAdRd5/3ty2lykTxLlbOkb48Rn8dVPh+xnRiDWIqqb
/H+Fjs76LtKfvYKevPjKxua6WDuBFjL/KP924/SQ+rcr5X3V/+aJTz4Ko8Sr
a6998iXzB9Y7hS/uJfdXujv+BNkPdcFmZmg/G9+vvvx2oJicxwkfAeoAmQ9/
8SCgSBL135NePCBOmfyrcKRAEpEN42rNg2R/gyKHljyQxHTizRnt76RfXSo0
dE2SBEuk9lE5caR81rOXV8g8FTTtYjPCRuL23a/mLpL17t/9/swo6d9Xn1uu
PiuJxhWzGe0/yPv6xKKX5/0kseqm+l6/n6T+ZhU6q3qR85BkiQmO/+/9bGFs
lqsktk5nB+hPkHzI/uDjaiuJJ6/37I6aJPNjYa/Xu82SuMzKm173l+RrB23X
KklJ/CzvuP+O+PR3yQ2WCyWxa52Q0/4ZMn+lvs5znC8JPgXH2guz5P162miF
3pQEHC9Eh6jOkXxJWqg7PSqBYp6na54Te/VeKMrol8CiIz3D9H9s5H56W2HY
JYEjfaJpfcQX3YqsipokUG9laHmSi4PjbX+dxYoloFXjslCSmwOWaG65R4EE
Io0vvr5DfEtN88+LBxLoyXnhb8zDwQFV539cmRKAysCyj8SpQvafV6dIIOkS
pcuVl4NdX+RP212RACvg0PZL8zhYoNyx6ewZCUikKiePCXNQTf17zINbAlO7
XLnjRTi40NrX2jIljtbZh876ohxsPvG22GBEHLf3Gi0LEOMgcofPTFWzOAxk
9hTySnJgY7zJbsVjcSiWJ9NuEz/o7MxdnCWOeUe+ndpK4WDM1jeMN0UcdQ2+
m6KlODAf9b95/Zw4HGOiG6RlOdhtx1cq4iCOLUYf9Z8Sa3VZ8IVzxKE1vOja
XioHf43jKoa2i2Ny2x271EUcuMeMl55bLY6W6ZESUxoHokFS/0qWieNVpr7q
N+L0ncsLhxaL49z80mENeQ5uBhqniwiJwyuPFDpiofY1XwS4xMFysnjsqcDB
fppa5PiEGNZJXJEWV+Qgd9XCJ3UDYlB43Xb8MfGoRp/T9XYx8HovaWMv5kD4
hybn1Akx9CscwjSx3MbqGAdvMdTWPrp1XYkDsa43u9z2iyE3cJrPSJmDgbeL
Ll+1FsOVZRvcOohvc711Ht4thsDm8NpgFQ62hXwo2r9JDJvXSiaUL+HA2PXX
TKW2GJrHlytZqHHQ/cavib5ADC/T/MJ+EsfmD7+59U8U6fRnfQnqHCw5mt43
MiwKz4dbHzRpcHDvtY6lS6UoeA45GTppcaDnV9rbFCKKPmp28vzlJB5sDnnp
+oqipnKM+w6xbmsF32cHUVxWPVU5vIIDq1vJDnMmotDsvsr21+FAYXdpxYf5
ohCN6yiU1SX3/0u0PGxKBBMbVOWeET/XE/8QNCCC4huPu//pcRByVIdqXScC
plWd19nVHPjKDbDjEkVwLzJ+bvEaDtR+Njx2viACvsI90YXEVrt++B4PF0Gh
9NfsvrUcxF2vphzwFoH45jvrTq/jIPTcmakNLiJwO+JRKW3AwXzuY4bWNiKQ
+zj1bZMhBwXBk72MbSI4wvvCr42453zYLh2IoE43hPfIeg7S5LbI0NeIQN1x
y8WFRuQ89YxNcleIIDhuoVI6cfF71xqWqgiaX71/aGjMgeZkVeFaBRGsGrts
/IFY9qYtn620CKIVbWrdNpD4alDLLxMRQe8uJRsecPDYyUfbLlcYG071Dl4j
Fjvq99DurjCu3r97XMeEg+aO95vr0oXxs9VboIqYP/nsZHayMLYvXH3F3pTc
16PE4l9XhZFu+HfpNPGLRQIpD+KFMef2Ki92I7m/prorn2KEYXk9fKOaGQeK
30fvuJ0TRk6VeUMx8VHOoQaPCGEs+C3qwNnEgZGUCaUjRBiO6p9GvxN7afh4
Fp8WxnPL66fCN3MgGP+3U+ikMKTO2AnLb+FAhtF5qCJAGJ4FS5LyiONcFEV/
HBNG5bcBzR1bOThSX/g28qgwlKQePv1K/Db2XnKMvzACzPy2ntjGwfn0P+d4
iD8cXvdFwpyDQpFbsT1HhKF1a25/NjGrLuPeKvJ5REPphMl2DpnLeLp/Endw
nw1tIm7YWbRSkfzeWp1dEj47OMgTrrn09LgwLtpL3hTYSc5LZS2l5IQwhmIb
V6YSl0bPZa89JQyzlzeK1+zi4PtORWv5YGHcGHHc+Y441Om6kneYMCbl1Vtd
dnNwps6LWydSGBY7v7vNEc/FpPy2ixJGVmDu70sWHLSlawjOXhAGz72jkcvp
JD7FRPQELgvDpmW9zBvi/vodfsGJwhAxqFg1wSD1ldG0oThTGAdco0rPMzlI
kVR7G/xAGK+u0hkqLHK+mu/cH+cL4/BUixeDzcEayxV/7d8Io0b15twA8YDH
t97WWmGoclyigzkcUJsnB8s/C6Mxbyw7x5LUq1z19d8GhKHTk79u6x5SrxW3
naVOCOOc5InKDuK2ztKRZ3PCMPKd3ytizUGncyXPdikRpK1cpORhw8FPD+Hd
F7eIICzxzz7xfaSfJEsl2XNEcIC/5Xo+cd6jZt2c/SIwP/zsi5UtBzGZNpLB
R0Sg1ZFImSMePp1o9IHko8j2QHqaHQffDK48un1ZBGMFNjGb7TnYcVS+wq5F
FA3KRtWDxCvW7bIKJ/UnP0ZeINaBg6tdFY6es6K4+mfWTM+RA4O1b3yE+cUQ
4NIe/IX4w8+3HptExWBsnPJX0ZmD7NelV60VxVD5ffFojgvJn3K3IqqxGLKt
uLXYBzhYmTn65SSpj9Fvug7+Jo77K/uodIcYGDfSuk1cOfgxu+fyBKmvLTuW
fG44xIGpa4zW0BExjNxVezHhzYFjc92ZZbfFUC8j8OeqD7n/ket2d++K4XFo
/2ojXw5a/IXGFz4Sw7G9WTnhhznQ6WzaceSZGLiFlqVL+3NwmKpV01wnhh5/
oa4i4g8VtOCDH8RQ3j0kb3eU9I+Bhz++fBHDuaJ7VzKPcaAd8Wa+TacYKG4r
zq89wYGP6u3f06NimPwkUtlKfNbz6fmEcTE0mozOCw4k9UHDp0l8SgxF99+Z
LD3JgcOe2m7vP2K4Qc05VUWs9qc289GsGILCLzzzOEXqvehh9Y+kfzn+8J4W
P80B88pz50ZecZjto+sXEBddzLYp5hOHapWOr3UQB4Ge944tJP8voC/xcI7Y
69aQ8HMecQyl/hxKCyb1TfDrWuZ8ceQc+38V13c81f8XB3BcmRf30qAyskIa
QmXkHpQRSuLzIVFKQtIyCpVkZ+9ZyiiSTZIRWQllVDIqoxIh6puu1e/8/nw+
rnt9Pu/3eb/OeZeenvTDv3dZOLSHhw4xY7H3I28RoOq4XjOQSgc3U7dPyv5Y
n/FzNc/46aAmp2rlE0BATMArvyFBOugcaU0UDSTgQ8Qke/1qOhy4bv2uFr3n
asBK2Fo6mOVOrz4RhPW3L/m8tjAdjvbePMIaTIDRrKzlRxF8n3+rY+6jV65v
qzy1gQ7OCg/f6IYQ0D5VGNm1kQ5evp0mgaGYj64S2Q7idPB7ZBe2+TYBn3wF
RsP/3+/f/W5rRYu6XUlK34TPzxrM7RyG+Whg3RQvSYdUxQ0GvOGYF8tPnDyk
6JBFFgTmo33jIgIY0nTI99NuMonA+YP6SXgWXfa4lzKD/s8+V+q2DB2q+87o
REUS0HdnKptPlg6NlEVfpSh836eP7l5Bt2+LqOtG/y4fpbWje602rVyOxt+L
jWdybqbDkH+Z5poYAm4crrdSRH8t1PeuQE//dFBSQ0/39z8lYwm4cjHQdxv6
zyrXv3/RYj3i+lT0yg7W3SlxeN7XKAd04+9zHItz14jH/qX2XP0mmj9oc9kg
ulKr5Ywwem1J1dy1BFw/aQNqEj6/+JCJkngiAcuTOnIsaDmu4fPP0QZxT56Z
4vvuUHYrsEsioEg0pzkE12ePLecUWzIBKsH8ho9w/SAkZUsWurfnp045rq9B
2Vbn/Sk4j7CYlD3A9Tf99PzhV/QZfql0P9wfSx7zb0Gp2N+XLy3vF6ODneo3
Gfk0Ahw6NN/O4n46n/Cyb0NHXPeVDsT9vnSbL/NsOgFvaVqTbOtxf4eVJQru
YH/tk/1UjvUTSm2xPXSXABN+M+oPrK+Y3UfTf6LZZOaLeITokHJyaiA6g4Bf
qfaeMm00yAz3Xa98D/PkhpOdaSsN8iuFrHrRldXtrBHNNCgbzUl0v495Zx5h
+bGRBo1qHasrM7E+4hTln9TToN3+xBGrLJxvNLkzGc9p0Bv5K3oBLcTY19Nf
S4PBqsA3qdn//39DT4NraPDli4jA3hwCrI+8JQyrMX9oj00+oo1Pb8nbiHny
RwPCbjwgoKXrUylbFQ04Yhy4Gx4ScLTq1ARHJQ34a5j6p3IxL3Ypr5N5QoO1
42GB7Hn4/Hx2CxYVOI8KSTRlo9W1pmKTy2kgq1VK0X9EwOTL96MzZTTY5qSn
M47eXCQxYYneFffBNySfgImfLTm9pZi3dS51Co+xH4V1iJxC60/8W36F5vNT
0mVHN8bTHU8WYH826cmtLqEBaEt1/0VfP//TMgBd/UNFM7KQgAvjwaa26D1J
ejkyRTifVKZF6aPLdC1p1eimj1tEtNFKM05eZsUEyB/bNXEAXZDiPTaOttlR
TTmNVtALP3ijBPPOuuZ0JDpn9k7lmlICdg2p0drQUulFkvnowXIlyhp8vgyD
hjCdMsy7L1laF9Abf/f86UMnn41tGEAn3f1y4nw5AcUGyxEkvv8ao/m2VRX4
uc9I5ig65g+XahrajFOX1RfXj//++rs7n2D+j4s9UMT1DTVR5H6JVtnkEf8d
zcnce/l4JQEnigzaK3A//LMODf2HPpaQYBSH+8Viaqcf9hTXu+e4kN9TnOcX
LxVLVuF84pAl5Yv7y8zx3/AUveOwvU8E7v/c8oOZL88wXxUIzkGsF9fcp1Y+
1Xg+RILVNtTRYNL81QvBGpwfjquWOWO9ObIMbc1F31608WzDehx7NJ3IqMV+
Mc16S/0FDU6QLGzv0At7Nr2vwvodZBN0canD/f7w7LIR1rdlgdQ7tudYLyaF
Bs8N6fDWShWS0d7mx+IO4n3KbJV+3vZ6AtTO903lGuP9rMhydTPaM13KotsE
8/uY8/VjDZj/n/a2tRykQzOnz/gc2k1ls0noIcz70nCzkBe4XumfhkRM6VBn
e7davPH//fKMjwdak6dYtgKtklsjl4GuLG+IMm7C7xuPjiSgVex6F0bQqpS+
vKPoYupX+6vNBHh0pPpO4u9vq5zvFGjBeni0zd4QnXeKWy0HfSUtysINn0dW
YEOmZisBGvfqzV3weTOrFPl60N5P6+2U8H0kHLQ8nV4SoPklyufFATqk0U2H
/6F9pbdnS+J6CNfYGSW0EbDfM23goD4d4h0vlyu+IiBgqE/cYD8dBFcHiL9A
65FjF/l16RBRlxBi1U5A2Fht1z2gA8/Zh79m0GYBjgw2LToEra2yCewgIE5t
uGq7Bh18zw0plXYSkDbIGJhVocOS8Eyq4WsC7F/J+AYq0eFqIwvHZ3ROR//O
8a2Yfxuk+6ldWL/UknpBzO/pZtV9mWgvw970Acxb50v6BWrdBDQmNwVdFKXD
qZfOfg49BHS5rQlgxzx0LE5M4e7F9SDcRWOxP7smN5bko0VG2N584cL+6SQ2
OvcW34eZc+v9Es4Th40W498RkOBf4+/xhwYBaleE1N7j/bqKNeMDzitR3N26
N/rwPicjJPNjmAYJsyvWkh8IqD/6OSK1nwapH7a4NaGD1AcEBXAeyskNyOId
wPpmWjnpYH3mR5dUF6Bz+4Y02LD+i69+6j08iOf9ZKRc4P/zxFBtVdIQ7r+7
t2l/Bg0alBxENT4ScHil/HZeIg1aRGJVP6L/KokNa0VgHrM+N7n5iYANtDLT
RH8adH//cVr6M57fxBWKGeZ9X5fI9Ra0pNWNZAE8P0NP9RKch/F+JWD9+gSe
9/GQjOaiEbxvH5PaWHsH8/lix8cjo3j+5gSU22Jo8Mtq4c8fdNE1csIpkAYr
8uab934hYPTyvJq9C+ZJG2fwy28473z0stmnTIP1JSoZLuN4nxZjeE5J0UAi
xa5S4DvOZ0dslRRW00DR+dm4xQQBr/dY89V8FQAdnvOGIz8IoFiLnz1tJQAG
c6l2AVOYp1vJrFllATDpb70qN415O7FPLJtPACzzJPNcZwiIktLpvVnLD64H
3vEszuL5jHlhIIj3UbedFKk7cwTwVuYF9eF94er6HRrav3CeatXnbK7mA/+J
kLNBv/F+/CCzde0JPkgJ3dsuNI/Pe2rkSGQaFTIuOY9VoLkHryRFOlEh+2ji
ktVfPD+MJtEnqlQoUphVzGASwGi6MeH9ihcqBMX26y5gv/42pSQSzwvVCwds
vqK1f9Orhmx4oWHE0z1kEddzctLvpQwvtLRlhSsu4f2gwzts8AcPqH2/fmWv
JAlU7e1FZbkU6KMN1XSjL2qYOYfkU+DKHg2KoxQJBm33K98WUED4RLLBMjp8
SiI1uYgClUHz4THSJEB2O/1tMQUsCy16NsuQcGI2e2NwCQXm35UK16Cnu/Kf
laATVui2ZrIkTOkNT5ujd8leyPyGtjTVrXDF778z6Rz32UyC0nQ3nQV/38Nd
cZugHAlXJKJYufH/r00PvfwArfjNKyDkEQXKG8crNeVJMNeJTb/5kALmP/RW
utCTSh8MZ7Mo8FsoW/eMArrcOLQvgwJxGpSQJbRV55Tt7jQKqJyy64zeQoKK
d3ULXyIFekPrhDYrkuBTXdloHU2ByyWiVtXovTEjFptuU0Cw3/vO4a0kuC6p
edv6U6CEtX/0K5ptsVZF6BoFzOT3yPtsI4EScdGP4U6BOdMEV/p2Ei6VH7Yf
daGAUoYZU2MHCbn1KWPRRynwpqVIqwvtlkO5lWZKgQsz/P4OSiSkiqeUi+lR
oEjrFX/0ThKUXx96H7KdAqYO8uayyiRkrTrffEmKAjPhQcnP0Elvnhn2rKXA
tiFd6a8qJFRKfaQuLrJBJ/t9J29VEkYelRo3TLHBOUWWQtouEmJbKyRYP7FB
vne1msZuEuTq9gd8qWODLetVD0WpkWB3LxAMvdmgTTs2TkadhPUdrZs6HNnA
2Wn2QxVaKnxPYqsFG+RVPrb/okHCtbYMLdltbHDgM2+elyYJnfrJF4JF2OA7
p/OMwF4SSqzqdp1kZwM5UtZLXYuE++pxN3z6WKH1un/da3Q+ty5bTT0rnMkZ
YT/NIMH4nLiIex4rcHTCgQX0sdPyjVkxrJDz353ISCDBO7hbIOneAkNPdLlX
WpuE4xI2bbweC4yv+6zXV6ELJuY8C0wWGIEuT48f0iHB8VussK/cAkMmbl32
GLp5LeT7ciwwGp+5T1zVJcHvyvzOom9Mhv1oz3aBfSRcplbl87czGey8O92z
0G+6g0TSSpmMrJ1RVWr7SUh8deKq5R0mY9/R6X+d6LY/+9p1w5iM0ZvG++31
SPA1VxG0vcZk+OXmhTLRcWPbjB5cZDIku7jeROiT8C9HxVPcickwUvV7scOA
BHajyQHPU0yGW/JiRTf6s1tESKQdk5G27JbnZkhCpLSYrwN+3mQ3nb72AAmr
j6bULTkyGdNNZ6Ir0ZfWUAzMLjEZaxWG/Y8akRBFWIqcucFkMCKOXllCJ4qm
KGtEMRmOcz1n7xhjvTm3JnRmMRnRhMlxMCFBYe+ozqYaJqOqqtlsBF0ZP7Fb
+QOTMSIGev4HSRi//NGdnclk8N56qiZ7iATxvtqluI0LDJVvO7e2orc13G4f
011gHDPKl3A2JaFdaf+XX64LjAKhu5wFh0kQyrw2e+jNAuO9p/DiITPcv6yl
sTSORQbLYPT0LLpyi+OmXFhkHM7yf6tqToLZK3b3f3WLDC+uldb3aMEx1TDD
VUuM+y6e1VctSNjpd+SH2cElxm8V58wagoQBU/OgzMklhmjyaMJxkoRfvrsb
JhjLDL3lY6Gsllj/uzj1ZhOXGYlNhy7ut8L6UHaR0zyywlAnVBkd1vi8l40t
X/75xzhVVbDz/DESDnw3PBegwgJhYnKydBsSUgZGuwPOs0CZ3z2RUrQ77ffg
6XwWGPq6ns/CFj8P9rotM8kCHEZxLPPoPF3Pj41bWGFbId/vpOMkaGpPvNV1
ZQVSKOib+gkSYp4eH+S6zAm+niwDg2j7bxvCjSo4IXfgaud1OxLkU6bfM+c5
oZvxq17iJAnDXe+rhfZwgRTX14f2p7DeXk+Zh5ZyQXPSK48fp7FeOeVq/RK5
YWZpn3OEAwm9wwUfwtu5Qdiu1mbHGTzf2saR7Cw84CRfvM/NkQTbiLZWlZM8
EBOusGetEwlhPo+Mp6N4oGo2c0sl+szMfWehWh6gViUILjmTEGL/1i1DiBdU
xWgcd86SEOBAs+PS5AVbvxAmwwXXY8ru28BJXig84PP51jkS/oQYNDQ94oW+
gv96ZFxJeH53aO1gBy+wCJ1vaUEbq4essp3mBbMBuwLeC5hnK1LFWQpUmKmz
6riPHi5vyEvZR4WwrMM/1C6S0A3pATtsqCAfYsjbhfa6W6rt4EaF5nPaCo6X
SHjfteqTRigVTpmpGf5DT7yPtSm+QwWW3UqOCZdJKC22qWkupoI6y6acRjd8
v89ZEl09VHg/Jtxk7U6CqaqkdPMIFdxe0sbm0D9tBrisf1KBXsBFCfUgQe/o
m87IJSoUxLBIbvLE+lRg9bDn5AMjz79QiRbsPLfSR+ODceufxw9dISF0/1rH
KWE+CIDx61/RFVELJffE+UBS5nP6taskJBeu//SfNB/UcfdVr/bCfnff48d3
OT44Nv164BH6uiP/wLUtfMDsblnQ8cZ8YhvJK1bkg4QndSL9aI0Ls9YBaOW0
J3su+mC9FWtO/1Xggze+hSTXNRJeN7+wo+LvnTv9wOMuOrcwsKJOig94DtyN
33WdBHWXgB+CYnzwYFtiWQfad6mOwrGOD/YJRfbY38D+d2LXUhI/HwzPB84t
orcmjb99xc4H1wev02N9SWAZfGUuBBTYUO+xQ+EmCVq1PEPsGjgPZLseqkfn
Ccv15atRwCLUwdXSD9dvUkqPVxP7oatt+AyavmtFVkKHApFHiPzAWyTwMiu8
Jo0ooLjn4CtRf+zHKge1z1lR4OVGvYky9O1vL7yynSngwKrFbRyA3xcS3hx3
gwKUr6pyo+jmigN6akkUyGjbqu8ViO/bbd0XV0aBvYUyDvQgEqodjIZyeinQ
Hysa8BC9cknE4vxfCnheWZPFCMZ+Pt/EmBZnh9U2fC/eofl/m6ZLGbFDsfaq
kXMhmC+OVecEvNjhoOwyy6pQEvos2IqL89lhkuc/8TQ0+zO5Mzyj7BA880NL
+Taer6StUSKiq6ChctDHLoyEjGfd6tZpq+B4em/qX3QQ6+Xq8OFVsHSzvSoy
nIT0utkiDwUO2GVU/bcmggQiK3TubAsH9GwvW2cRScLftizGlQ2ccGF1/q4f
6JdO6f/UMT/yhlLd1keTMC+g0De6lQv0G2Jji9EW62p/vozigrGc2yUGMZh/
CTt8HOa5QOyC90+PWBKCV4omG15zQzSbtUtPPO7vefGt3I954bfpXTGfBBK+
m8cdfatJBcu7o2+kE/E8xbN81+6igpimi6pHEgk2MnVyS5z8kO9+bUU4FetT
eyLZi6CBQGN9UT16XtRPZaSIBpcEOU45p5GQ9iD+XzIfHdQKI1qepeN5ebF9
80IH3l/H70bZZuB6rttR7eMsBAq7x3Q47+Hz2Wb3n34vBOEBcv8VopsOJ8jf
1VsN5pLFVqyZmD8wacmmuAaGrRsks7JJaNSwWw4VXAdLnWNl3/NIqM2/ZpN9
cAOcEJU/E/MI87D58a3ozxvgxdlzIhr5OK+GW/V3uG2EUK4/18Iek5AgKS2y
O0sU1ulw6m8vwjwu15k+LSABO8vlP7iVYx6oa+69US8J8RTX26IVOP8UK/X+
2SgFfw+X7G1GTy/b30q4KgV10+r311Vi/94QoHBwlzQYyxmfraoi4azDo9Q7
NTJQ5BEleuoZCawxkb8JSVkQaup9zVuN81ts8endwbLQb2ejYlNDwo4NhVEX
yM2wt+je11W12C8yQg+8fL4ZMla+JBWgI5cyNx7YIgfsJgpGZB0JrdsXOX4l
yMGZVNflf+g/e6K4Gyny8D+l96NT
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.571589, 0.586483, 0.], AbsoluteThickness[1.6], Opacity[1.], 
      LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.915, 0.3325, 0.2125], AbsoluteThickness[1.6], Opacity[1.], 
      LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
      AbsoluteThickness[1.6], Opacity[1.], LineBox[CompressedData["
1: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
Tkyi4LgYDYrrdSkS6L6faseUxWngPb8r4AmuD3e5mcMbtFSrOJmJVkyia/tI
0OCdV5zFT1xfE2dfQQFJGhzLvfbXF+2wMfJHIVo3IcC0G/crlOPs0x1SNOhX
7BbYhS7Kf7L/zEoaUNzqzXlxf98d+mizSZoGfLxbb+3GePhl+1OxCf3E0Tc7
FeNFcVj4s5QsDdaIlqz6jfFl8lz5zmN0R3DrPT60Q5pBrJMcDc6eKHwrhfGY
pue5+bI8DZaKqZekMH6Llh0WtVCgYdyspfKl4fvaTg30oPdm3UgbOI3zvX2l
KmYVDZSlmpxepmJ8RD3IWquI80uSfjmE+axAeRdSi+6y3dv1IIwNxkrfdvqv
pkH8p4/FUUfYEFLNz1GkRIP8LS0hIoewPlyQb9utTAPJ9UfYLSGYD/6bSsbR
il0aKy4fxPcJO3vrrcH4u/YpbEMwjt/+Xu3Tdbh/RfwfrQPweWqvr7qq4vgH
bfyX78X5zLeGc6jR4PXkpcef/HD8l7k2WKnTQNYr4rCTD65HP5FWp0GDvhca
QXuxnq0KW3Bs16bBxBFLItIB33dp2+CMMcZru+2IL9bLQ8Mdo6kmNFDwjW4x
smTDMgiaWmOK+fwq4thyrK8XznLPPUWbj5j2dQLmw8/MRboZfv/XK6F75mx4
vFmdaxB9vEh47JgZG+ySnvGdMKdBgJXCOYopG9o7KELSQAPhxrmRBgM27NXs
FSlGfzDm3XwF6/vC8cPiNhY0+LErde6APtbzJkHpLvQOoQx9Gz3crzBtpeWW
NBCLllWcwvNi7FWUru9WGqQ4Lr/vtpENxyXJhv/Qxo9O2JhtYAPZ77pppjUN
TCsPOShosEFH+L31axv8vLZloEcN5+sg7ahoRwO595HvItewYX6oNLJ1F47/
nOPJv3L4fnObE4G7Mf/iCl+OyWL9P9sex0fBfFUKC++XYYPZZs4zulQacNqf
dupYifX1+K68M3QaPLp3+WuzOBtITd0F6xgY78Odwy1ibMhbG3q7Es3TdDH8
KxnzuS6rbIigwdWcJO5fomzgkxyotnWgwXNFymeRFWzI9I2o+4ZuvXn0sfxy
Nqx7IvLxkCPmf7uKzAYhrG/u+m35e3A9DMfsKAJsaCt522nsRIMjbLKsNz+e
l7wuPY1oLdMSVhie36cKTw5yuOD4+/z9b/LifBYlx86jdz4+qVLFw4Y7uwun
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
6DltHuvtCmSIaI+tP67MBA/jGhNn7Ac9Et9rqagwwUUzvW+rHBmsDcTSq9G/
V+y15Jclw/pfjjO+a5gg1LKdfk2aDKKZV/YIrWXC8yR9SamVZPhj9evZXTSv
2vpkL0kytE9uWE1Zx4Rv99UeJIiT4XleSMwEevuaTWlxZDLkU5/8Sldlgt1J
K0UXUTLsv2db1KbGBI5/cfbpQmSgu54mRajj+sk9+jfFTwaDFV9CFNYzgWvN
+J6NfGTg2utl7KXBBMqfE+rrcT9+SRfm8m7A/HjWnjuC+/++dozzJnog0KQ6
CeMnc21U7dBGJtSny2/cOYH3oebX609rMkFuWc7+gyMkcI8ROq2txYRFr7We
B37jfaHnAnFImwlHOpmef7F/F0n7Vr5yE8bL38X9JzF/pszXyj1Bm3Pe2/gT
86syp7Tnnw7Wgw8bazZ9IAHdsSEwUZ8Ju/2vO0/jfeROwrklxc0Yn2b3A27g
/Yav3CGlHM1+yW2hj/evcskfhb8McP1aIvSH8bwlWd80PGbIBCu/a/YSuSTw
D91XK2mE+3lb1FT2AgnkmmZ+bjVmQpXpc8aLU1i/uJ+FdKJPpHLEu8Vi/mw6
wR1qwoTu1ITIjii873ranF1uyoRmM3uDzUdIcDxt+ep89MHcgEeBwSRof/Hp
nrEZE+7frf0b608C3bFMs8/omIC9XOFeJEhZ5Vzvb47r/5XRsN2ZBH27Vjtz
ARNq9AQDHAZFwTyq7/dF9KfNlzy5ekXhwt3bYdoW+LyB7oKXHaKwfbn+efct
OB7nCyujG0Sh+K1dY6UVE2yOX72yUCKK52CI7dFtTFh4qWI5dUwUPh80bCHb
MYH2UlNiMkwUNK4tsQrRUUETustCROEbZ+LJtu0YP125LoG+omD1PKdy8y4m
/Jg5RzeniULOiOfOD+jvoc7n+neIwrS8agd7N9bHax2KN2xE4VZEyVwGBfNb
mGeNt6koCBvV6E7RmLCkNPqpU00UfPySX52iM+HqqtBj2mtE4cUFKk2ZwQTp
9yXhlxRF4eDM10AagfVCl9hzRwrP77KxwmJ7Juy01K/8wCcK2r0PDG0dmJBZ
GdZWzyUKSWJHa7+hfT4PxFQtioDpAd4+4T1MaMhVmT89IgJ5mjKr9zkzIed+
o5Z6owjEZP11Iblgvbghu3zknQj4LPt66QG6to829uOVCNgdfNLi6MqE1sAj
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
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
      AbsoluteThickness[1.6], Opacity[1.], LineBox[CompressedData["
1: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
jdjP8cEhUUfEYX/moX+zaI1K/4st58Thfzla0P8=
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
      AbsoluteThickness[1.6], Opacity[1.], LineBox[CompressedData["
1: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
qXLD/wCkBJJa
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
      AbsoluteThickness[1.6], Opacity[1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
sQOjhjuTvP7+I743OdV0h/2o4f8AqyAgWg==
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
N/A=
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.560181, 0.691569, 0.194885], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
hMg/p+LP3aTCjdK45bMf90Krt3Hoo1tU2F6kOLT7vgJ4lDX7mWZSIVPLsOZV
8R7gnTvq+RPd7Fc/lvNsNzyWrXW5dhvrlWHGiZZ38mB55oD9wSwq1PY+7zUY
VgamvHKrfvRL1omuQk9lyBuVNwvKxn7zLKusjF0ZZk/uMKjJocK1ngHJiv1K
kJJ+46h1LhUCVSwel3Qowr63fIf+obslPZXIrooQbLhp75E7VJi5Z9sfX7AX
ODQX+RoKsN88uPk998weKA5y43K8S4V3x9Zd2Fi5G8iPpzasv0eFpd/XRp+t
3w0ZioN/9Aqp8PehPuvmR3IgK9nwsfUBFfSdX0+SVXdBu63mgFsR9qu+a6NS
WTLgdevJuy3FeH+H9AI9Thl4yl/cZFJChQttgrd85qTAYOPVondlVHgwqibl
0y8J9MbkbpdyKvil5HgwO0pC4IWYn0wPsV7ssE10W5KAwrWAI7srqCD6ZfDQ
xFYJqHvq5fgKvXX7za6FUnHo93ONP/mIClkqZaqDBuLA8d2yJ6qSCuUbhwLJ
F3eAZAntt1AVFY41LJoN7doBGgyj7eXoDXa26/U6xIAxqek8/Bj711H1oWfi
YtDaL76mUk0FWfn5Zr1eERi/KiTehjavCbxncVwEVqm8unbPqJBNLN+9p14Y
5DvYUpNrcP9ZJSW5m4RAO+Hvo521VODMtk6XIAmBpf7P/mp0JbNO0dLoNvBm
X/hHek4F/50fnKJ8t0Hiq8+Sn9EPOPiae4jbID/so37oCyrsmt7NQeDcAbWH
+s/yvqTCJrWup8mDYvD+d/elQvRDnQGr+iIxmKtqeQx1WD83Gy4VnRcDdp/6
ofdoWopEqCFZDESValjcXlHBpOP0n9s7xcDoQbHh9Xoq7GHemdVyczs4Ohd4
KjRQoWlio3Gp7nYIlcpKb0DPHXk2/ndRFIqzUke/NVJh2Da2vs9EFLiueHsb
NFPh7YEGWrSQCMiQ3a6Poql9fOpPu4QBuBxrfd9QYfSb8nrzWGHwiDXbkNuC
+RDbS+laFYLOELWbf9qwn1Je1T5d2gaf1ZRfprbjvFF2vv9Q5TZgWpGblO7A
ehm1cUg2YBsoeonspXZSQSQ9Kl2LdRukOTLVP+jGfCRtH3CS2QqFEr8+a72l
wm5X3d3qPwShbvTb5j50xKqGo98rQfh+6pMZWw/md1RKwm57QaAYN85YfaDC
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

       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.922526, 0.385626, 0.209179], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.528488, 0.470624, 0.701351], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJws13c8Fd7/B3AjSpN7XSWRnVUZIbOXEdLAXVmVee1VRqHspFRUVChlFSEJ
aVBZpZCkQkoKlWSUSiG/83l8f395PB/3OuN93u/3OVfKJYDuzsPFxbWbj4vr
v7/n3VJ5uGCNaIWUjvHbDpAbfjvxmm6NtvX/840Apf7r7tY4oPE/Ox1+d1o8
3Bqs/7fghVNmx05Y493a/9m8TsTr4mVrtCr9z4c+ZRy7UWGNsP8fL3AidMDt
kTWOmvzPLtN0gxU91ogw/Z8b/d84Xe61Rtb/f67wwTVeqY+sz/h/5prb3NpC
rPr/7hZTEAl4b43BxquKvCEOKN+4cI9QvzU+/vjgsYH4KGvkyk1i2dDsjSeJ
Xfe2jbM+WOPatneZ1FAH6J8s05kiDg3LTn1ILFx8KjbjozUO//ogej7MAd8e
Bz/VH7BGT/PVDRn7HdA0yBbuIw6ZGO9vOOCAizw6u2IGrUH3uyslGuGAsNVi
BTJD5HODBZPpkQ6w1p8dbSTuc35ta3iI7MeuT9vzkzWSehSsl0U7gDv0YfTC
z9aIvDLTLRBL1n89gWL1xRrKhsr5EYcdcKzFw2GCeGT+4aHvRxzg9mVL3ulh
a3yXc71z+pgDaDJLtbq+WuPx7jxReqoDRjeNHwofIfE7sCA/4AxZr2PHo1Xf
rFH2ebSu6qwD9qen2zmPWqO83rjq4UUH2Nzcn8M7Zo3z68uOJeQ4QKnd/ms+
cdNY9o+9BQ54I7D64PC4Nb748kc8KXVAhTx3U/KENQYUD2ZsuOmAZJOPS9d/
t4a4Xui2x7ccYHjwyqV9P6zhZz/m4fvQASIZSV9ok9bY5xnwPLLJAWNVPurV
xI+eBLVWPXXApfH1DTM/raGZPBt55ZUDeN2qPyVMkXjyqN2JGHVAb3SGqsIf
aySW19/qmiTzX4g88IR4qqrLfM+0AzivsWjZtDXu3Uta/WWBIwwnpZk3iP/W
yHmMLHPEciG+C4wZaxyhmhqJLnfEY8vmdedmreFxd37JmJwjLntcC9P9Z42G
JSWG59c6Ijz++INeYveKThdfTUfQLwcIRM1ZY9P1Q6JeBo5QrrWhS3HZQGfC
8etonCPmvdHIrCd+adBnJJvsiN7ftAF3bhvEKLNSd51xxAm1npAiHhtYDouJ
9eY54k2b7rARrw3u5Z0dPl3sCAXfzN3dxMfbO9ZbVTiirsDRfAGfDXZEJoq1
1zvip1jfCs58GxjJDodNf3CEI//AXanFNpCqOmM6JbULym++cZ+n2eBK/6G1
R3N24XE894lEBRus5W+wdLq2G5Z/f6uk2NhA9ryW2s9MJ5joXNzYfcAGZ0f8
mzs7nGGZNiDjl22DfM8JzRY5V5h8LZYSvGSD4HbKoPVGV+gbhay+Sawevcgx
0tAVWmcNxNmXyXq4yz7lmrpi/Tc+sT/EJxlcRx5ZukLBpG1FVo4N5MJm9D9Z
u0L6fLrIplwbLPbN4+fd6QrhzWsoCXk2uNj8+/U6V1csyRxbppBvAxv13D5D
L1fwT9xa8pR4u+/facsAV/zJshAQukLGYxbv3RnhineTXlwXCm2w5oe4rdFp
V+xljvW23LTBlJ55d8i4K3yKbvUEVNjAzWTp8zW/XOHGFd1FqbTB8lUxb19O
u2JnsWCnbZUNdht5b5Cf7wb9eepPB6ptYOhg2XNW3A38FcG3Z2ps4N9ixH9/
ixvmBAxuZdfagPG50ULdyg1Te/gqje+T8335M/sy0w3fK1vLB4m5zjxftMTe
DV8XpZcdeWCDrc8E/5z2cMOA8+5S5Yc2uP96y/i4rxve3ZIvbiMOdruzcPNe
N7S73roiXG+D0IXGhR2Rbmi+HZV/i7hFxm7t4lg31C2zyLVvsIH9wyud+olu
qLjbdfFSow2kk74mx6W64Tz1b5rKYxvs2bokryCfrH8Y9xuIBV4N795c5Ibg
B4mfHZttMGwQ6dRb6oYdfjS9409IfuTf0f5xyw3zHqm+/9Zigz/P87Uamt0Q
GO6hdP25DSLzNEN/fCXrtS5lmHeQePPYZImMu2Hrmp+RfcR/9CUF1CfdIN8Z
+2xZJ8kPy54qmxk39K69GBz4ygb9dfdcNix2h0V/Z63aGxvIr9WbOazkjqpb
Yp+biR/vOnN83Tp3yJxwEXLptcEZn8vubWru+Kc77nrqrQ1qJV5/+bXRHb5C
2seV3tlAvGEuLUrfHd2fDlbVEReY9R7hgjvMahv67PvI/gt86w6YuKPizCKB
H8TbP5YZfzVzh7QPXf3Yexu80fM+pr3ZHSeNzjvI9Nvgp9LtgAsW7phZ/j7+
LnHWoJnNv63u8B6VL2V8sMFrH6qqvZU7Xjf4vf5KfL5GYvENujtMMyu44j/a
4HOP5yAP2x2rLYwZFQM20Nx/++RZR3f8Kr3+SWvUBkIfUlg+J9yRZFpIaSEO
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
A8f/UT+IbLY72Dxs/n+6VKnE
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.772079, 0.431554, 0.102387], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
pUGvK+vXaDyJR8au4Sk9Gh6bzR8IPsZG8EjPWOoWGuyPvWrhTWRjAXwnV26l
4V7kfZtTxOdPcU/XEr/Xrl8idZzk80D6HF2fhgdX3/VmE9/ZqMY1TOzSsuiV
chIbpsfv8cVso+FZKe3rdeLuHotFEqBBcYmJYGQoG54a/UtLiN8H+x3lOMLG
bPQhYePtNHzNum15jDj59UKJD8TbkvhjRMNI/A5rKSw2oOFj1kzPThKf8UcR
69x20vDuxVjZeCQb0aJCuv+IHWYHdt4k8RFyv7Y13YiGDd8mNA5Gs6Ej2GLU
YExDKzd1MSeJT7ClhJWcKQ1VW2S+BCewwXez8EDVf/Z8usn5KBvn5rY57t1N
A//+lM/7SHyqs109w8xoSA/dt51G9vv3e1l4514avO/NSp9OJevdZhzjY07D
8KitVtkJNqROdSfwWdBQ0ff2UtdJNvQ3cp5cR6VhC69gmO5pUr+i92afpJN8
pSbt33mejeWvP+apMGj4E5+jcf4CG9nKQTfriLeFtu//kcHGo2cXy78zyf3J
CaytvEzWK/qt0cSSBt+Z5syUHDbS3cKe9RJ/1DyvQ7nGhkrN0rZgK1J/VMLl
ruSxYWK/oSvXmtQbVhLX0xtsdJU2v9fbT0NzSvmU2002PHgPfGonfhY/aSh4
i42kgthhjgM03Kms/upZQvYzJzp+jvjG2JatSqVsFJoXTK61pWFg8O3QpzI2
tmZvnX5MHJidOH69go3WybY5GztSX6VoewOq2LA1duaaJA5jafHsvMPG2IUp
viR7Gk557uPOf0Ti8f34IgUHGnabGAhFPWZj2TaZZXeI0+wruKyfsKHW2lJv
40gDx16jDwea2TA8cCSIw4kGcckrY07P2Dh0pLPb2JnEi5FfFvyCTd5Dp669
caXh8A6Jh5VvyXo1F+hNetJwUjDoR9YgG7sUxl00gmmwcBHOl17shhje+ppr
x2l4mqh2Z2K/G+rpir5GSTSc2Sl7gmnrBs7sOKWvxB5vMlKq7d0QpW+coppC
6uMhZZ5IFzdEHmqxvXmCxLvixNslPm4I+/aG8/YZGgRXFojpxLgh+PmwcW0m
Ga91fvZivhsqJffM2lyhQUW99TP3TTf8ci8qmSNusFX66XnLDeuql7pkZtFQ
fORNx64CNwTy+Ulsu0qDMVaJVBW6oZzR/ryXOK5kX4NKsRsms3ViorL/u38O
ny/edkPAtt9DD3NoWLZAwC+10g2lKfuuOOaS+7Iyr3fxHTdMvKumc1+jYe+4
TF1qjRv8Q47UGubRIHss5+mlB27wvc2R+iSfBr9Hf+Q/PXVDyT+HHW43aHDc
FrA07Lkbxvc8+s1fQMOUa/NBiTY3+AzF25nepGHRHf5Dth1u8FZcpPX8FrkP
bq+al/e5wfOsyOv2UhpCps67Sf92g4zzrzK3MhqipWqy7/1xQ7t2x+l54s5x
uW77v27Y3HaGrlZB9nO9CiUc7li4SPhVdBW5H7uXj/gvckd+lFC7Zi3Jh4Cg
+qPy7rAxn7jdSFyS3N62T8kdy2Ta02zu0XCTGdCjpuKOhu+3/SaIx57vG+BQ
c0dITRr1WB0NEb8ih7vU3aF+3E9L5j4NrJbh0QoNd/RZUpeXE4fSLo6d0XbH
GRWtH7se0GB5wXuBGflu/HvZy15irRKdVevI95mG8ZKghzSM31sbqLDeHUWn
204uqqfhQr3doOgmd4hqnbTY+IjU4xInMyF9d3zxXNqW+pjku+xPLrqpOzI2
jxUrNdKwrv/yOf897tgr8OLEXWLOrAjmeQt3VOalmn95QoPp7Eez3yx3xH9c
8mLrUxpSjDXVZp3cobRvcev3VnIeqsOZGpHucNwh0GLaScNOsW7f9XfdcWUP
j/UIMbvzVpN3nTt6LP99PdFFw4fmT3bF9e5g+fzi7ugm93+rr5nRM3eYXvqo
Z/eehsvuEjLPetyh/fvOzYBPNPyI3jPuN+8OrgKPpEvfSb9QY+uO7PHAtgoX
iW0jJD8Pfh7QpHsg7IH99Y/Eu1YfiAm39MDvN6xHymM0ZMrtStJy8sAQt8Hf
kh8kfwe53vMc9oDKUv1E+gS5vxRPgZMRHnBeoSv2m1i0pm2lUpwHPmhq6OhN
0rA85sxa9gkPtB+Q9Hz8mwajkblIyzwPLHUXnWZP0fCGg6a+utADZoHLjy78
Q0NUWk4TX6kHGo8vyDGfJv1HbdvLznse4E7n0pogltJO3PrikQdwda7uzAw5
z6q2C63NHrhb9bO76y8N+ZssFQY7PDBVP+oWNkvye/35vVw9HljX+u23zBwN
iUUdHis/ecCvqz/uIbH8tWWHqIMeKOrvFXKep+GV+K6AhFEPDI91Z/H9oyFL
INKuYdIDqn871t4gPnaoVG/RX7Jfvpe1uzno6D77wTZ+wANXl7eYjhKXTL+2
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
wElNmcGXvPA/Fyahgg==
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.363898, 0.618501, 0.782349], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
owc9
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[1, 0.75, 0], AbsoluteThickness[1.6], Opacity[1.], 
      LineBox[CompressedData["
1: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
26hqhvNxdBCX2A+sR7mR3l/NRaF78sKDarSOPN+rPWRRUHRuCzYcw3pP16fu
pYhCas/s1n40UUzs1zf0sOHGwYBxOuQE513TouL67pic5JjAece1Nk4NfWFb
mHEB+uK3gMC3+Pk/BSXLKpN02MXeE7MRTePvvNGKflv3rlwIn1cb/4dh/5MO
x5aPfb+O6+GblZGYQSv3PzP+eRj3z8P8VcoU5svhuuZeU1FoeR+VLDmN+W+1
z8YH33eTyWWdW+johRDey7gfMfdfTR/4hfPCjoN9qbhfvUorlz6iVRcfNovg
fqqXyNuFzOC8b9f3zAj3O1eEJsgzi/WIevr7ZjyPiaS4pxfR3J9nZS/heR34
cy1q1xz+n+N3TLeSKJR7v1NuR0s8PDtdhufLMsg64vybDmoCn+I2yorCncfW
5pnzdEgNov7ix3ldWD1xjfQCzgMnjr9OEMJ5/nLNvTtoDkXK/1Vc5+FUdV0A
wMkYd3TvJcqQCqFByBRWkQalKOeQKInMhLyFhKjIlDJEIkMJGTKEiGQOiRSK
0kAzScjUt74/f89z7zlnr7322ms9v4nziNxl/tUfZjAf9V5LP5vDfF1Q6T/9
F+/3nKueH36LwpCHdTRtFs/r3Z9v0r6JQsLB0hmtOTzvrpGCzAFRmGh6e+8Z
umz9s+bGLlEw0RK2s5/HefBiaYZssyjwSx3riF0wB4dZh7wX93G+io0KkVs0
ByGOWv/aHFF4tKRSoxpd1pgpK58qChKnPn43/Yf1g1J+sf2KKJwapWeMovW+
OAtKXBCFLksd8iwXAbtdLE1NdDig3O5AYXET0Jch0t+0gQOX9OIe56B/RKZK
Xl7NgY9FNb56Swi4vHZWKkUc+4dVX5ReoO+fVhiconHgRjx72ImHgKN+ChY3
eTlw0M/FOJ6XAMv41NCucTbguMSlxEdAeoHIZqtRNlCO1JfVoU/6WWapDLGh
wUBc5js/AffWHn7wuJ0NMuWGvcECBCyjLjvs34D9rYJnhJggAcKZ2TVB1WxQ
pTZPbltKQOKI+gP3e2yIPjdxtw+94ZrmPvI2G77+kjziLkSAwSQl63IaGzJe
+rReFyaAr10x9FUcGxZ3pgduoOD3G/jQxyLZcOjhU9VG9Ge3GNIM52+RdNmb
41Rcf7+21HwAG6ZNnLiv0vD95i3Zb/9jw5uFwuPqdALCiu/tWuHNhsf5U82v
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
C//QT5P9M0X5Z/T/BzrC/AY=
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.647624, 0.37816, 0.614037], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
6Q0=
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.571589, 0.586483, 0.], AbsoluteThickness[1.6], Opacity[1.], 
      LineBox[CompressedData["
1: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
6QFSD+S9k0L6WLDqG3Xc3C2Jf/RIR+m3ZP5d5T929pEkSsSz1W8SW+5uuvWk
VRJmQmVzzv1kvTGfb7fcksRHnmtP/xHn7vkynUjqQ9LsgzNl71hQWHPHR7xa
Est+vw3b+J58j373VX1dTkP72MSmL8RabyPVMoto8P3Kr5Dxgcy7N7cMnj1C
g9BH2fGVA2S9yf0ctSwaqvpW3ntK7LRBJ55yiIYtL00L9n8k/fOTqZtrHA2j
/7H9pAbJeUXSpiQjaMh+4Lf+BrHBfLmF7n4adO7FiDt/YqE08Ld1/V4ant3K
G5gn1vxvAV+xLw37rlVcLR1i4aF8T+h3DxpotTdSLT6TerrNv7jClYb6ysc7
PhNvTGyMubeDBs6ZD1rpX8i8U/iIZr2NhqmiX9wrv7IgWnLKTZ9Nw/ECoRf/
EVOPaHkmM2hYl6twft8wqUdhcYob7Gl4k6YbRf9G+o9lbo6LHQ3RBzfaNRAX
8u26/nELDQox25V3jJDvvdqJo08309Actndyjthls5nGEmK3oIT2klEW3j5n
hPfb0MDtf7TQ/DuJXxvVyH/EZR6Ve4eI5Wvq9FPI7y1cmpA2RvoFN195KLn/
J84zmuY4C7Vmkp0PbWk4ZP9p6AnxseDB84e20rDc5s+N4AkWDmeHGFc60NBh
Lpol+YPMDydaU/VYNPgbK7tdJ36U352u4kjDwtWr9J1+siAQWW4e4URDtc4m
gTli1laDOsOdNNipu/ScniTzMzWpx8mdhjHV4GqzXyysaj187ZM3DbkKyXGf
iO96eNi82k2DrvQJRupvUp8nfhzRDqahi3JxqcYUC1J7zQq+h9FA53vRGTRN
5l8t5aaSgzRcm/tSTPtD5rmQ2oHD6TRsm5oNvkb8+Py/5tE8GgqHl8jM/iXf
Q2/ennxRSoPR4JpvxTMs7OzZU+RRRUPf2y3NprMsXL/fyNxWR0PsK7e8QWL9
kod3627RoPQsxDNljoWrvieGQttouPMwdbX6PJnHlNRaip/S4N5aJPyYWKg1
jKX1hgbe5tq3gf9YeMBJPrVkiIby6621VC42enQGVs750HFT17GmirhTa6FA
5D46/rvw9aIZNxvaJ2uc0qPp+Hta7MI+Hjbyb/tHeJH5mLKotFKYl42c8ARz
neN0LD2if76MmLuYlp5dQod96raKLj42Yg2rMvlrSb3m+XbGn5+N1POXrBWv
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

       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.915, 0.3325, 0.2125], AbsoluteThickness[1.6], Opacity[1.], 
      LineBox[CompressedData["
1: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
CaW1tYf/rM1Bxp3PbuZUJtJtOdwZNjlgfGmwuEBjQuaQg8+d8Bx8MCsQ3SnH
hNui4tF/tTlIbxZunCSW+FetUdScg43bjyRmyzPBWhlfu6Y9B6NfeDaqLWOC
6/z3hzc+5eBcSMzfx8Qr2NPi1KEcOMz+Lt+mwERGr9zPycW54DkS5DdKrKE5
/WyFeC5uS3xTTlZkYpz5rWCdbC68znl8lFdi4tv2QV+l5bmgaHUV3CFegkmj
kZW5qLvLptspM7GDV0rkhF4u1F9ZPzugQv5fJeNOmlUuRma1r3SpMjHdYrLg
y65cqNU9E4lfQdbDzDl6a3AuPDId9y1XY2Lro/2rsvbl4r18glWgOhMWTY0e
hSm5eGLS9mVek4mf2y6/HrqYi3+L/LYWazHRLjJsL1+Wi3UtcxXWK5m41bpW
WKMyF1fd1RJztJkQDGmjN9XkIi9+v5LyKiaiacxes65cNG8WSf2P+DTtsY9J
Xy74xUp+7llNrKirTRnMRUxR85OKNUzY2SnG2Y7n4o6fp5rTWibmQ84LlE3m
4ufqyaxZ4rOFqu8GZ3Ph80zRzVKPiVQx6H5flIdzaXfqvhO3Ob2tLl+Sh07m
Fu0sfSb4rgZk0kXzYN8fPvt+PRMK3jfGZKTzsH5h/SlfQyakLYOeflLPQ2jT
Dl4hIyYK3mo6hq7MQ2n+T79bxLN7fuh06eZh0OVwK8eYiS1LKqyXrc2DkqqM
wTRxdOXBIkP9POwYuXH+7EYmsnbRjVcZ5KHgjvlicxMmjiipSnEZ56EltiN4
kHjPAJfeZZM8CFoFtqeDiWPfTQ00t+XBUpgXq0yZ2L3h7JpwpzzEvT92qY24
+rae/xHnPNw/qyUcbcbEGSf+fj+XPEzsehopv4kJXk2JUzS3PGjrcrpriMdX
bM/Jdc+D7+R3i13mZDx6Z137zjwUPzlYKmhBXHzUcMgjD90pEpRy4l/KR0Yb
PPNAc7gSw7JkgvvV3b5wrzwwpDb2TxIfK1GgDBOnf2rdcsaKiTuXnh3W8c7D
f1d23Ta1ZsKl7Zy+CTFP6Iz0AHG6dtUKGWIjg5yE1M1MbLq9eNsz8vtIHtXv
2jZMJHjmP9cnLn9x3+ENsbWJc9g+Mv73XPt7e7cwcdzS2T2JvN9y534FWVsm
AqLy013J+7srR6U8IX7xfvEkL5nfyaGlY15bSTzvrCqKcM3D29tF2xbbkf2V
PJ9+e0cehGL0H5cS0yafVT7angdr85eqDHsynwWK8kcd83Boyc7MP8SnjKqe
63Hy0J93+e8xOhMXTz+UusXMg7nMmPsGByZKni1Om6aT9SvSf9FJnHfzrJS4
XR4WaBxcE8NgIsQn9vmkTR68btadlmMyYdJXknndKg+164X4HhPPqlAjtM3z
kGh1pp2bTeY733LitBEZr7nf9ALxuwKZ9pT1ZDyO1jVzDsknv8vWbCLxtdD7
wYHkbUxILio3U9LMw+GEDqWl25noOSDz5Ag1DwOLFdPLiL/bXh8cECHxk7P7
t70zEwN9SdpignngO/f3v9wdTFz3FBd7M5eL5EeUAJobWc+qY+vnPudi0Nzl
3T3ioerALS/J+bR+WWzi7E7W76SVxcBbcj4/rBEr3EnyCyVr7MjzXKRMOtxV
9mLC8eZFm9hi8vuDJxSeE7+5n+f/+BT5/aJPR3y8mZBqjZxqzs3FYmrwjis+
TEyqL2M5xeUidU0mt44vE5sPTi6RccrF9/ttfi3Ecn/zD7+yy4WNmdzbED8m
Hsao72GY50LA4frFij1k/JurI55p5yIt8MUWg0AmhJ80pTO4czH8W7TyA7H6
RRnX6N85sD3gJH8giAnFk24ng7/lYEn64NjjYCZCrzUw61tI/r7CV2ARRvJN
mOoLlTM5yOw366XvY+L9CZ7nOVo58Bjmj/hKbPvfurgi+RzoTzQvjo1i4pBH
qkSKSA56eZ3XXItm4mTfsfrX49moEFSsN91Pzv9/9MF1X7KRIv51RzvxOmnN
T4HvsrFKOezwwgPkfRabu7pVZYNPc4PMaWJGSUIf9Uo2OlfP31gdy0TUjT6T
CyeyUWbw3LyBOHqFV+SC1GwkmKV1uB1kgrN00WGD6GzSFzoE/iFeurMx0MIv
G5oMSd6MOCaa/L2k/6lmg2v7x2PK8WQ+M56f31Kz8XbnBa37xEcXPZM6y5cN
mR7eKOU0JrqLO9Z+I/X/cket6J8zTFhx3MNfuR8Bn/xF1olCJpp5ZfPr9I7A
0yP5mNFZEv+Cbo8LlhzBk4u7O3uIUwLUx036UiA/tFnu0DmyX2GHXt9yTUGM
jqa76nkmVh8wGWetTUFH2JILDcTfI7bH8gmk4OhMs5rIBSZk15a2HKtMxi+U
77lNXDDVf2xvWjLsk3LKOMVMMMv21/vsTIaAEGvtmRJSz/qfe4ctTUbcsg4T
jctk/klN2RY+h+Ho/SPA9RbJR7tMabpvDuHOleZy7tvkfOW7PYm/egjiIzfG
i4nlbnW97os/hObI0KihCvL+VeO6b3QPwTzlb+K+u0z4Tx3t8c9KgO417tO5
D5nw3FI8d8g+Hot/Ul7U1TGR9AZMpeAD6KyMWO/2HxP5eQvFnqsfwPXotot/
iWfceUZKP8eAviD/kFoDE2uXF886OMbgmKSEcWojE0+YKfs/m+/H8o1i5Vtb
yP9bvfmpqRkF0zShgrcdTAynhNUztCIgRg9cENBJ8g+Pgfa9kXD0SzSHLvzA
RN2R9Te9b4YjpTDDXq+LieCnH4Vy9MPx6uaSxce7mXj1rl5tlVUYzkX679Xt
YWKi2n5fvWAYQg1ffqknTqgQ+lLSEgpzLi3Wzl6Sv7gXR911DQX1eVrNFHGx
SsN+M5VQDB4Z0s39ROJ/8+5B3e8huG+35axGHxOZQQPVCeUhcGkXiHH+zIT+
04NX6BtDELV8kUffMBN3vSIltzXsQfAVqda9P8jzh5YzK3z2YPdKLbOlI6Te
mMhdalmwB47rHJTWj5L1yR44ZrnJD3oWp/oyfjKx8Vjv6RUNu/HLS8dzwx/S
r6wLXVs96Y3vg6ZvmomldK5NLCnyxid/1iavv+S81Gk1Sdt6oyU8Sjlrkokb
TYv/Cyvywo3EZ5/7/zFx30SzW9rRE/7F27yy58nvKwVPGn91h5ea39vlXCyE
bNAO7k5zh/P1GPMHxFdbYtb0m7rDpuK8ygA3C15dRtwZ7m5Qrx3qN1zAgnbz
gO9LLRcMfD7o/ZWfBaOSekEVESd078pti1nMQpp2LjMvzxFtQ8UWYgIs3C91
fZFDc0TteMNyY0EW/FK5LIxWbCN9t8RA7lIWih/vCrTaxib17LLPRjEynlxt
jh4PuUd8bkvsJU74bGatX+AAj2LeCwniLFh8eNa4VMsBnsvdeuokWNjh/nKD
kQsdPiuojvaSLKjvH/U0vrYVX79uivxJfEtR5PypMVvsvhxyNI/GQqLmun0l
G2zhq97U8l6KBVm/9IkH72zgr5m42V2WhcyMoOUTRtb4MXRzF48cCzvtbq++
cdYKgdd7koqJD4ZOd1D4rDDiv7TYUp6F1/+sZNSCLRG00rBmkPjgl+N/vny0
wNiP3b2py1jYt2Zkj729BYLLCua0FFiwlk1Nys2zws/AWtlXxOlnZ2p5BK3I
vfSXQYgiC/QlVyYCEi3xa3SZk7gSCz6eWRJv5y0QVr51byWx2oUbKusOWCB8
1ZXbU8os/O05Qxk8YI69a9y1ElTJetusMhA9ZobJ8QwblRUsTA8PfLBTMsO+
ige764hDot4FJN8wRfQ6yRIBdRaCtnp6fHsFxOg3y+VpshDwepfsJ/pGzP6d
NlynxcJAaYinYLIxYqvUt78ndncZTdV8aoSDG5IKZLTJ/uhZ7t9qaogEQyPh
Yl0Woht3fpIMWQ/eGd+VlqtY+GkioPWzTh+JD49tGST2TVbd9kRBH0nG48la
a1hgZd+3Q+86pJhc5apcx4JoEv1ZXeYaLOZql9+mx0JSzjFR+wVrkPpkofEU
8XQwA00HViPNdGeU8XoWyq8om1yLWYXMTbRfzw3Ifs3sSvzA1MGhxFpDF0MW
cheXbrNP18a+58FJE8QbjUWWXGlcCQ+rBpqyMQtzkqtoQm5a2JYS4XGfWOzx
SJDUbU3YNihed9jIQmH6i8sCQpowFWj+PUh8Ia625lOQBvS2RJvEmbCgcKrr
UWG7OjTTVY9IggXp++NVr9xXQaGptbWMWOShw+kw6VWgCB2UtTRlQf+wiIpw
my4E7DV9PhJn03TpRdm6mM96fyPcjAWpsHKFlVt1MdFyaEpwEwtv83Pybwjo
4iOjK93AnMxn93C7nqgOWvNS3r0m1nIbP704Vxt1b9cq+Fqw8G/gwZVGCW2U
czJuH7NkQeJizhk5hZVI3L6xc8Ka7Oeg/cjkVk1oeZxbcWMrC7zxkmsz+NSg
eME2xNKOhZoD+omsiytA7Z+8/5G4X0BKTtB6Bbh8HOyW0Fmwe6egbpmjire+
PBG+DPL8qk1Xxw2Wo+FqWTUXk4X8m0FY910F1UPb+Y8TNz51WeZzSgWXA26f
qmOx4JoXezefVwUxIV41yttYUJ5upWsNKSHklsiSB8SCc4IrB68owWf8IZvh
yAI7h4+R56cEegTlW5wTiQ9fRN79qQiLO09X07aT+Cs9GKFbpQiDvwExN4g5
CXGPjscpQiWqTrjbmQXVj3Ur9CUVIXU/1CliBwtKnktsAr4oQGha/sISFxbi
o8QrcysVwGvUOHyB2Eyha/elZAVMxuzVM3RlwXubj/c1ZwX8eKQc10o8JH/r
auEqBfTNvWrwdSP7E/l4ffxiBbwziRHndmeBZuK7b0+iEhrj1FyOE+/Mqvgv
yk0JNnOjLKOdLHwSL04QWa+E+v13bXuJazLF2+xElVAbaWmk5snCqE8oap4r
4qG/l0yVNwuT53RWJeqR+X3XFN/hw8Kbd/KXt0koomrXuADXLhZaeTLvtP5S
QIVHwj+r3SwYGg+feHxTAdcdz3W89yP5wPBydLi+AjTe7Xq9fw8LFUrHShOl
FXCZqdOwzJ+Fc/OCY/tmlqHYrrpqVwAL39f/d9EiaxlOm3cd+xvEwrtqI+v8
WnlI11zIOhXMwoJRKVWdfHkcN9mTbBJC8pvg39W0XfI4avAvMjmUhQ2Lb3a8
F5JHhi6NIxnBQrukivPSQDksKevZ+oBY4CrXTYXNckjVvGThFsnCY7WP6w4t
l8NhVb11l/ayMP89/+W6PlksKJ7V2rKPhSPaod1JNbJIUHyuMkrs7Gq3bHmx
LGJlWRL60eT9Evi0HfbIYuaEzJIPxLF7+6Y/0mURLfmZ9+B+FgIdqyfv6cti
8ujVaaUYFi4uP6nyZZksIsVCx+uIl/dEHHRbLIuJrA1DfgfI/iY6LFafkEHo
Uu7PQrEsTFFX1pj2ymAstb7zFrFdPv/VK00yCOTPbuUcJM/Pf37i/lAGw0nb
XvwjbuY85tt1XQZ+vMtqCuNYuBd86SOzWw6DcQP3zOJJvtbMmxpploPPXOnN
AWLXsgChyMdy6N8fcSU1gYUff/Vkv92Qg8eU0XntQyyU8I8qWZ+Tg+tEY3Zk
IskXBzVlXsTJoSskL0U6iYXaLzeW/AiWw/bR7XHVxMvElf9Ou8uB8/1bEF8y
Cw7P2u58hBzsexfZFxxhITnK/1P5vCx+ySZY66ey4Fke2B43KosCpxnTduIn
r7rijXtk0d06tlY6ndSr+pmhmGpZBD7vkC7MZCHn3BY5iRhZZF69NlCSR/Lb
iMrEhXEZvAy3j608Q+Y38zx081tpBN9s2MspZIHLyuLujafSkBjZFPKXuDhK
t4znhjSqNKr9jp9l4fPR5G1mp6WxY9d6rw3nWAgXWvSqsEYKXMW3XDqJD/ua
9sqWS6G4V2vb/vMkvwqk5c6ekcKwk6LNoyIWWmRsOweipZBdcGqT6wUWxtKf
BY36SmHtG4rxPHHBJpuL252kEGMroGtawoJ/fNIfxw1SEDQZpzy/xIKHyW3l
37M0lO0PEPa5zEJVV/FTsTEaGFVf+RddIfH0uIQrr4+Gk6u6pq2vsnCU3bbz
QT0NGwM5v78RD/AvSPR8SEPf1ZaR1GssPOA2swosp0FD5fmnl9dZGH82VH7t
BA3N7iYfAkpJPsvYtq07k4bQM/feCpWR83q6tTAskYb71LL/6DfI/6f+EakL
psGVqfb0JzGf31nDQ7to4Mkuup9bzsJs5rZFF1xpsFl8rPTtTRb2XvkdL2BH
g0ddVqvfLVJ/w8yE31rSEH0o5S/XbZKPqqP8xk1ouDobZbqygtSrtkupa9bQ
UHM/1OcZcer5QnvWSho69+5Jc6ok/c/Iwb4XK2gQ/LWjLekOC9sFeELvydGg
coP9T+YuCyodRYGrpGgw8rdbdos4W017w7wEDSx1K3PrKvL+kxdeK4nS4D9g
4ttNvGbzgvWnl9KQeGF9Zvg90v9J2/vvEaDhtPuq2wL3Sf/onxiYvYiGCjmN
9nPEFzcWbxRcSMPLTqVZvQcsXMsp6/rAQ0P/MRmlJuLN3hesebhpmGFJWHk+
JPn7XkJC7LwkJMSW+k8RMzJtU+lzktB6tTAn6xELjz5zue+blYR5+lzl8moW
nt47y/tnRhI7Nv/tfEDsJqIe0UAczjc27/CYxMvX0xW/iDOeDaoMEvuaTD8N
Ib+/GPdpc+wT8v9FURP1BlKoNu4MlHjKAk9nSzDNUArv/rXmXSWO2pi3VZp4
5G5jFWpYuPPqSWozeZ4vovbjO+J7GU5q64jlVz/iCXjGwqF9Lqp2JB71RitX
8NaSep39MlFqvRTsrpfZniDe8/bipmN6UvDxvRSi85yFFIthj//WSiFW9VzB
c2L/z6f7rqyWQsHn4w+c61iglFXVbNSVQtm5nN6fxIdLTHgPr5RCnUvqwpT/
yHo0rCo+qCGFbulDGvL1JF6ls0o0V0hBOD883KaBzGdTWsPJZVJQYwSc6CXe
Iq0x7CIjBQj7VEe+IOdFfm3QG6oUgo9s47/QSOrZ9SMFbUukkGJJX7nhJXle
v83AY5EUzvFuZrwi3j+SZnKeWwotBwxOTzeR+8NnAz+93zQMGqx5mtNM+nOF
NdnpIzRwTWoOrHhF+rvUAmr+VxpWhcrpslpYaPtSaP6oncS7DpX9ndj73abh
rhYS78NC0XGvWfhvnDlRRs5jrg9X7fVWFnorKpf73SXxrjw1aPaG9COOi+yZ
ZSTee38u7SAWU69tHymm4df2z9sWtpH8Sz+41DiHBqZ93ZDLexZ0q6an1/nQ
MGHdWc3VzsIxFZ5LlU40FJiN5Fwg3kWz4++0paF9HXX9tw5SPwvu/BBZTc6b
joZgeicZX+FNiLIKDTLqG7u1P7Bwe/W6650Ucp5lfRLDu4iHGzbpT0pinhK9
TfIjqS9HZ851DUrinHCmxn3iB7XhFaodkjBbXDS7o5uFnv2rYykNkvjMc6dl
nvjE/XVzl6skkTjTcKGoh9SbuNi1ny5JQvXPx0iLXnJe5s9VX9tBxX+jPzcP
ErtGDPB2b6Fi97eFcmmfWMjre1QYZkjF4s9SYyv7yHmyWpHlr0nF1a6Vz1qI
4y8otdXLUPHjFduX2k/22+zVzmuzFGQ2+BrdI1ZMiru8apQC3WcHhHd8YWHr
42fmMp8oCL1TUnl+gIVt0lyxtDoKxMvvpZh/JfXIcEpa6x4FFVeanL8S+zIT
l164TsHf07+5V35jIdSPPn7/KAUxhyzsqoZYuLn6ydNcXwrkDjgpOg+T+6Tw
ZsGnbhRURwZMzBIPfPa8yuBQwO2Xf3LTCAuSYfbfzppTUOR5JWCAeGqlwhFn
IwrMXR7hyCipf70JsdFrKThM/zLQPMbCec05377lFKywmboX8pOFjFqqu+Yy
Cuo3Lc2Q+EV+z3p67T2NAj9jRfe7xD1ds7ZfxSgQ1F+3Zvs4Of87Xm7avpSC
67qb+WaJLd9oZevyU2Cn4dJxdoL0V6bLVvvxUjCqHHLd7DcL1y9dUF80L4Fs
uaSDX4hVF96PXDQtgVWSJxgpf0g+3e4hteevBFpFSpdr/mWh6OJp0dUTEggX
eDrZRHz2+263HT8lQFnQ1hg8SfpX1f94vo9I4M7sYKH4FAsrnO5Odw5LwPHv
TMgd4uuHNtjoDElgakzEwukfyT8lW0cGvkng5HcV2gyx2ePxr9zEhv3rhwqn
yfq0aOrHDUqg66NttekMid/23x92Ese+d8/pJx5vd3h3kXjZ63Cv5FmSf1pM
VO3J75+8SNHXmCP3o8ePG7d/l4BH7WmBJmKDi6/rGsj4vNXlH4PmST+eGCF5
+ocEiu/WlotxscH5Me23iOz3/VXbblwlXtl8ZM6ggIJX176VmnGzMaF8zzbw
OAX/zgpdC+Vhw0d7hvb2NAX0FMeS1gVsPK8WDzldQsGM4/CJ3MVsBDalLFO4
S4HYm9jjGgJsHJ1d6WJP4m3FVtFjNcTXisLZsQ8oYJjqHf0lyMb9LQMRHx5T
cFk9LpMhxAZLyjkyt54C1j/xQ2LibEQWpUaMd5D9D78Yf5X4u6KVi3wXBQdH
1seZSbBhTy2Zt+6m4Gqfy4FQChszLhbhZ/oo4Gq8tLdVko3W3ZJym4YooFoY
RPrR2BjJ6unY84MCzccvw3mk2JjW3OxwlJwfzu2fIaul2fhbwxXcP07i6ZSh
f64sG37+3AHxMxTUUJr9NOTI+hi2zV2ao+B9lrtvDfGnWJstzVxUDC8e37Vd
no00/Z2MCR4qeBKTfH4Ra3lLSUgvpII2J+mduoyNZ4vCsk0WUbFy31VPJQU2
snvcfXVfUGD2y8jjPvGOsqFzAS8pcPR/5c5QZEPcyGi+sZmCwIGdbt+JS1MY
iVteU3DIfcIlQYmNFUe1dYffUFBGFu6WMhuvvurPZJP1etZ8zclGhY0/Ot6y
+WS92q03OvYR8+g7et7voYDX2JMtpspGc3yW9+4BCjZGXmZfIi7/kjPb/Y2C
6Bs/2EYryP7JuoZEkPUaU9zH8VFjw4SXNcz9m4Juvoxt9zXY8Kio1DlB5ieF
1m32mmxIlfNdFBKgghUl6dhP3BirOHlBiIrGofOOQivZUM2v0NGmUVHVcsfJ
Q4eN/BL68BMtKiYWzzj9JdbYMIZ1q6nQ2WS6PV2XjZtnnUIa9Km4WNm4/c4q
Nu5+OeLtsImKvJO9zgJr2djHdj/V40xFoJeA6631bCyo7Tf6nUvy5xl7V6sN
bFgmK9rtOknFl3dHXbuII+TUDKfOU0m/scyNz5CNlprcyzE3qTiW4OV2inj0
9R+1wHtUtD644qZrxAZ/hUrSwadUbNZe677dmI0NPz+2cLdSkbgryn2U2MzW
90loJxVPzlW7J25kgxldncb7mYrpDt6dUiZsMPZ/XF0xRIWe+OadZcRb7Osq
EyeoCLXN3LkJbASt+y0c+koSpUlvdrYTZzI/X5Ftl8RgNc0jwJSNW0tzvWN6
JaEy6eLBY8bGkCf3phxSn9xWXfA4RizLWWXmPCaJk36DHlqbyHj9ip6dfyUh
+jHUk2POxse35gKTpH+zpVZ5DhGr6u/NLlhCQ4r9rGecBRsH1/mt/y5Gw9zT
ZK+rlmxo8+X+KJenwWD6pZeJFRvH2uv+/V/9jFgr5v2WeNbyobqtOg3lAdu8
fa3J+XAIjVbXpmH44mnvOeK+v4PDD0j9XdH7yTtvMxvOBgrxvPqkP5Ba4aNm
w0YHjabPZUhDIcPf5xGxR16L0K2NNHSk3fRhbGFj+Mpmfikz8j23GGWC+EWB
Z2CEBfn93tBn+bbk/y3opVHWNKj+aA3R38qG4V3h58u30PDdY41CB3Hr9/OV
UVvJ/aE9rznajuSbXr6DEfY0hNlNxMjak3x1fKOilAMN62tZmtXEy8Q3n/Zi
kP51Q2WHG53El73q2DYmDU9uUFK4Hch+2L2THSdOWh6pd4H4orCTkh6L9D+n
3vWbM8h65JZxKRILiernDRDntb+7e5s833r4mGkKkw3f3tdWI+T/j838HVVn
sRF79Wx5Cxl/R6hjYSPxaz3S+tBpUBissg1gs7Er6faSDHJ/6HeRmhbisGFU
MDXvQ/qbK2+irpQT2/mKvRzcTEPg5s5tjG1sFM7NBotZ0bD6sQHfBPEazsOR
z5to+LP2VEW+I4nf4K0WLqDhwdVpD30nNqi2N8NjjWgwL3j4OHo7yXc2P12q
yP2Df4lcoKwzWe+AJsnXZD+b4g/IVhO3MWKu5pD95gRsjOJ2IefRk7FdgMSH
9OfCFReIE7Oi9tZI0tDjON9m7spG+oGwgP+7bxQ3uyUOEL9ZCSMNcr/Ybf5k
dYobG17nej53kPuD1n2FT+ru5Hzeqff4O0LFT534rEbiAXW9zOCvVFInPxkH
7GSjy5LU314qomXMhoU82NBdOj1s2EHFxpyik+XE72MYCpnkPPIuIg2uJxsN
+UXX1F5Skf7rWUm+F3nfZ1ov9J5QQd+twtL3ZuNSu4/L1ftUULoTeTqIvxWc
sPappKKT+aU82ofsz1xtml85FYUNFm6yu8j5FP6mevcaldxLLy6tJq5oWCht
e4mKFZV8D912s2GxUsZb/QIV5ef+o13wZWPPmA7vo1NUhFPV/jP3I/Fhr8MJ
O07FhvSUiAHibscV3KH5VMxxf1NO2cOGhCBtwT2Sr2r2bm5V92fjgg+3m3U2
FYd/XIlrJE7c81lUIZOKLZ4COgEBbFRKkct/OhUiHX4fhQJJfITkHLycSsVb
u8a0cmJaqIuB0xEqjtdqGjCC2LCWVdrKSKHCxSB9cJz4RVDP3bxkKpTKhwvy
g9k4558fLUc8sHyrhX4Iyddi5vmjh0n+PFU63k682WNokQD5PlBUqCg6lA1p
57RWf+LVyYF02TBSD2aVf0uS//870zz3iPiedWWQIBlfd7y0nRXORtyXpvc6
qf/X76bfGiIuetCzIS+NivM9e9ITIkg+avyevy6DrH+bjY9UJBuCEqND1Cwq
xF6qo5zYpmDYUD+HzL+GX9pqL8kPDp+TCvJI/q36Ov6ReMTyTcPaAioeltU1
he8j7xvxcJHYCSp+F5dcEowi8f+x0ET7NBXapxLji4hXxEaHHDlLhU+Op/OG
aDbOOtqfUSb7dzbZbF0L8QF/uWczF6loP6AovGs/mc+9/j4Jsv8i4VzfZont
UDKz5wYVCe7VpzUPkPlMicq/r6LiAedMZA3xDq3q5UOPSD2zjaE7xZJ6c9xz
xcZnVGhtctYYI+435lFuqafCe4PBguSDpP+RPUk730ziTUeqWy6OrJd3mFHZ
bUm8Wz55t4L43MRSiev3JCEs+z5nSzwbP/6NPA5/LAlrsTt7+oid91HB/1wS
cfz5FlEJbPT6Jx71eSGJe3Nhy0QOkf6iff2jLFJfNIZWvTFOZGMrJSLNjNxn
PD+JlL4ldh+Y0X35URKn348e3pPERoF241WFPkksrS01OHGYDTcVQxmN75Kw
vJ8uoZvMxuTrLtGeH5KILd8zUkdc+qe2y/WnJO5etKl3SWEjJXd8/5UJSYyd
Vi+aID5csnu0mtQjtTz+mLQjZD46Kvpn/0li55GvbKVUNnp0VZk25D5/8mCd
zj1i0yuBm57MS6I1omQxPY2Nx8dnF3GTfCHon/h5gNhrvvXckgUkf3l4PjqQ
zobax5Gln0l9i3E0OyaRwcbS1Q72iYtoqLRTDLlGLDE35TXGT8OIOdcWs0w2
jE2/2a0g+UjVsEelg/jwtPxSdUEaqafVc0FZbPzSOnX2N/HxFWfa+bJJfWxz
4csg9fK1XMytM8Qrf/uYjhILSDinr80h/WbaHbrsUhrMBAx8GolHTtiulSDe
zyUFj1w25uXVh9+R5yv+/JWaIl4tY7vPi3h4+N14Vh5Zr8zK9odkvOWfK5tU
j5Ln93kv7SXv59px9NIj4oJOZ2rzYnLffRUWz8png377+PhhMp9XzxnOQ8Qa
vLIlAmS+/A9XrUsoIOfpxRcNJ7IeuCUiLHWM5Cf+P4mhvDREXR4dvEGc+Mj2
NoebhluFzTWWx9n4/O1b5UKy3spp6ZHhJ9gQuPxXv3ZKEv2PDs9JnmRDnRUo
kPtHEhfH4g4/II65eM1dcZzEEyeigOc0ySfG0ccThyQxnBIkf5G4NkEw2vGr
JMoe+F7cfIbUlwDPnh8knlYrut7JLiT9mf6udS4k/iaYjhvXniX7LyGuqv9W
EncOM+reE/86nnSytVkS++7Z2u0/R+rzwXrXt+T7DcOW7+TPk37ttdm3b+T7
f/KmrjXEQsrP2+7VS+Khg+GAdxH5PtRexbxGErir8+f6BbI/S2O+JldIgue7
eiy9mNxfnOR3mJZKolZWhW+C2OVC/erKEklYJdCohhfZ4F6zju9lviTstnLr
NVwm+RqBFndCJSESN/3I/wobt+PoL8x8SXze+m0hcpUNymODm0fcJMGhfWdv
u8ZGgv6KEsstknD53BrxpZQNYUn35QeWSUKe2jSbUsbGzi0J97vEJdFr/V+S
1g02dGKv3/yzSBJeZQ/yw8rZCO2h1TmNUuEfVVzJfZuNk9kOyV2kXmlfLzQu
ITa/d1tLuJSKse7jz60ryH70yq2dKaQizDyjLauSjesaAr4LE0i9FI78LVdF
+rdSsz1vzakwMgs+8JS49EW/QudaUn/C/RZ632PDYSBz/UkVKuI7XSnX77Ox
XWo6YzMvFWZLnc7YP2Djqe6jxvW/KFgA5vJx4lOWyXv6eilIKbFaZ/CI3C8C
1rz2ekSBTbvpo4/E+w5Sjhlfo2CJoJFFfDU5X1nz1S3k/thsrNek8pgNpcKf
1vKHKcgO1mXXE9teG1qrGkbugxc0Pu55woar4VR9wQEJSLxT8RZ+ysb54j7d
Cj8JvONf9uMWMd+z5UepjhI4ZigVwakh/V1Bza9HFhJoHslRGyX+87jpQuda
CSwoEuhKfsaG3rUz0WtUJBDMP2N2r5b06/+lnTjBKwHrtm4R2f/IflHOn9Z/
Lo7YlG21FcTlW1v3r7sjjgrDlr1b69m4Y1UfF3RJHApFT7tjG0j+j+eZOZYq
jsnA4uufGtm4LFB+9z5THNpKcu7RL9k47bDo+QlLcXi15YuLN5H+eLvyZMUG
cbQYJkebN7ORdfPKq7MK4rjM72d9qYXEW+ToJqufYuh+0Ddt8pqNh43+BxcN
iEEiyPlGOzH9c1kv7wcxxLXZUgXekOcd4yVuPheDY5FOv38b6U+3uZl+PCOG
TPblYwvfkXh7yHMt9qgYavkVtxQS7+7zM9iRJgbdILFbr96T/if8yIvGKDH4
KKV5724n/VqvSaNLiBhOt/FKcXeQfkHowU9NXzHwG/0+uLqT1Isb8zdinMSw
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
4PQ/dFbTtlq5RDb8D+TsR68=
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
      AbsoluteThickness[1.6], Opacity[1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
      AbsoluteThickness[1.6], Opacity[1.], LineBox[CompressedData["
1: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
OX4=
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
      AbsoluteThickness[1.6], Opacity[1.], LineBox[CompressedData["
1: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
/wOo+KPo
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ], 
    TagBox[
     {RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
      AbsoluteThickness[1.6], Opacity[1.], LineBox[CompressedData["
1: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
DU6aeqT5/plHS20oPsXcO2n6Pziikfo=
       "]]},
     Annotation[#, "Charting`Private`Tag$2462807#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{65.0000006122449, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"-dfluor/dT\"", TraditionalForm], None}, {
     FormBox["\"Temperature (Celsius degrees)\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Medium,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellContext->"Cell$$17061`",
 CellLabel->"Out[14]=",
 CellID->31705477,ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzsvQV0HUe2NqqxAxOaDMOdmWRuOJmAHXIYPCHHscNxYogtyxYzs46YGY6Y
WTpiJouZGS1ZzMz0verq7mMnkRznrv+99b+1rtfqc6RWV9Wuvb/aVLvaJyQ1
ZS8rSWrKSUn+60N1SVVZOSmNf32gok5uHfyVhMSvZCUkJIb/JcH8DPIj90H/
yTEfEhJO9Osg1vq8YeTQiuVdSDzD3cPmOPKEwWha3JF4ld67AzuLLYh3NoGh
kQlMTKzgm92HlV38mf75NvKxg8WWcPgWTWELOLn/IE/f0GKuwh32WeNMi1fo
7TvJxy5W+rKQXjmJTea3jSFkWpojaXRT4i88fVsTyHUSonp+R4IbyYB+vUH+
kg1zk0gMbrCzxc4SOlI9YWZgCGMjI9iGlWOC9HsDRcDGICIFtqiY2yG/bGI8
1QLWBVNYJs/o6fvC3VoAEyMBXEVNWNi+xT7JNDZG8+BtaggzGwc4e0YiJdgE
llkT2NoYQbKtJtTMYjG8PIniAEsY6JO+bAMg8ibjdK3+qK99x7xDzJFxpFra
onhmR+J2eu9h0qIL2QE20FdXhaqyGvRtg5F/dQU7N2NLrycMHTuxtNCEOCcT
GJmYwVRgg8CiUWwQUtb7/WFs34TFzb3J3tm7nQRLJ8HXziJak9wgICgSWLkj
2NYQzqTdfvRgex71MfYw1DeBuZ0QwRZ6cOpYuVX27Ht/Hzr5zjBbZg/rDApM
iRM3IuzNHyFsF8vtPtAzjkXHMmHs1jTKXPRgWzRN0XMrCNPR8UP9/A52NydQ
7GIEz8YFLN1Kn1jHtRBDCFJG6UJhphSsowG7lmXszFXAVkBoXGeGjoCxIBlD
ZH7b840IJM84/QRh+8+DAJ6D1EFsTebAyjwFY5vsCobEI+TZKeTZ68A8pg5j
66SznVUMV4TCSMcNlXPb+/OHQq0FfSm2sMkYpuzfXaiDk4ELWglRPNSm96R/
AWN7t2NJfZKdUpsPjOzzMbq5i53lNoTraZKmK/uQNIW5Jk8YORdjnD7fgWh9
Ddg2Lt4yqxb2vD+O4b1JlTjAs3U8FZbWeZja/hHafqzPNjAUSRZCxgQDTBaq
a7NYWNu5RX3mA4FnD1bBTmOpyR5G3h3ouZU+Gf3eFEAWjC9SimrQ0tePBgd9
OJDFuDNbChtzEUZ4BeLQjhXa0wo6nfT3QNu+8+D12VqvBwztW6jBuI27tzEU
DSOjKAysg+Pcg2QWK+iO9EZMxywG95sGp9MYknZWxtFVnQeRnyU0TeMJqK7r
tMl9SMfe7SSuI41ZiCawKZtldSv5vT9AQPTa/D7TXEG/vxHs6hbAqpwNDEaY
wYEgbfWW2LS2Lwz2o5VH2u5SE+wNhehb+xHS7vgp0qINoaJjcgBmZmYSf4CZ
sS4EAf2YYyi0a8CiGGg2KJv9MdB8YSrsxRpH3Uq7E4w829HDdinB9vn3H/Rp
aFfP9slp4NXRdlQXZSMlJhAOmhp7A42TKvkNPW6GYqBd70s8DW7Mg+Ix125Q
a6vdztBn+2Js6Q3uiRV0nDqY+zwIf9rlX65Pg5LUgdnBJFhr6sHGOwrpZe0Y
X2fn9QOg/YT0Faz/tB1nOO+ioBpgQFYxx4FsDX0+JizIfkDPbzh6OtAZZAL7
+r1BtgeL2Oa3cc270Hvj7Tu521cxvweVB3nuECXroO+K7tWfNZsrXUEw96zA
FANhYqXbwgSw40ycjl4QOohzubvcDnctHfi1LpMWa+gnDLCtnCP+IfNMMNqZ
ZbK7jNZAAVyq5rB8sz51AtC6uI2tTaIR+qPg7FeHeYaT29MosdKHR+/aLePr
xr72m8eNZnNzOJY4gcWY2fkhvmZLLaHj3HkdX/+8OWsoSW0YzLOCWfwwWXDE
So7kITy+DUs7P4evJUzt3U7iRpO51CKEkVMRcZKICVxoQIC2BsXm3jRNYaHV
GybORazJJCFCuB5rMldvkU2Le96fwPg+tIpN5lQerMziGVHd3GRShYjuDG9Y
CgQQmAjgEFmBSequ+8LENgy+rg6wMzeETcgVFEQJ4WJvDiObCCb6oc8YWYbA
190Dnq72cI6oxNTmzfsU2AfC0UgLRmQNrWxOoSLCCebm5jA10iPmNwMDy7Oo
8DaBspI2LL2LMNS1H9J+1NfeY4pDgLVeBJgLmYUjNpnr18JJwBbD+IE3mMxV
DFRUooNIZt9p3BAGxLpYwMLcDAIzV4haF6n2uTnS2DBgj3bXwwDi1jfGOpGo
ygRmtl4IMtFhTe0+9GB7AU3xzvR5JmwIcTPiNNktsWjffvehk/tHVkOzK9F5
1JD9EGUHb0SZxGPcvRv0h8T1wJgoXpEtfFuWGEXMLv9fU6+5wEkXlrHEa15j
1Ng6xqtDYKTriZqFG/wgMYPF2mR3awEzcxtMbxJ/FJslMfNJ5Mfd211Eg6c1
4gfX+ShZl7cmOwuoddCEkpISlBTlISMjBwXmZyU1WHBhD9/N7kovEgMyqM/P
B+A7i80Ic88hq553z+7E7toASqLdYEb8czVVdRJuhqCgf5WSebPpiEPK3ZtP
Z3M0Ay4h5DmiBbjpFIgfJyt1tJdhpMTX4nvEYoz2YGRtR+JT9nEqVLn/935+
ln7dS2U5UhQMawN9GBoSpEbVYJbqt0W0JLrChATNhgbmEGb2MimUxzmKVzqd
YeBMvQ1usd5Buxou8IOFPtOVOXxyB7H2M032HuUxnjhmKSWQP+uSHg2MyVKo
YjXa3iP9bLOfGY35s8iFLjqBwBGRlVM0WP250fZrtvdoB27k/33YHEmEGXF8
u8mfsDWDaqExnKvnsNjuDX3TJFwlI+2u9SPd2giBxK1kEMov4c1R0tY8HeNb
1zm6NZkNK5NwtBIDtLvSjXhTc6SMbT7OEXtDE+4fEyHuO9QjHJXMY4tNTJhT
QANUJmCsEhrSQHJ97xElHqVtf3PTtgv7D/0oR/H6tTCYWOVRipmlHGJshayJ
rf0m+hhH8d7NNm82WYlfsaJ5Rkz4FiYyzWEcMQjWPO9gvtoWJsH9mO0uQWHr
AuM5cfdtYOh7lVG+YlwQG+dnZMsFHOxjs2U2EIQPEv+Y+beJ0URzWOXRLOTN
mi3vP9ojYmI3MSIyg2XuJBdo7WKhzhaG3j0Y3X/Un2/ei+n9R3+U4/bO+gwm
Zjc5752MkGQOy5xxTO0/ssTPtV3Yf9gfSooYKBpw6EKZuA/Nc1skwhxEgTMJ
+Nkol10bt4l70ffo/YGgSFze5Ut8quIZbjCOFzk8L34guMf43n7Y7La9B7nO
YLLQWn1haJWKnhUC2bVryHMyhFv1JIb2H+wR8Qz3az53kxnyLGYUYkuKJ8z1
9WBsG4T0bEvignTj6v4Dc+K5c5+2/fSZfYb9yToiXkWkAOaJ6QhzNIG+vhnc
EuqpmdkYSYa3by76lnfIQB1INNeDW+0CMydWZd2DjSER0a1xND/IYogQnf1D
ok1Cr1GC9m5z02HEOKTpmTgzqChpQltZCfrBjcR+33y8m7e9+bg3ImOx0Q36
lqnoJspsZ6UPmTaq0PTsQN/+Y/98814s7D/8D2R0H9t5KZF+2DVuse5ia2ES
06s7xPvLhYWOFZxtBNA3tIJ3RgcNb57gmM04aHVCIzjRhbCDuXIxkdcFxqKM
E9DdP2qD/cbgtfn2TBHsTYLRQpi6u9pDlX3S6PpNh+INyN5tN/cb8rrZYrSA
KSyy+MzVFglKLSGIHcTE/sNet5j7NR/G6j4M/YFrcBcJ9gnhhp4on97C7uY4
rtgaQsiYqvV+BJm6kJhvl9ugIs/OVkIo8EDpNGMZc2FNLGP7MmMZu8iELZBK
DPKT9Nk7fvAsrvf1JMevrfF0EixEoWeVWMj1a0g2NUYkiRz26fYxjoL9mt0w
AoeY+65j1ioD/Ywh3hxDkYslYgbW96X+UR45N2l7w1i338jLeyn7Z2pj4CQw
gYmhIewiOTd3l+DQThXyikpsgKGkC6/eNXawg7TZJFF46kpKRDrkAaKKFWRl
oeVHFODuBsaKg2FjbET9O988ojh3cWtN9xz1ukdJtEm6J8wMjdm9vMRWqk2w
94g/3+zmozHxLYlXjfUMYGJmj+DCIca9/dnR9m2252gctulK+B+GLM+wulxa
Wvp15uMHGuwgcwfcP3GK78Z7d/7/8N6v/y+i5X/v7X2PYu1X/wvI/733f8m9
vQFJn9kLhs/tce/QLT73y+7dduM9MU2/cNX8f0fu/2CZ088jP36STQrumx+7
7Rd3tE/q49Y7eoh+MYv5pimJvfj/cx3eNHTeq8Mynr27O5geLkVbWbDEV/Te
n7G2sIalyUV6rS+tYWN5HTvbZNLbG+T3YSzPD2B66ioWFsawuTaH+bkxTE12
oa+/Cu1tGagrcUF5kjLywr9EfcgR9IY+gtYc3dtuRv5Nwj1K/u1Mu0Da4LfY
IMRMLa2jd2wCTe3NyMkvRkxcAtKSU+DlGwUPJw8I7WzgY2sOPyMLeJkQr9/U
Cc7mjnAxdzkAVzNnEkG5mjqSP1nDx8QMvsbkIh6cl5EZXMk9Z4E97EzdYS9w
h4OJOxG/kxHzaWMcQK4g2BqFwNogDNaGoeT34AOwMQom7LQifzI1iYFAEEfc
T+bzd7C1t4KDmzLsTb3gZatPqFOCs5scnNzl4OkiT392dZeBu8dleHhcgpfH
RXh5XoCP5zkIPb+Hs1CS9OXsdZH07+wlCRf2IveYz/vg6n2eXN/DzecsPPy+
g7v3Obh7fQ93/9PQDr+Ey7EyMAmSglHQZRgEykA/UJa01fNXkLgdun6K5FKC
rj976fgpkVF0fJXJ33R8VKDjrcpeQjVoC9WIMtH2Uief+u7qMHHWgJW9Oqwd
1A+QDzXSxNpRFTZO1y9TFzUylImrOulU10uNdkO6ZYbwUSbRnnaAIlSDlMil
DDXyrRKsCLlwRVyKlodUrCxOJ8qTSxZnyHWK/PxdggK55A/g81QF0snJdAV8
mKnEXOQ39lMUdJRCiMBF4uA+i+8m8etea8WHfv4GWwR2fWNzKK1oRWpAMBIs
7ZGqY4oMTWMkqdggTsYN/jKhJBKIg7pZOfRNMiBj2fFPSFt2kS6VzRqgYlbP
XIRVzOdt0BKUQ9ekBMa2fjgfpXyAm8RHGUriiX1IP+/EsXQlfJqsTK/PE5Vx
Kk4Fp6NV8X2EGsGldCDDYzl/DSh7a0DFW4PwXdtN6wCMHbTJHwQEdwHGyvyi
30/B7RkD7qXghPTzNkxMjiLH2wGJqraIlPQ/gIgLAaSniAv+SJB3RKKCPTK0
zeEp8IOsRfsBygkFaJuUwUPHjyw0wkQLK2Ram6PUwxbtzgL0hwkxlBGNnrgA
DCQFojc1BlnuHyAo7AUIw96EW/Qb8Il8E5GhXyE+TBmiwItIjNBDRrwLspMi
UJ6VguKsCJSVZqCqvBBp5krI1bmEqIs+hEI/xCk6I1n7BFL1P0O8oTQSdE8j
QeNLJKudINfn8DS7DAsXOSoChtWyYYq4GKUEQz9ZOLtLw89RAaG2yghyUECw
szoinTUR7WaASDdjBJvKwEegAmsLE6JnZBFg+hFCDT5ApM5xxJh8g3jyTEqQ
FyKFrogJCUZcdDQC3S3gQrSAvassXNzPwctBCkGWsvDzkEGwpzLSA8yQG+OL
8vRktJRVoLm8GJ0NDejv7MG1rh4MXxvEQGsTxvraMT7QifG+evR3V6D3ag16
B5vRO9qL0ZkBjC6OYWZpBEvLo1ic7sXiZDd2Z4ewPNWHxSny+/wEpmdHMDo9
gMnRHoxfJX31dxEYjY8PE/iNz0xgfGlBfC2urmN5bRO7u7ucf/o7JkeAxeFp
zA1MYn5win4vDM9QyGxvbGJxZAZ9Vb0oCMyByCQAYSpuCFVwQZicG6Kk3RBt
4SvxEytx3Y7vGRjvhU5Pjp7FmT4U+lnThUmAidjLnsjUNUG1rwlGyoKxNdtC
ut3E5OwmgkNLGXTC3CANCfq6yLaWwXR7Hje3X9M8+fzCEhLD3oNz8mG4kMs7
8Qiq6twID3bYx/6AqcYK5KkfRanGcwRyvnTYeGUHxOjKIFX5MkyNU6AjKIJf
RCZh9wSlN6c2R7ziZYj2G2lKALZWuKHvws7UKDo1LsBBRwRr3VQkCbRRpvxf
qNJ9Cq1uX2Gxv/b6Fuv2GtJEH1HyXJMOw1f0EjKzNbG6sSxxlGPVwvI2Cium
sLK69VN27+VguXOdM7yq8DdCzCUvOrEkVTu0ZEQSH2KDI+B29A+vQMmqmfLS
WScUI7VJTLKSijC3sBTJwafgSojzT3kHk3Pt2N7ZZOd5L4FOP/J1P0ex8kMo
Vf4HMjV1WLHJuiFBW4N0F0m7dQjpxuzC1gFuxIGRAZxMUabsUw+Ww9q1AloN
xe6hE+0uuAxn7RjKujR3H5Sr/hNNjscJh+du5wjb3dlEkug/VLA+ce9gcPwa
Efju8VthjhuPz60lFBNzyFDMSL7A1xs7O9u3c1Sub+5Ax6aaTsBON47wJYHj
y+1o7riKGr+X4ZfwHDySXyJra4ybwb2Y7WlFvuphKvAClWfh43SBDhFDsCy0
doG5YQrtU5Q/RXAIvnZIKVafMkQ+XB5rbUF3cxJcTfFHhLoT5YXINxs1RodR
bXgImwsTEjylu1srSE76gGPGB1heXWUrG36OE65cB9jZQBnxBBgyE7Qc0V5T
z4VMtyEmqZ2Sq2dcjNYYE54Dm1s7EHnLkBV1iI7b3p/AceAerE2PI0/1JcqB
PPW3YOClhHgzDarNLT2CoGFZTLvMrpiV4LeD8sqz6fTVQmQxkyvLT39nehT1
ihfo9FNjGtAdqUm7nW3N5QoQbkNOxjeUBGHcm5hfWj6558zpxF25Fs3hGuxc
DZ2xubnNT3VucQvylq1QMG/BFePz93K3c4sqkB3xDB0jOv8bfpaM8PK0PqLk
lNgoojEnFqdS5ehaS9EzgZJzxY9meTuB1w7Ox2pQOzWTRGS0uShxNwfHRT8T
CLWCiJObgdmrjShT+Qe6guX4Wfa3h9Bl6JHwAlr7Ok+IJ3UT+bpwbUcrPREt
JUScigvm51d/zd0OjW6kFF5R/g6rc0O8aBmvKcFLCl6caCfm2jnR3o06Fx06
4XxijJl/JgEa8BVeotz0cXaGjFUXorInbudZV5JJperp9y2xXe28VLfHB1Gp
IEWlWlN2Fe3EAa5Q/xfWZwYl+KY7m8sIInN1IzoxrTj5s1vBszPXdnepExka
Joi+5I3W1mv8fFfWdqBo2QxbXREmOrJ4+ZbXdyE/nJVvWqUyL9/5zgYUqTyK
KyrPYH1+FvMjwzhBtFa6rh5Zy1647F6D2NxJuiPO170oRerhRKoypjJOi3Xo
cogVfDX94GaWifm+Osq+vlg9Xq5lBbLswo24yHR1S/P8B3dvc0tcXCuhwvVH
DArqPS+y6t4/8S7u0cz8XirrNH0FurHAPBodYIUg0bPwSH0Fs0sDvIyvaB2n
RLbGB9CuI8IFkEqVQpSUD+JJcKbn10MwsssLqq+rgxpDkyBJ7Azn8TLeXVlE
q+JpKuPi3C50BcmgXO1BbMyPi2W8vjwCIUGZl+hFdF4b//xW5s4XC64Rl6Yg
TJO5JP5CP4m5Cr+ILBJAZYTJITtUHSXExRxqb1TkhpttEtJlEK3ugY3NbZ41
ujYV1MEdyHOX4DExOrWETF/WvpS1e/CPDqWFUkOXq/2xBG/NlIMUEex7jjLc
ydEfV0fWxKrJLcaN4r8+4igTuPNLfa0gDrGq1rDTT8UcsaHlqg+gO0yZr6gq
zL1AB/aPMZT44pfwZLi7EEspf2IuwhPm824MBj+PHp+3MBR6GDPxD2Irlwxz
RQIjyY9jqUgSuxM5RP+vy/Dw2ZpHibk8IiT9UVdz9S5eyEOrFD4R6uaM88Sz
KTWnGKnRT1Nq55a5hcbsWm7jitprhFUPYKixjhLZWRGD42nKyDZRoUgyiWzm
ubSzsYXTsWo4E6+ArTpzfuFMuuoSw5uExPAa9CeZUUwuD7Xw4Nlam6bWR0gc
pr7h2b0ZRfnEs6ezJp1KiQl5/k4/7ybzJO6eqj1ahR9iM/suyprdggPYSv8t
tvMPY7fTBFjtk+K6GC82pLFSlMCfU9wHERRaRnlT6aLMLa2DJGDQp8SF530u
wYPnWpwHnUOO4RkxeALtzuCbzEsQybogTssOtf1zYvBUlxVR8AgDv8DuTAsP
nt2lOZQoydOF1dN6DVU6TzBOJQ+eikIFKg6/aA2Jz8UsuAXwjLQ2EPEqMRcB
D/N5L+wt1GBpqwonc2UE6CogXk4NESQuY7gYTjgXquGBNEc1Evu9iJ2CgwcY
9hHKtzN/ja2cp7DbY0niiMXveWxtzuCKkSoiibPV2T3BY4vYUahb1sDMIAMz
XYU8toYnl5Dt/zadTF1vKIute2j+6wpxKkoItkY6O+kcxjqzoOGnAJfobyhp
ftae2NndFZcoOsc4U072xb8rVstr+TEQqVrAlqzB8fIoKpmpuiQeXbvb6/BP
OAzPhOfRdnX8y1+yDFvqasTJgL/Tz9tpMuBiiBbcjDSRJM3wwFPiAIdBf7lQ
+Jh4IzlAgWiYRwn+fsXiMO8A1hN+i6WM94kjVP0tR/nG1jYN5JhrpMSYxaN5
AA/H3qEVCscYDUOxps8orEV61L8pL+eXh/jticmcaDLvvyNb9wsxIhtMP6DO
eYbTedaqx5SIEUlCR0gTnft1oiK26y15Vs5YSMFRN57YExLtOp9Etf4zhH+b
vFHsafaiA3tHnGEzlrfKx7H+Tth6KDAXQSTzeS+cPC9D5E6if5ev4O4uA1V/
dXyczoZi54lbp+9oDF8dTaSQ/mIu2bAsvgf+sqGwEcTCP0SA1sSXsZXHakEU
SGAj7h5MBj+M9lQDzMzNSbxFh3+S+kELyxskkF5B/+g8cXGnUdc5jtKmYeRW
DyCttBex+Z0ITG2BX3ITnKNrYRtWBRO/Uhh4F0PT7QqUnfIhY5MNSYt4XLIO
h4xdAGTt/aDixhRpqaHU/DJ1i9UdfaHiagN1DwF0vM2h7+sE02Bf2EfGw1NU
gIjsFmRVXEU9Gd83iHWfazzVr+ubADsEkGAkOPuY2Fcr1jpGUd1VWkz5Oj/Z
SiK0zyir8kwV6bgF7eO8cIc6uqkdtwg9g93pRl7dMB54nfw5qm7qc0toj/2J
An5ppaZ8ToWbVZr/y4S7MdeP5YDfM5fEX+nnnZjw/R3G/X5L728E/R7lPq9B
4C+Nr0UqEge4hfR1vArUPPVgLzBGjII2YqVsuIV0O9zUIqFjnwmHKCeUJh7D
Ss59EqxOuhNbCXdhWvhXlLsfQ0qCH8pbuqhkt3d2uWqb32F1fYuuqsnZFQxN
LBKfZAYtvVOoaR8TSz2VSD0mtwM+iY1E35TCKiQfRr6J0HCPhYJjMBmPyFfi
t5B39ICCkxv5dqffSs5OUHa1hZqHGbSEOtDxUYe+vyJMQ6VhFXUednFfwUH0
CZwSj8I56dU7GK4SNuUl/JtmwoL1XEh0zNy7C05JL8A27ijMwr+GpnkBjIzy
4ORgSEhqQHnzCIn/NiV45Up+RpLwCyqj4hYHXouud9aSqP1h5Kq/Dq6iEM3e
38He6TK+zJRGlqYhYhTdML5w3ZkJjwtgsRP2BrmxywNkNSsMcapWRJGmoS/Z
lgJk6VqjWJGS4JRVpC+S6GztF2FkdWYYVcLHmYsoAObzb6j1+xc6Ah7CVf+H
Uev9OIo8HkWXz5+w7M9ipjHgWXgGfAOpaEVxjoZREDKBGjC1MUKQsh2iL3og
kmjN0Es+sDWIxmWyWs0ifZGeeAZT2X/jMHMfthN/jSWXv6Hb8CmkmR6Fj9tZ
OIQbkxjMDxE5mcisbKMrktEOMwtrTFDM2ZcHKJbml9Yplq6NLxC3cB7dg7No
6ZtCVdsoxdOVumtIL+tDTF4nQtJb4RlfD7uwCqIZUqDlGQx1d1eiKayh4WUI
LW9t4nkrwyBQGsbBFyAI+w7mEZ/DKvpjCgaHhNfgmPjy7ylGHoZL8vPwIn59
YPrbCCf2Iy7rYyRlHSfQfwVZSW+iIO0YClPeR2nSeyhMehc1zl9TdR/ppY96
Ekg3Jn2I1tTP0J55Ci15kmi4Io3KIjkUFkkj9coFhOd8BeeEz6ki8tdwpPiy
F70Bo6CLUHVzhnVoEZ0iUaJiAFW2jiAn7DB9dnCqmvcWGy0uUtCU+ztS8W/v
bKDr8nOQjFCGfeKnxFT6IcTInd/DVQvWwydpSljMPCnOx8xYXSYWSISYwErU
W7yJOvPXxMa/p8GJNT9RF9mDBLeKvrnpQaJ7X2Qugj7m8x9wTXqeduZMI/EX
ERn7HHIjn0KJ77PI9nkJ9QGPYcTjT1j1/SOmQ/6KrLBXYRJxBp+lKFIkMog8
H64GU1tdEuxbI0LKCzHnhQhRcISZeSQk/cpgGB6K5MQLmMj5BwvE32It5TdY
cngAMzKHMSz1AjqVnke58fNIdHsZwrC3YR/xCayDT8PS/zJsA1VgF2gI2yB7
WAf5QRAYcQC6XvEM61xjiEWKhrRtKKen7hfrKUUSvSs6u3A6yhSaREcZ+ErC
PPAYrEPegF34C3Airr5L7KNE8MSVSHpOglVS98E15RV4pr4Fv7SjCEr7DyLS
PkBc+odIJFd6xjHkpB9Ddur7yCdAy49/FQXRh8j4heFPEpqKw59EWdgTzDe5
Vx72BBFnTejjaAx+HK1Bj6Er8FFcDXiEaPBr/o+QsQaDn8ZIzLsYjfsAY0mf
YTrldSTIOSFS2QOj6ZKYyDhH74/EvofhiFfJ88+QHpm29yLWWZkCNkP3FIoy
PkV09gm4pLxIpemYeASGgZeJHo+mep4Al89NxSamITb2GbinvMyA805Oh+4s
zqJA5QiKVB7B4uw8Bc/VCh90fv8fKuf8gON0SXl7JIuXwMK1cXyapAyNyIvY
bnYRG9n5KTTKfccZ2QK6HAYzHHgIixLeovnh/JrafSD8gzhnc3sVonJZ5iKm
lfn8HXIbzZDXaI74Mml4pL/BAjiRICjmacr+Kp9XEO15Egneb6HO7u8Ys/sb
ljz+horIf8Mh9iS+S5bhTPDDNMMhE6gOE1sDeGnYQSRpiVhlJdhZ2hJ1lQrj
sCCkJn6Pmdw/Uydru+A24jL8G7UeH6NC5zs0KH+JfpmjmL74EsalXsSQzPO4
Kn8YHarPoV77GYLsf6PA4klkWz+BdPvHkej8KGJdH0KU+wMIc/8rAjx/Dx/h
/fDyvpvQ5OZzB5mzmze5vH5FLgliJ5nPB+AhPEieuR0+PnfCW3gbAoV3IEJ4
F+K970W6z29R5Psn1Pn+HZ3EpFzzf5SGyIMhz2I46g0Cn6MURhMZ32MqXxEz
pYaYq7LFfIMHFlsCsNQVh5WrGVgbKsLaSBk2plqwtTCA7eWxAyScnickMTlq
8hMJbxfFBSg9cSpsMjggj8PEfTRa3l6dIs37sT5WjeXeZNjYJUDRvAntLm9T
sgh+0RvwKErjX0ds5kfM9nLy86Q/w6BL0PFMRm3HmLgMJMpHH54k9kwoviAu
RJoSeVFPP9f4rPgITJPpOwgVnKd6qdLpDKUrOqeDh2peaiL9U2To+zeGn2uF
IiSrmFCo9qU4Uqiujnfz5n5tthMeSSQqj3kbaxtbX4rBeROF+y/6+XsmsYDG
/hjElFwgcH9BvGsTGv8sMkn0UhL0AmLcTsPH/mNkGf43ug0exLwJ+fZ8HPHR
r8Eg7lt8mSLPwvS/aLJOlsBUYKcLfx155Cm/hAj9r2Ft7QRhgDnKko+RKPBu
CtHNgjtQk/YOPGPMIReUA0VhFgyItjR3CoGzjQf8LGwRaWKIRENNXNG6hCo1
BsZfoFP+2B3okj8m8SA6FD5CmxKxmkofoFn5fTSpvocazROo1D6JSq2TBPkn
UKp7HIW6HyNP/zjSjL9CsvE3iDa9iEALLfiTy89CE0JLNXhZqsDDShmuNopw
speHsxPhiJ8KHEMF8MsQIrkqF42DExgkzsXy+tb1g4nbSyg0UaYJlmtjC6zM
/khiYUDJohFOOlHYWpyhOcKNyUYK5lHRxxRdLUTXilLfZXBFdOEr1Ed1jKwi
4eI6Flc2IPL5lAqkpjuQdyIrND+h4m/Lz6SCXF2dxLWzh6Hro4yvMmVQaKiC
KGlvNFy7ntSwC7SiqLoW+/x1J/J2LDgpwV07EkFuRWjzPMWEkGIDXnVFno4c
EG8m8c2tGPCHeSxuEJdrJAe5NYbwT3nrAGetPAk844naSwt+Hd5OKnA1/RqZ
Oo+iTf5JYmCfwbz2Y2hwO4TwsPdhEHkOXyUpcqrvfhrGS4arQOBxiQjrBNK0
DiFZ50PkuH6OzrjD2Mq/neJpp+Ag+jP+jezEc/CMtodSSKbE0zgXWEk0gXRY
NQyTW+BV2IPY2kGkt4yiZ2KJRiL3c9NZ7wuiqcoIAyHn5BxE39AytV6xOiZc
BvVebM1fxWyFOQaDnkZDyBMIJlaY4ZVl1EmouMQiqagHyWFH6L3xudY7+Wa9
zbiicggFRONub7GHebrSTDD59RF8F6tCgpATiJN2Q4i2B1Y2tvnFvb22AalQ
dXyXqICtYllxRmp9Bd2yn7Kp3vQamubtDlPmWzEBRrjoBbgTc9PYPfQTEf6Z
mx/7zg1dyMsqcJXgv6GHV00TR7G5d03YL6kVY4O8P2BmqR/1ta6ITfiAbrgy
rGE2VsLjDiEw8ASxapbw1j2DMsV/o//7Q4QnL2Pq3PNoMHwV8SSS8vY7D8MQ
KZyOV+RqWO7EF4lMKYw07D2+Rrz1i6h3+DtxPP6KlYy7mYkRH+5VzGf8GR0x
r+FK0FlEeZvAgzj41sJcCHwrYOpXRQLdapiQb2O/ahiRS9+7CrrCKmh7VkHD
owpq7tXEupLLtRp6brkwc4+Do6cvAoSWSPZVQLH/N2gKeA+dgS+jJ/RpdEU8
hubIx1Ed8yRKiPeSE3sYyXEvIyr+DYTHv0W06tsQJryPYNG78CHfngkfwS7h
BHSTSPCUegFn0i7j83R5fJquiJPk+jJNEV8Ty386VQ0yWUbQLXGAWY0nArtS
UDLegDli5vhUZ1sguyWUkFgjhm9cYjmFb4WLLmcO78b2yiSmi7QxQNzm/NgX
iCP5IlE+r0PF1hdx1ON6iSivbd56DvuZsLtPNgpiK9Zi8SFKpU9TpXIl4j3W
47KL5fXNSH07Df/MIk5jpyeSh+xG3RUUKCpTyHZlhtBeZ5oyeMjODeZSy+MV
eYJJJP4Esn/hntuaLoKroSOyB9eZKPoAv7z2Ljz8JQWJT3EjrG8sor3ai0ju
PeKvHWZ12P3wiTsCOz9JaFq7IULtLJouHcLYqRcpWK+eIybT8HOYO1gRw+EB
DzcNmHvLQTZMCSeTlTnQPoivkxSgECUFs9Cv4Rb2EaKijiA/7ikS9v0T4xm/
w1YWWdrZJILPJi5l5q+xnHI/FhL/iFnRXzEe8y8MRz+EgeiH0RP9CNpjH0Fd
7FMoEj2LdCYuSnoN3olHYZ90DEZJX0Al6TSkkiXxbaoMjmcokpCGoeFunExV
wtkYYqdDlKESqAT1AEVoBCpAMVQBchFyuBgni1PJcgeYRqwOvg3HiKQVS63g
15mI0ZUpsZpZu4psLX1EyQgxubDGw87aIRuqpnWYKA4XFxmsjZRjJPodGmP4
pL4KJxctBIqeIxHdf5iNId7BLyVWmwFGTyUtvsQOcei6L5HHrNQp3Jr8TlK4
hcbWie1bclQo/Vta2GvYXR7i8bbkL0CIhjtczbPQ4XeRmM5HsLO5xqdIr2R9
S/VQRLq/xKm9wfYHsG/RS4ezgS3iW64f+Ny7MnXipodK96qae4abAllw6G3w
QxpRDMLEQyzkfg/X2Deh70tMn4UV8hW/wuDpFyjcxk69hCLVQ7C3koaSTSZd
4/pWBfCxMIa7nTIMPFQgHaSGU3GqTFh0B5fHO5mmwBQF4nQSlTA+SVckLGf+
9gC1sl8ksNVyF0PVIO+vAVWhJnSJnIwdtGFtQXwTgS48idb30dZHgIYBQlWM
EaEoQJSiBUQKlkhRsEayshWyVaxRrGyJ0ktGKD2vharziqiWkkPFJSWUyyqh
TFoVZTIqKJTUPYi8MwICkpyzAiRdMoYfcfZMfaTxbbIslemxTGXYNQVjYm1W
zMCFWnOagA+1CuU0HWEg8bcULJrhoh2OnbWVuznU7WwuYapAFW0BTyHC/SJV
MHbRH5IIu5zJFvEmfXu4F/kqr9OwcneHzc0NtcRTXusJNfBxpgJq7Vl3vah5
hPeSzIUmlMgR0avitMi42qew1U1GenQVQdzD6PCXEu+97u5sEdXP1hP0DM38
BHV/pV+/p6jbnChHoECA4JpZgp79Spd70f/LSpoPcaRsbyygu9YK6aJXiCV6
jgXcX2Af8x50vdURqiOHLsn3MPHNy5QJPedfQrjB59C1cYWMZSsFnLJVLmzN
jZCkeRZZl9WQJq2HaFUd+Otpw8VME+a2WtB11aIoUvJhai2Z+ssHmJ+h5a7F
VF7CyFGbosvMVge2FqSdQAu+BhrECVJFoqo8cmQvo+jSWXJ9jcJLJ1Ek/T6K
Zd9EsdwRlMg/jxKFp1Gq8ATKlJ5AicozKFYjEbv628jSPI5ELUmE6BjBVZcY
fd2UA4zhkfgHbHST4KknRIzABIVOemhxVUeNniIGLr9Ho+NpqZcwo/EsJgL/
hJX0f2Iu6kGMBzyLCgcSl6m4IOd7U+QStEYoGULdTxkfEQCczFKBT0cCholt
ZYTX6P49xUrmlS5eJ/aPsJ5ktI4Zt4NwJxqLIpAW+LY4u6VLlrpNaCVN4PEG
aiHOAyXKDyJX/yRnf+9EE/F8+05/iPORqjAkrkOujg4i5IUYnV8TY21tegGS
YWq0OnirWI5XitsjfaiTO0uNcFNqDNW1E1WxfKuJvkRKiVfEF4xx/QlC/4t+
/RZbMxUQGtoiZ2J1n6p0gsxbqVY/xC0bZotxdagQnZmnydJ5mqnykuC1oB3x
mhy8zqJU5RjGvz1CAckAs0TxI9iYmUHBqoiyVs6qFnrMu/TcH4KXwwMINX8d
ifqnkSWti9wzpvdSVXMf8yOyz1og46wN0s7ZIeWcA5LPOSLpeycknbdD0gUr
JF6wRKKkOUSSVoiTtCekxEg6STyKmIsO5LIXX3FSFuQyR7yUGeIuWiNGyh4R
lz3o9qKnUgzcVWLhph6NIDUbgucziNTQR6qaAYYvvUXBNiZ9GF2uvyVSZvfG
1rPuhFeIBXTt0+BlGEgwb0CBdj6SLd37PFsNtdcSkKpiiUhFTyyubYmdvcT0
KsqGUid9DmG/RlZ5N9Ij2TqbcBLSM99MlClMaLj+Fp17Ua/1JUVCdaQXFRaT
FeiQeRbJSjo4lkEsa8I7tP7GXy+Qacajpb+klv7ZIvIUdrqCxbsT2RE0XWGj
Rxy9CG2UqfydKUHhDW9expes4c2IZDNrt/0kMPkjXUXr461o5F+0yqjAeAHM
M0YxtWdl+vg+9/etWH+Jfj7EpI8wX++GtpjXkRP5FEJFh2gqn12VzyNM+C5q
1N/BGAe9ke9eRaSWOjQs0ym/pS07oWETCivXN/h0GDwd/wZ/44+IwtBC4mUH
pEhZI/WiFfkmF8FJmqQ1wZcjYi96IErSmzFnd9MNtfsRIeWHcBLBhyp6IUTV
EyHqHghRc0e4qiuBghOi5Qn0pO0Re9mWwM2BQjJa0gWRkkKyjpg+/oIQqWAE
SYcg9HIAImS8kKWog4mLr1DItSu8hGrbI9jIJq5m/q9QFP0BZINzIOedhjyF
j1EgSSywnTYVLPEAYUN87QDrUKJQrmFnY0VcguHgmglF82aM5QaK4RYaHY+I
uGfgTRy8wdj/IIw4eAwLlVwckVjYLfbVBzqQr/wOLeuZHx+j4hjtzSGL+iW4
2LDJira4o2xc4ZrN+3mJYYGsnxf5CnbnOvk8xpK3Aby0QhHoWoQ601fRaPfB
DyxuEGNxRS+hd3j22x/rMxZurJ+32u0PI+tsDDGvGdyaQpmrARyq5rC5d8X/
vqfB9wotjvCwJn7e6uAVTObIoDfwCVSEPQFRzBG4x70F56Tn4ZZwGIkuL6BB
5WWMn2Jtb53UN3AQhEHWirW78tal0HfQIwJ49ADNuh6Eu/Pf4GPwNQLkbchv
wZeYQpkA6QAI5QPgruQPJzV/2GgEwkI7CDpm3pB3csE5P2t8Ead9ACeSVUmj
42kq4gKKe7hI4eN0BVyMOgMbv08RZ/s+8tRfQb7Cq8iWO440OWnEXbZhSlIO
cKhj6nqSzjuiTeprVrnJvIo2Jy0spv2DLX9KfQQywblQ9ExDqKYmcuXkECdv
gG9jVfAxQZq9nRzVQoy+aLA5ylTsYao+BVvLs+LElLpFJaz1krE1N8Wh7j4E
eJjQ/GdSsSSJbidwlUDHL5Es4qSXIWsXgOjcDiqFpSgnWl2Yp/Oe2JQ2+5/D
yKk3YOrGlgJ3BpygsItLaRLHF5aerJs3EM246+L82ZDGN9SMFsblULIHUqzE
uJu+lsXZ0S8ZhfkT3LHxxe/Z9zgnukFgyLyIyQj24dx78fau4/8l9f2v0c+/
YmtpmKq3kbj3adKxL+BRlEe9g6i47+AccxouYR8gzZboBfmXKNyuffsuItUF
ULVkS6xkrZuh4+kGu6DDcPW5k6o3Rs25Bv8OzqKn7hJvkL8Ie9GbsBN9DNfU
bxBaQjzCFldUD+Wic+4qhpcnCNNHV6bJKiA/o3thkF71050on2hG3kg1RP0F
iOzNgkdbLIxqvSFVbI7jJAD4KvESDHyOI9bkGcrpUuV/okjvfcSqWyHoUgiP
v8Tzzrh28QNMEdxttl4B6t+guJsueQ0Xg4rhHn4FmS5RyLQSIFVJix4Q+oyE
Q15mF5Gj/hHKtF5Euco/2I1R1QdoiexUXRK215fFG5QLy1uUK0FaThz+fkO3
nKO92ILo8jZa6k73JdoiXyK4PAxHEtTJ2fugqWcCzeqf0f4rAmx4CLaoEj/2
8iVanfBZpixqbU9TCNb3TF6v2pxZwOVgdXydooCtvNNib260H+XylykMW+Jc
aM8LfVW8pS3NvciFuD4S3/0Ygntlcd/k7m1MNWOuygYjMe+QmTMbeX/AcOSr
GM2RR3e5A1rzHdHurohBmfcx9s2ryJNWhpWBiHJGxqodgoBY+CV9h8Do5+Am
PAB34UHEpX+Eyk5vNPUzp/6aB0QHUNMTROZf2emDnHoHhOVrwi1ZEraxx2ET
9x8GUZwLeBvdMQzO/xyVXb5YWptgXZ7HsbGzSX1uBjz2TWGQTpSFh/3rKFB/
kPKi2OID+Gj4I/ByKLvTfsEPDZLfY/oyQUhjHtD2LauZCg7hfFAVrk4tY6FS
H1HkuQAjLbrqP0tVhLM+ezLCXica8ZqqqDA+jgr1h+gYlVqPoidCFfNdJSit
Ygv3MwX64jowplghNfh1Koj+iVJW6r8jzk0NysPZMk67uHfhYOWDAuX3WYe8
r5vKY3H+Kka+fQG+xr6QCVGFceqXyNPVQri8DxbWNsXoGC5rxCepyjAky3m7
xVW8bZQfiyQVAfXDWoVnUanzBDGI2zw6IolNdCM2p/Xq2K2h421O8dF38hOE
LDQKMZF5HoPBzzKllgQl92Mo9HmM+x/HNd0PMXbmCBrOfws73XjKFUWbDkQk
NOJaZwoSE96gmkToezeqiKpYn2wiwt6YamFOrk42sft7023UOWOMOPOvd3gO
4ZnNUHMLpOUZ5hFEeyW/S1nolvoy8possLw2xTL+YWwRW1sx0QLXGn+4Or1N
woe/o0jzEcSZG8BJIwFhl2hZKkouqFFArGaFAqV/IoD4FexjfUhk1YwKT2n6
TEZWMzT92RSUT6w8+hu6kO4WD2e9eAoMZoqR2nqotzpOU/GMFF2Mzei0W3yu
FwUmFrQgOYr1x1c3Zg9yklrqiKK7wrSqi2CrQOU5FGi8zGuIznRjqpoFViW0
TjA15Q32HKVuiNhI5UZEUeqiot7G7ngZb6QWPbThqxUAP4ccVGg8hM5AaTFs
liZqaTbeK/JDZiNkbwxQCPyHd192trEx04HlngS6MzuVp4BR0XEq9QH/xzBs
9RTGZQ6jSvI8TAxz6PTVLStR4HUKlb7ER/E6SKUe430P+vwfYmsEfoNrxBMa
Ie4iA6b5WmcsDlxBQXUPtNyv4HvTdKi4+MAvS0Ys6IJmG2xurfyGUvUQJtdm
4ZNngXTdRynj00w/hJ1OPEJk/VnhXbDAoNT72KyLB0p+j+XiRyAZVAITJ+Kt
ynvRU9LLI2O4FKZKvd6mK/QQB5nsLtoL6+BunAgb3RQmiYB4AwfCQ22YmMVD
U1CBaqWHiL9hgM3lGT4OCwyPptunARnvio8LjV9RRQi516TyNiUx1171ejRv
fhSdZz+BuTmbxmxLeI2tqHXMvl7U7mnNpj8jniS2ZfUuDjdM1DyqfJxSlxsU
SrseL4/gV3hdsSrlmW+cpcS3YmHeZIUf5+QsqmpFtpUS8uU1MKhyAiVyitAQ
VEKGhDrhQRkYr3FCfuoxKsvw0Acx1UwUUhNRzZ0xWGoPJ/6GO2ZKDDCe9h2x
G6+xJuRuutE/kS2NnmIPWPllU9k6REUhJP9rSmdowVdMqez9nF1tGmlAtOUR
VqaGrxLtG4NQeT92l+OCM/Ev3yNhpz3V4NkpF/B9QCUJH0T8m986GoqJV6uE
i+EqRJ10sGvtHsyNTiPZOY4m6Wx1k6Bg0USzhh1eZ9gDg0RLDiSbk1hnVby3
4u9mTFTlIaSWynAi/Q09LHMt7GMUK7LnkYTOvpSJ29vr6L74LETqJrByEFCx
9YT+h/Uq4+uun7XZIkpMizi+SlhNOcrr7K1rneL8TJ0fe/BnfWaQl2ic6FWa
wyxu7JI4fSs6+zhHLeM7+hS2I1WPLV6+mhSMyVAfOBOLxqxSa8cqjAxMo60j
gFrriJhnmL1lvl5ia3GQCncy+xIGg56ijuRgyHOoiDfEJbMkaHvmI7cuDO6p
r8An6z/0/NL9XNvF9SUkRLKufZLB64TpCYiUYw9HZksKMGf6PVD7Erby74BF
pDd0I2rEqV6naBb3IfbqHOPvxlT/KHwtEijZYWpmaAkIwnxnMeot36JjMN8r
Ix3XT5itib2zmu4AfkbLyZ7IU3mNBAQPQ93dnDhnkxjuSKF61tY6A/peGjiR
KYcWVzYgqGoaFivO+e5BnI1SxWXRJWxXaPO6di03GmnKBqzsrP6DOvPXxU02
F4foJrhXzJtMuestye4TTnZbO7twTSlGopIdPTQ5016BzcFeiIx96IpUMW9A
d3UHOrvDqexi4l/G0tIgfyiXqYdhymbGU09RuV0NfQ2ODja4bJmOstaiAxBm
vkNGnpjvEI/MatZ7kR2rRlkq0n8ftjpJiJb3oMxoIPp9PVWNrryBtCdxIbgK
cyub/Mpb297Al8nsXsJspYgXXBbRpYzQElSVqC7NMXfDztI8xkvD6OZMpdZj
mGnO4nVeQ9cEkoLfpIIbmqrhBTdtI0cToim6b5P443WYBhSiOeAC8UNfox6G
FNHiesmnUCqQQcQlP8wub4il0JtRQjW8bfQX2OmJEhtJTx34afnD3y6VHgEk
Cl18vKynzpYrZZSVOHMrUjvBcXBxbROOYdGIlfZAsrIjsRCzjHJAVZAIama1
NHfSmV+N5lYvqkcjY57D1ha3c3EXkVgmdbkZiZX5HIOabTzquqvglfEmvDOP
YmyOcZVYlZZNglhGTGF6krDRSUG0lBeiL3hj5NJRTIQ/QcVkG+WKmNpBCf7s
a3xTEuvN2Kowlu42ritv31SKqb4YF0TZxFEsxxt4YGngKllU7agze42eDZ6o
iBJzNamoG0lRbHJxfXPxdk5Qu6tLqFf4mFKWaXOMzT166aNB7XlUXvwe6oIa
6rXGJL+PVBULhKj7i+1dmj+b6kmOfgW7893X7d0uxtVOUHuX5+3+wy3kg0hP
/pCOkliYd2uyOskNNzK3igA3R4rtMntL3jIPtlyFmnk9lM0a0X+lAiVl6lRU
2XlnuazrXWR1zWEyV5bKqcn3FRg6x6BzqBLuaa9QOTHHlO/nlhNxvpFhw3qi
gbpq8NIKo0NekdTGgMZR7F45gN681yEfWcvsAfDLaYs0YyoAmDL84SSf27je
rGyToGZai/XeFrr9leqRTMXlrR2CxZ4uonImmVwYTaeM5Av5HEFAdDpNBfun
vyUuh9uoySPBx4eUn9dKfOgZa5e4lzB45jBCDFxgZeFPxdGQ+TrVQEEW8WJR
uTiZ0r+1Rj/L+CO8qJjQtEGWLa+s8dGiXRMnia/vZI7gB4gOwZMEIUMTi7ck
rU+5toVdk0gSGFPWDV2J4qXV3z4MZfMmaBFHZbKpDbkFF6i0untjxNKi+7lX
04nH+RSafF6GS3AGOoYyqVcZXXKB2YflpHUPVhbGkKfzKIoJ3F21fRAp70lN
58DFDzCe+RGNE3TDolDeNy1eVel9VygzvCzVsbu5cZDjr6ZFGaz1Eun6p/+I
Oc4LyqLM8dUJxurYKHPSHk32rC8xVhwkNoFCLydqORILz4nltRRgSozXy7ii
foimFEsT3kKQ7yPUeJnaFcPBkfU7rqW+y8a9PsXi1boxvwxND03qeKxkfCI2
XoUiZClpU5IaHE6i1vhFsQ6c7E3gs1kSZ/eUFBXUZ9wIPtm1SFBwgEjOBRuz
w+I8R20/ZC07IDDOx2htLULCH4Jf4B+JmzHBnQG9k+ZGBwKeQLXwLSQXNKG6
O5COXNnpw2m7u3G1NQvFav9EqtbLcNBKoDLJkSQRkvlxqukKU7+CbVYHL5JN
Ej1+k65KjdFglBefyFlZ22YL6bXcuYztfagWFdD5Rxr4EvdvnUn80JcgMDZh
tjWXSo45oRTkLk2pKm22E7uDjGoaUT9Jc9qFNvTsIha7RcgRPIyhU29RpSrw
0mQTiRFsbjszrZmXylR9F85FquFyghS2K3XEuW2uhsHDPIUt8QpVEkulJPsc
pSIkxZv1BX/Ou+fls7i2BS9vP8q4MjtzPgjNSWeTF+bGORhsT6dJvpy8c/xm
5VJPIlVy2R6fo2dwii4Xt9QjmFm8KhZNZZIxxW+IljpCFdkzi1WSctgpOYzN
K/fiUnAR5lc3+f+8IaIrlbVBRpok0F+gVDZ0DFIqkozN+N35PJ9EKpYCB3/6
yObSNGoFL9N8xupEHwbGFhDn/xFlRs9oPi8RZpehWoE9j9WYEMgygajSWtUn
UHpJik1uBqvhQvJltLkfo8Q2Ng/zEumMz2N9hdhPsdMdzktkWvszOJClnO7p
y4ZbFZES1zMqL9KMSn3X8D7r5EcS+Zwbi6gQ4s2ZURImqmJ5iQi9aymV8ZZh
jM2hEhkdK72P+/NokSmVSJb3OeJw91ElFl8mzQtjd3sLOUbPIl/tEbipRbA1
0BeEWHI9QteJMNYUOe3jvDAWN1dwksz321hVXA32oATGJORRAqrdzXlhMOUR
YaaRxAQnozctiz62PNSMCo3/RpPDMRTXDyAp/CXuePIgL4zVZF/kKX9AWTY/
OsTKYmcTnVJPI1DTFiqCBnyeqAKvxC9RaSlJ9xIWljd4YaS6+1CkJMUcwe50
E29kduan0Sl9kqKjwot94cva9ABvZFanm+m7DLyi3mNOcN6SSL7g2rolV1LX
LV3dkmjyRV6JrW3swNqhCvIWrehJjIfQ717ibzNbibtiJcaArCf6JJVNQVow
StvdOGzmcSvlLnRVuFFqo7TOI1SaTUR1XyIWrvAetGa9AbO0NvHralyawujk
wwx0iFB34OSWxLwoihihYM4i3IOl6Tk468bBQycca5PjdC6jxYF0jAChNz1L
4ZHC0snDdV5wlr41pUDjJS4Z8WuM9mbTvXVD01TYWfjScYszP0COth5CFALF
Rt/GmP6pOfIpYtTW7+IWB1PiV6igQOVRa30MtSYviUdrKdNlX7oQoydx7pdI
YmJxHYF2ziyLYm35xTE+sUxi91ZYGGWirtiQmvqu7gheXW0tjaDd/whafV/A
2OQQfLPfh1/OR8xLFzgLT1b0gDUS9F9AkeqDcFNnU8R5kobYiH0EO1dug2JI
JiYX1w9yXU6szlCrqeKtgcmiXOhb5cPQqABbg73iwwZtOeV09gnGQoanu8z/
IdTufZYocFX4E68qMucT8WH6gU5cvfw2PSNQ7CDHS6A1UoHuSMlatsPFnjUY
V/NfQbyMKwIMRXzr1fEZWkHDqKilpLd59bQS7Yw4VWs4GYj4VxyIJZCUwAZT
WZX1tyaBL7mx4msHISIhTLyMGzZmOnkJJCe0sO8ycQmBf/BfERD8N+LgrPHq
aaAhiS6BwggtNPfH06Ez6wx45s/mnESYoiFFaKzmdwiT86F592mDZ6l6CozT
gW9J321cb4JyR5rNKTE0ghwRu7tWMKNB+CA33jaK8r1TlERp31yYQKC9LE2W
ZJcq8lxbSfBGOReTtGfH8TxvNHwdFRcl6Wws3RQ53+k59s0F7gV86/HyFlwI
U4Nk8qXrNTW3Y95KCu66URA5erLp+8oY8Tt2tlen4Z1A/Ny4VzE9v/qL2L6+
tQNnr2hKRZ27Ls925g0k2lb19P0ZXfnOFPiNTS6/4f5cH/wZ+vyewGB/G4Ly
TtL63vnlIVYq99IXArR7fEw7FZm9gWKVB+CuGs6G9VIXsJt/JzqyXoFCZN31
VyXdjurJNsoVpgRQy6QSUTo210s7F1fgQnSPl04YthZZMx7hfYYKPC/uFG8C
Fl1Ukav6Ad29W19iz24RuKBH8lmEadlT5qv5quJkmiKJfJ9m80NJ4kOtneFZ
9GUWlvGfYrvVSxwSbm1iSO4DthDeRfOHJuAgCeGElA7PiO8lvt+T+ZT3X3GD
FHVPIpbQwhzmWOlL41leVs46JckWQQiLegJBoQ8Q7G3xSB/pq8eA/6MoD72I
9sFUOmBBk7WY5RORyNdXR5iMH4oL2ZqrCE05RFz0Q/IFe6wTJ5hRN7LBucwO
FM/y7d0dfJOlBqkQNcSoOyHf0kSCr2usS8inMy51D8bs4hpigt5nl7bJf2N5
uI33fXeJEzst+yauqP4bBXpHWbjfheHuNBoquFmJoGbdRl1j3YTv0O3Nhgtt
TUPicCHd3pMKPjb2NeyMFvOafutqG+rlzlAiqqw+Ro3R82I9k5vGHluJzIpj
3aCfc0y/4jrdIYCzI0xgHNNKO1UmnBTXnDMJTIFdLYl4a9CWYkFR39kVxqO+
IvQC+v0fw9hAM3veLu01JhdxLyeC7RZJREt5E5jGYGtrG9mGzyJX/Un4yLPI
nzQ8TJWOT6wxEuqH+NXr0RxKjxUmKeijK8SZ5z7zTgYfg0g468Sitq4bURGv
sfGA9n+jzfNbnvsbTaVol2G39Mq99Hnut4RJU+6budTBzT6LDhAqOire911Z
vf6iOGYkN3MjKoFaJve/PivBi4CP2Jh8arn6vwiB8mK1w2yZhYoOwy3xBXQO
TP8E+X+jX4wzso2ZIhuYJ47e7P+T+iVnPr7mSGgamkOEnhM9SrzUGsijuqZu
jH0Vm74H/AP+yDhPErwQh/qaqBCLgi4SZ6mIew1JGBu830d3O8ZiXqdM8vBh
X7BQm25F+euvymZvKi8p0nd4DOY8dYMPRaiZ6aZMtLHQxWhC3D2cJNvzqyiE
PWyiERV7iL5Yrj9RwLqpXSV8BmY5zAZFSifYMo+qAl6SjfqvYujbtyFr1YUw
Nxc6QHX6C8jX00CwbABa+6bEBCyPTEHPhd1Sno09xNuO5WALhGq4IsjYlQ0n
SsPETeYH86j98ow8xiyNWxbi/4GjEN9wJDjFVDKvLEWZhTIZZUW8GAkkjB0a
oGTehJoQeboYJyZrfsNNqjz4DK76PY764jgE5B5n9nW4DAx5YqkB9Q7swfeU
iqt0uK3VBRSR6DZZ8yjCLgYi4bwLNsLvp/kw5bAsrG5u82tqh2Dg01QVqhRb
bZx4OTLqwc8wEkaCULrPFpxxFJuLU3Rzvtn5JEv3/ZjVPEGW/XvE6D2E3S3u
/z7ZWkUvMUFXVGUpML08DaiQpstfp69n9VL3Z14SIJbKWFkziWPVcTZFBlu5
34qdANNzcNIVIdtWkz+fKa4Eq77C7l36x1tJnP+xFMUVj5ujSDJTh5qGJjQ1
NaGhLA85JU2YRQ5g/JcfN9ir4pGXatf4IoIN3Klk52vs+aXZ1DZDOZBq5Ap3
4QEUFEqLl2ZXYyF15qoCTqC8k7WpY3PcCVUyz0FHZKgLEKgYyJgw3q8qDZBi
IxBZNsKZtnxRrGbrrs3yAy+tbOJUuBvVhOmyRsyZNw4v96Ilqww21k5wTzqE
5ELqP2Eg1ZpdoZ3F2B7qwYTUK+xr40w4Sd+D4c5kqmRD7ELonEyEGlSqy0WH
KCWuZL2pO3vQN8nx2OqOyGYO68Ak4Qts11nwHsbu5gb6ZD+heqLM4jP6qh2y
AnjhxomOsFtyTZ03ES4jnCwnOGWOYOMHy/X/WGX/KW4WDvH1VOcWC1SZN4vd
uGT1bRvoOyXzgz8kges92NiY55dstd+H1IXpaM+nFZv5TVYSvHDXKr+iJtnO
OJnphhfuwmATlUK0khplac1leeI9HkBx6nGEVQ7wwq1v78Q59xzKfScTPaLh
6sXCZcybt5sSRVNJlTGL4sVJWqnQ5nUaq6kBaJRlc6I1Ida8cFtCL1Hh2njW
Q8elFzJB6vgmWRHTokfZV8LZG8Et7AQGxxfFws23Z4PZkLi3sdOffN2PaUWV
/AWazijXeIQe1+BX+uZ8P828ejJ7dqubPxGu+JDQ1iSuuNkj5doKpm8Q7P+g
MF7iemU8b0c7yWL1M6QlwpgtN+fZmltwjQK70MqSqt/WNl/xYq3OC6WLtTxa
nTpDXhlvMy9R4N/JyGSM+4PZFKQwrIpPM2SYvYZ84ijStxhecMRm9H2Yy/sz
DJKaJfhRRanZuGzVTg8oygeoo8naTXwEZ25pHeG+7KuJRH7aPPCY6gj6+lDj
U7ii/jlr5TrqeFk26b2C0VOvQcG2GyEhrfQMkmXiOQwEHmGrIISXiBfzPMIz
28Tvy6La3phNcRdGPYfd+Z7rXlF+LDKU9eCmLaRDDed5ivVwT60Nm8eOkmcD
4Bsrz/nDN9uz5cxhRlRnWXOS3O9d6L+44vxbjlN28Q30TVClZopMPPb/tPcW
0HVd17qwXtMkTSEp472lV0gpSdNA23AKaRgahxwwW7bAYmZmZmZmOmJmZmZL
sliWLKbv32uuvbfT2E7tm443xj/GPRm2o61z9tlzzrXmmvhNiSyOldkjHCOJ
iAz8NlLSn5BFurO7i4agv6Mv+AHBmebh+JFL5bJI15pRa31ScClCUNQ1/Xlx
izYVuPPE4Gl/Qhdc9/0F6V/9mETWwy6JyNc/mdaSWY4xXsxVQ/5JM+xv7/L9
/2P0jC4iKYrHDtwsfYUdyn08wc1Cw4UfU8dMkfbTqNT4BdloxIvddYwcuw81
Gifo1oUxqSSuLMU/0eXBe/gU6RxzUdM9mgDW2IuFNWzs9em9k7E/Z2tVkuyV
YDNEa3sh1pgvqNXhOlmyigye+UutKFY69sl9yiX7Ndprqy3BMDHUhLlsK332
4m5JrP2XhJ1qFEDH6lqLlbRnQiO7KFxX53WCIriXV0eUJLXbXOhHO7W9JpZq
JxQtxkqyTCedyAAJ0gpjnT2STJmxVK75QySf57AWPYbvk0wjU3TQOrksydTK
IUtw1GtR1JzGEQ0NjHCpqkUyVxjcSmICx3qwN8xAS1SqPDJx3PEIpk8+Tln2
Cuu3PidujImuJNK6CS6h3BkOd6E791W/gmrLM4g+FYYx0d12C3sHle08zDtX
30N4+6/mqmAn5+/SE6wY/hMehskotPiQIlWs3ka28hgQLWsOFc7Wqfkr10hU
tnwPrqArwgQWsvvymcum3xUfwT62ifuh9mcYxIO0R4cmOdJfspEXqd3GZit5
j15ZW6LIC/NFsxq1KFUvY9fchpVSbvU62ueJYds7kez6EkpUuaZLOelJrkt9
zl8Q3zQhe76aNnVwETzN1dV5aoc08NJGp6OvxMeY7HoyeUOynxDc2ySEG4XJ
klx2PovG8xwxoj3JS5JkV/hxkqSbfzM0XIcQFMiL39daniMM30jtRJpjEibo
Xd+0P8AqtIqYM5JShncTNXAh4yj2ajSljXm4voqJ03/hAQnjP7MsprxP5gbi
aEF4x76rdPyTYrxeLEDiv2AeIkLPjxAZtvo9Ph4GMHZqh5FZOTIDfkMxx8PD
A2k/1YW/jaHg36JzlKvI0dlKOVGNg030+XF8oOD09jvENVRbH0sh2NjjQYg6
GYadjB9grehrsMxooyda39wWK755ZfeFanu8naaC8hMWLBovQRcHR0RTE0Ja
yREUeScQM2Zb24W1s4cllWdQoMkbm5fHu5UkObCzb/atR6HhMgSfpClYBHIj
da/ht0g47Yc4+zz6ypqSj4gaEy9TZtOgxTOe4r4eqc9hvzdYksNuTz3FZJyF
xcJSliNJhrIcKvJ4iV20Iu5W5HA72Y2WgrPNuNbh9RHDLZfP4SzFKIcXcNGj
zTA1XSZrtpbiUNJsbVURVL2d1aB5VRJLCpQZayDmTBBqhuYlSezsbSNP/+dI
PmNMXzcT9hJpNoOYJFafirbeHu6fmNjQM8YMcaTrpHOmWO4Z42z4EQJ9jYjU
8kYDzA+MkiQKXCOw29dMbSkFWk+h/MIvsdxVSLdhMciRY/ejQf09un1R/TLU
QrTwZpYqNvK+TY+SE1rNF4OYUfKPe4bQ45KtnHmdCstLXaqWrRBmuBao6SJA
10kOCctBuYM9xKbw2Ezf+Nw10pBaXbC/hr7WPqztSwNZ/1VC74n3K+ydRbSG
LyUI9qcSJOHMLu0QOTH6fvD2/T8or1SRNdXa6iJpqsboD5Fcc5ryuLt7G3Jt
Yv8FJJ7yh5d+LJY3RAV2D4L830LhOZ4oLdXVJ9kEJZlibPYy0vJ4F3qjhwM9
Xd/KGDHG0doAg1EZ4qH2HYJ6DA98lwTUNRxH7w0xjhG+Kh7r8a4YP/UsnTuF
mn9EbyCFPDDdz8OVKY4+9B3DfbMUsjTN/ABzCb/kcZ+CbrmgNj37WTrXdJ0j
4WFuJKJB3ysYLAuygNYEJRqt64NkQxXurs8NywJanSymumifuJdY3OXGAtoa
QYBlAEa2RAGRfCSxbO3uw8I1j55uKOqEZA1YubVB37wahb6PCpbB95nykvdM
beibGA7+DXrGM2TtJQVVZ9P+xk8PjxKRmfcgoz0JFWqcATFnAyleUp71CvLz
K+AbmEjMmsuOISayavjXCjShHq6GOg07WSAMHzEhgqNuX2KjPoRXfVQW7Zo5
zZdQZ8hd+Gr7d6jwa2d1Dj0x53j82L8Oak5DuFRXRfgBKXlvYCjwKXqeqYFZ
+QQb6wnhqT/vozAVdAUTyGzi/dIJtqz5D7gbpaLE9BUa18GyZpL53FhymkMr
p3tww+62mxHEJ3bKUVEksXVjiDvrT5EKXGmVdkpeyUViVY3VBVJjs7P1skjq
FQGkxvqbkwQ19gfyi+Vx2ltjaHP9J5EbWdwvYSvObCwgyVTQ4CdcEX46EtvF
P8dUwU/g4x8LG8c06FjUY7e/QzqjTRq9qQuJ9ZRvLV6+U5QLs56S4jlO3s7e
Otc+C0vw1Y0iLVZo/CHJZaYhTfJz0GH6BMlFx30IbrEXUZfoz6vGK16UY247
69uyXJixHpHxMKI9XyG8BwY9s1fwhrRHDpYuUVc8BT50fs3ymPIeYT5YcspD
8BD2SUPP2Imb3iM3EM3c2hZcLeLoEReK1SXRLKzs4qwgmkhNL/h534a6BlNZ
NDNTExSyaE66gPjKDxBW/PJV0Uz7QaFthgjVEDRPLHOK7kKA8zPIPKNKONrj
0U/hQNgwhv5J0LEup67Cw/U12XZKGi3iWXd1E0yXtUhWXEpRF5XPBWT9UWTG
V1GprSueLE+iQpuiQ2ix/CNaHZ7B0In70HL+TVpgudVLBENE4cWmv6LcVB3R
ZyKlYH9zrS4SLD/A20kaBN6y32iidDWzXoqmcx/CQz+UIxUq3GRZbM63k+nh
k0BlDv9jWbwv3s85rZ28xVrrs4IjtyAxxNa7k1Bd8u3vRXzyg/eIT9YY+Bd0
h/wJNX2+tFhZgl16su2G18kbcjBJY5hWUsLQK80A+cqvkrCLbC7QQWIT60cp
70DdQDketzpJrLK310Wna7gkgfD4DMJ5Tyx8WZbApO576Dn7CiGUVzt9RPRM
5DqiROc7VM6QZudGEhiY2ISTN0+q7zQ+QBPJYvRTJAnsbM4jXYuD2LqkvYCD
wVhZAhupwpJS10eoDs9Zr/RXyFqqs8aQK7gUM6WTN2T/9kWkBKbg4vans79e
cLdD9ILI8t3uc5S2QnHNHJFQaqpKbuT6+rS8FSri9LmWGuIHR+dYiryOcbCN
sfAniNlOwdVSDit/ohp5Gn+iyxHaASSD4BgNjnZmJMeEWbz9n4XaUI0+h4pT
1jTJSiIoMNCJvq2wRlVJams73NvB4tnHkXPhLHGpLzuYqNucHUK59vdJPfn4
VeC8wyAlsjUFx/CVHDXsl99DUctU53w59Rivyc/uhKTHsDNTKwli1VXYlIJn
kGHwIdW27m1clgWRlcVTj6WtbdcK4npmLmf6l6jG3tirlNjRG/C2sIV5dG5p
lfd7UhGeYEV19wbLXG+rz+dlv8Xu5LznNulf5fpSgXCenKaATFLdmMT12c0l
eDo/ibhjAQhTDsVuyV2IDOeFByVWFpL6smgOoLl9DBVnbXRGxoITHjLI7xRR
2NrrJ62M3e56Uj/pWryDZX1mUHyOL6JJ45fEcwPPQThGTgonzAobhgfdzBO4
kv1Norckpl7aANvLa/AxNiS218X9FtUNbTKs9ZL6X4VjOg3lBk+g1fYpybNI
Sn6ErC3Bsrs5ln8g3i+uYRwxKv7IUrMH5uS2HXO3DhibliHZ8ZvIzX9DYvaV
jU0MBP0OrdHvkskamP8XmdmHg+pIVXaHv2YUuqcv84DkndBKPCM41eaIPemL
iymCr+ijQozuMFGWD4r0cV6wG3XBRFAYtRKnLy2uI0pwPwg2ea5OWt1srszC
qT8iX/MJlF74DcbLq0SqDjFw8nfoOP433uFQuoD5umoqb4/KexczMbycobt8
QEkqaFlsHyKcBao1ifpvGPko2O66U6R3f24SY6f/Dif9ZHLmhhN05VW+vdhN
M1y8E59SOvVJlkv3ZyPXJ5uLkB4fjej4dJS2z7CYBwE1kkAkOcxc3oS1dQY9
4KXMd6RVlZo7RrRUWr+NgJB7WL2DuPK/iMrgIxgO+S3q+viYgaU1nshbzOJ6
xtI6l80flbJzrDU35bwyxVNqg9+Cm6M9lG36MHvyCTZa45P63tFOB+1OYVwW
36E+kPgY3kC7vjXP+c28avW/YdBBn3R+utbrKHSL5A8x00xIEsmaZ4iAzqF1
NMUHcMzViiMY8Oeh78WxBZlZY1lVUAliFtA5XIz+HnyCPmD4rpIwthsK6PQN
0OVY6/ONybIweqq0eFA5SV/phMxcURhScSUONzCYYAUTwXNXlFejqiwXMW7G
sE0bY3n0n15nm3wo8to+rQNxJ4NRIeh9rHMDfWiSj4bJ1OeFENMzVVw0d6E0
xZmUUk9XJD1Wx1gysNGHLg/ex+SW2CIWKn4BBVN18DI/yXOxVlows0kk32Tx
2MPMg/14IcqrBRrQDhfOgNPWbLHLcQU2ICE2SfCVMh+Swxq7HdWkj6q9OLcY
WEqIIRdOf7oh6SNPc38qiWYx72Q/EUar5QhanN7hZurGjpSX6PZNxTvJgkmU
JZzxsT9EcOrvYR1cSqm7O8RH3EjxgUJNH/Hap6UKoKuqWHj8DEFJ0bnQ0n7N
hpEEia1hBNjFYnz7Kh75oWAyRdkGkcn0aUKqHl6At2E0RfU3mlT4EhW0tbpd
Dzz04hDkcbtgu5pIQmpvayIhdRdYUdWuosWYUqj5OsaIPBuK3M4ZUUh34eK6
cO5HnCeupF/QgYZ1DZwFpTBnehTLGn9nNT6yvaVf744jWecY0BHWp+YlIUVl
1VNLR0zeX+WD+kqwORbP/BkKa+4Ap5i5Uj0Le3Va/YWEZORUD33LPIpYuHny
2oXN9pdRYqIl+JtR4kF9J6oMffB8njo8U5/DWA6vRPIOOM5a36+icLsKZree
r0DiX9hAPemJN6YqCTjZK/FZhl18Y+HsXkK2SxBaVw+uCmetAyHO6Zje/XTh
sEnIOoLNQSEsjzepBI69vIO7aN5sge0vkZL+uCQcFqJgvSFdUS9TkXtY0UvY
bnqPDFln/RRMLG3IwjkU/jtSZMDAd5B4Toc2ZbCON3qKC2gLbJUkycKJGsol
DqYom2KqpJkL59sIioik8zOnjCe3D3e2sKTyNFY8tOmcqdS5H6W+HH/gUkcn
Bk/ej/4zfyO3yM3YUeBgL3T9tKkyda/h98IacUScgWjS3oWD3X3Eq/Nq3fTE
P2J3OAm+GQ8iRNhFloHFHxulJpzwan+Bp1ESqjV+wmaHyT642GgQkOqgdPqT
AuLpPwgGGnKjQxEaGgJ/R22o6TnAPyIWcdHBcDHSgL5PHmZvIKePRDlFCu55
hHoQQcsfjDnTL0vrF3iNqclp+AbewfJKd4vaqyj4OMZC7mUjNujx+uJfJxGb
u5cwqr4iMsC8JRChao4IFJx+KjzS1UNp3yxWDN+gehDs7cqqomWhjxjlZa6H
bp9ESUT+gbx0ubbFih5quzaPpDuclUnVjPVuJzHZ2M6bFHwsyeMocLDk07v0
jmI40YHXjWaoC4bu3YI6D0KGS4EkorXxS/AWjS5W5HV4eQg1Dfrcowg6irqu
abkgbH9+inxyXz1eLzRTESo//cHWsuCY3U8DEzqGJ68V1W2c4ftrGGhn8Jkt
LS2sS7x9gMUY6T0/+RTxMOBrIzsF8Xgi5nkykaUgY4K2Cx1EY+PZd4tKoSjF
g1vHHdxGyPN5nbzKgKJ+JWmrJY4UwdrKFs6GTjyZbfIuImrHsF2ZSQwW/pWp
W9/bpPSHecA5VJ2z54vzO9SPExTEA4pD41n0yAwRakn5cVTF8Jb4kYJwKpz3
EPRbnv6LpNuiQkvpK6tsX0GL8auEXO6YfR4bOV8nCitjpOziFwUmt8HcmZtq
89E/4ljee+vwz3wIQWkPwMInhc0hkc7LncYiNAvWQrS2mjRATaZiusWNj52N
f5st0mtkJB9awm/3VvsR4l+B2Y1twebbZmp+e3tXhEMTZUWiOiay0zqjA7Gn
g1Gkrwcs8EJofadOWBvlItL5LlTX6ipJ4mlqqiPxdBZZ8cRAwKuIPB/MTjLZ
zOtcHoaajwXszdyJVyNOD8Eqo4lqbpd1XsKKwevMEpOe+UyFBU4ln6HTZ2tx
9XOihNhcv6iov0oD6+ipVkzfwYrxEWRbqEjnNV1PsxMkpvoQ7SD7kBEY+Y5i
IscBhbovEfezy89hLuEXJKGBygHZjB+MKYCqYL8dyTuP3YzHpCdq6+KdFzGR
f0V21fBtIl0byd7IV9NFpuYLqNP5OfVlkuoVzrm8JG4ppFcpTskMljbQHeIG
WkGdrz7U1NVx/pwaNDQ1b4OmpqYgH00jXwxv3XgvSZJidcZOxslEx+VSKt1B
RFwvztn0oNjqQSSl/lGW1MLKBvqC7kdn3NsIyX0IvhH/gJd2AmH/SZLa3t8R
3DpDWFqE0T02Q74Jq7gwyt5sVaTzs6hM9rFcOmMIcSv/Q3PMNfTI9YzCU0XH
PwrPzAcJkXZvpIs+OZcQhAKNP6JaXzLyvoz2dAVGPhKOolNP4Jz9IMKyLgkm
RzdiLT7gWeG28xgJ5sWaC0NzkqBa7aPwXooWtLLexV75KcnZYICDkblPUxjL
3duSEDClh70SboN4TWdUXPgFq66VLq/0xVF1jmfSMwzK9cw12k4U1uYgvMx8
MbA4AG+XMizu45c3FMwXKWqv6V/FC5qcTtKY3vqOFV7DYKQGn4DbWZe25JWW
BryBoZD7kSJoAY+0h2HvpJBbfC5UusDAMpu3iKR8ESHJRuRrsfYgdvis6L8m
05g7Wc2rkzRMMBRXKAmEZenDUx5AaOafuGILEYy2039EU24Z5Sw7wnRkgYy1
crzaDB01rtjaeIm9uxPvZ1jpOYV21zeIsu21LUkgpSqOZLtRLrHDXTJWpuZq
SU/FJv4BmZWD0gOteQqmvK4b7dmLBR7yrilO4v5ZTGGE0tlrJHE7Z/LuLMqy
89HQ3o62tnZWlNvRIYiho3sE61ypibVEX6d64+mKCNgbs3pjU7jEN2GZRWQ+
e33ycZGUcOGcib7ghxwN4VC/FInFy7s8X6btAW9fJUxeLJYjPYpoE1KW2aHP
ilOXMkUx3wPPrlio2rTATS8eh0WfQ2HmW8iu4f7wRqovbaDd3ib6eWRtimTh
4qiBZstAJYmtiYpmsoKTFC/QXBpmmK/5GyLb2YYnjXvKlKSCqZ4oZV78ZhxP
z8uem70MvbQpbrnb+BSqrJURcyJcthp2Ll9BvCovI09L/BMOJnLF392NzOK3
SNKhfqcwfHGF7jUjuNPhOvoSnhhdW+mNoaCDZwqrhtu+VsqidbEzjaywAGH3
BQQECNcCwrIwvfOv0t2dToeVZQoGNxjS4hIa/c3g3ngZu5+9cFmSLkPycjBO
pZDD5QLCL5KPwiinL/5LIqG8KI2km+HyHl/E1WGidL+P5A6OXRWm6SGYBneg
X/EAbCIb+cK/cpmCYitGb1Lck8VKXxP8ZN3wsyg7bi0jSYfGx9J9iypOYT3e
jVbEel8HMrVeRrXm/8XB3o4k3G79P2P27YfJLTFw55M2GZLvmTAtvJN+Drsl
30SuoSliz0fLwl3qHJbNx6bYX1M1nNTRvLw2Au/MP1DrmT+zTMcn0KH8NtK0
3kANL7qh7yhI5fVTSWVRSsqflKzU/4aDdYx0d7BtS386O7vQOzKLzQOIDhEr
dN3DnMIaZrGT4FI/wOVGR5hHjP6nqpgpyCLY/2ZRDVxNO7wHLBcjNIadn73I
t/wtMrL+Jkm3f7CPmgqKnN+mytaMBnNRut8TDnle+JasaoapkO/TaBoV7wpc
WePPIh2dLPbPXprV9jiaoUwWzpXJOboWGGZKrGur5EbnqvN59LaMEbBMk9t7
sn5mdeZsUkuP6l8p8uHswksKllqaqehRK/44TSFNUvNAklGaJN3xnBpYiGHC
uegfC/zckyeR9Iwkysi++fanUayqiZILv0OrE8H+4HJvImKT74OH4BDs7e/f
QLBfkPYs27H8j78v3Cy1YRjUjrUDfEmW7TbGIw2gbpqIzpU9wd+YRKm7EVxq
5nDxP1PEfELcvsFVI/DTjCHQ4Z2GF1DdwkvTC42VKRh5eLgvYqrdju1xHzT5
P45mn6fhnPYC4is+kAUckxrHR3Cf1UWb9V8oy6EXloyKQr63mIG06n4Bi6ce
FZR0I7y7EzjE7HFzTJe10lvY8BHG5Rm3j7B48hEqGS4I4q2105XRsoAvNkaT
Yi7ydqXvdDfnFnh/Gm/fDU17lzAjGMBvjluBdAB3+6dBLVgXbyrIdJXGdNT1
eHLkA7sHkX1Bi75tNN0G6xMVKIvlCHKxxabnPilTafoUi2aFW/sxa1TpqgB3
MBlnAev0XES7msPIyApeaa3Cyfo/Kla+WqssmbWDc2vQdi7iWRSf5zA73sjn
4uo6kXu4sNguiw3Nf0Cu59sYDb4XPnkfIaTweVlsXv7h9Lnij/RRoqFKYvNI
cICrbaHge4hDGFbmsaz5PAUtcrqyiMXh2kboC8miUuSwiBeQEvgg7V9mQrJX
vtVpspt2VudksXV7v0Nii47jzfbMid9dXkRBIAcirqk5jY3crxFNtXENktjq
Df3xfpoOtLKPYq/sxBdEDjQPhqNL/yFka/L0fLP/S6iP+hWvJ8l8TtiGW0q0
3D9/HZkdXG6Er1sh5vY+LjOB59XCpomWyoyZYziPxc3d/1RZ8klRDRimdyJc
NQrpKq7Yb3sZGvbdcNNPQKDn59HVEyC3t19pw1LKjxFrp0nHZmLZeSogYgmC
e8RbWTvE8lzxh2ZIO+VCAkxPPwlTy3y0NU5w3t9NDsaS8hNoNucjct2cVVFv
4ENFKWmBj+PS2YfJ0WSD7be395Cj9Ryqte+VYMv7dZ/EzLsPwyp4DPou3Xyy
TFoWwjz4aTjVrYr5RN4TMFTWJ/nnLBRQeMxKNHv/IdDqoCT1ETOFsKj6NLK0
X+X9+SJ4um/OX3F5Y+r8jVWoFP/if0KCvGGvrw3LiBIG6Mt593XsL1bA2cQX
tYt7OGT2sKMJ/Ps2brUM+XqWjyTFkr45GNryMM1I8OPw8K0lmKB0628xSBxZ
ioMq1HEYbOBIUiwqVSdCryK33QUd62LBos5FhIoDok/7YrvwC2jOfUqQbhSC
XMsoGcxF+RXs9rdgVu0ZciuNw0+h5ANLtKRlYOrcw5g98zChcbBXe9M4pc4a
bZ9TkuQ4dPpB9J9+Bsp2gwhPnyQ5KmwDYevB6yE3u9/HSAj3JYcL8+W2IeEE
jlfhVm0qs2pH00Q53on9S+NYOPEI0rU5sn1g/t9oHuPG9qKSyvWFeJsUGZPi
YtdEx2TvRNhJS82JcLMwh7mJCZziJO/kM5cfS1JkfqhyVCOiz0cK6t8OWTEu
PPtv9rKgqX4p973tX8FB+T1IOecHJ904MnSqMo7z8rrxNCk8sLY2DWXbHvjq
hsHFwB1Rp/2xkPhjzBd9H3ZOzsTwwZ5LkqHHqhfPJJ7AibTTZOqMH3sO08oP
oyDiGTn4nuQeweGi8j3kNbAy1UqRmzxrU3rYtoErCDKJR5DwtRr+2tRbgNYn
UO/6Pi9dD5VymrdTW52PEU/4NzIrdrlHroTfrs3F8JnnkaP5V9To3Kv+Sfn9
S8qzqQApMRGIiElGftMENg54yvMTfD4lMjC+cQIm1rkchiuA9yrkGBhRhcXW
9pKUt8dFT4yHP0JvM7BTCPbGE2iPeo4qW0s67OSAWV8VD4cauMHRxJ2GHV/0
fQSHwrFv4usPP5NQRPlVS2BrTlUechimTFvQBMm/h6KUCgixsriBRO0P6bja
nBuReTyUpE/HVVBAMe2XzW1BmQVkwFMngRL7xzPVcVj9XeSaGxKISqPRfTKP
R5JL5ZTzbNQPGXKHzOP1GCfUqZxCpfpP0OL5/jU8vprJFIzAVFsYucVBUVGD
mgoF4tyMYJM6ztb09eL7Eq8X13dwMrQOMcqRSNNwJSs4VNufqlPHJ/JkXrc8
ghITI0HjREBd2AIFgR9RnD+y9A1W53W3yLzskiRermvtAlcnb8QcD0GP1Wt0
1DhEeyJf93maj712eUtJCvxJ2f54TUOkadrQNqlrMKDHLMvrRtmFX6PZ4Xn+
9rvRY/Q0Zt96GEY+w3CI4JHL4aY+6kJh8WKLXA36uiQtF8Sp8MKsrYUxKajT
H5FLw27+qVDBburDUh0F6xTN19fgZVwlwTfgNKsXGkOYXQSGNg+vprw2BxFh
F46x7eunUk6LO9inbAimNrz41Mi6HJbGCooA1zVIJWUCty9X4XL692mV2Bun
I6puDIo4WzoNcqrPEYLdweH+V0R+h8QEEb+7g4PgFhpEt65WVycGRKTooUDn
AUG3xCM3pV3mNwsgU/OJozLyT3A/aWAgEjs7ewg15mGkmfJgqT13b3cdF48+
iFZNPuQ6s2KRyGImX6IBTxInl/GvjD0biEzLFBl5X2J6t18q3kvUhGb2+9gr
OfoFcemzrBqLnGUZHKePbFwaULox57dGEGwXg9Gtq5lgVuwZYxdC14jzxHiJ
3xNLGzgWUif45ZHCxs+kGGy+9S+RlvnsVX63PY1Gh2PEOGXfCozMX0FZcQ7x
u1g8fRdWhyTUCGcPzu+V/EzhV+G8Y+q4DemSkixhK5i8hEKzt+BgmIPpyRWp
4Gdjb4tGEtmEf0i62zfuMcHs7kBj9SgyNF8lr393bUEKvE5UBJA6SfPm3zYw
vqEkWWexFvz4bWvVwF7RnVziYdUEKthk8oCMy11nGiioMXWqmNtvsZI0yu5A
K+ZPPAqF5pOo0r1fTWbaNRplE8MJljDzy0BlSwc6miuR4WcGq6TRG9VGnBHZ
7l4s2OummXC5kMNLqIzfIEQm5h5KE+UwnyQ8/R1IOR+EQM0E1s5IN+kdmqTy
0aqsk8T6nskseaKEmV08tCwasdvdjJjWHI44fF5wvnK/iaH838GPkuY/gKtZ
HkLcyxlStIygdKLMBCqpx4j5EZ6vYHNzE/5WSai+8EPWXSrp4l77l4nxATE9
1Pu4u3coM97bgSONTzedxEr6D7g7pejCpWqez1psz6XW2WQNK3pfbNITOBhO
khi/mReFvrMvEBRdnYfyhU8uc/m4FMydwco0RAb5wz8oEqkVA1jdv+5xKTF8
XFjnJ4JqEKDO8XfTtXVlx+4OceFiZw6o/jZ6/N6lJ9d1LERpPw+WsKm2LQF/
RmvMi8T0si6nL4tEszYMLesK2Bll4WBxFnVzgjdyWtAzF+wxH/lLis1YuPrw
XuCkMLJZirO7JbbbtIbg1bzzKPrAHGkmJwV13os4bV6EeHmoVm4dFdyn0eMP
Ylxw+G3DJmAWMKYkqXtzd77elxRPYiLqDxxfsmUc+1trhDXX7fMWNmYWaQQe
e1+V4BscLrZLbF/z0RWEzN2GwZLka9gua5eDdYz1daO7u1v4Sfy7b0yOgV8v
b3RWFJlldrfAhGKKc/lrh8DX53Poqj8lFWKwbAU6/o7t/K8g+Vw4IoX1fiaq
iVmTsoKsDngJ3aGPUVlDYtVxzv7vYG6+UziQ+xCoE8ydoK3L8BDOuSgVT4y5
P0k61zA0GQ2q/41Gg98gPYoDXbXUjtEjJozwFu8MXVUolI3gbJiKKq17aRqP
tObnunNpzXd7KOOs3QCicqUeAUH3b2xRBu+VbFWsZPwEDV5vkwBWJnmxxlia
OVV7TuYXCf6Hvlg29yPhcNiQbRjWSFCq/TSq1H+MnY31G0jg85SJyPXRxwVd
K7h4+X4Ovr6+wi99QzIwvf3vhPAFKvb5IKwehpZ1lNyJt78bRXFKwjNasPUl
taHgSqvg7jxLnKv39CJqtDzL4FkyKHOkKvQ9DIbch+xGbfjkPkbdIBKOfH1r
Fg9OGrrJpVV2Nu6IORGCTtMjdF/3eBd0nvgzjw5l2iHStwr2htmoFc7/5oVe
4lKM21FSRom6ahJgrqyE3N8igVQU1tFXNfeuyUpotX8IR+M1cDxZBVuFX4bC
RptI2N3i+Ybt5Snq22wyM4SROy8OWk/+vSSL/bmLmD/5B1J7BUava9xwN2xP
INraB+1rh0rXS8xxpn+NMpnmWV3Qcqwlw1Gh9yCigu8hLqBeOCS63xR8i8co
wsauTWabk2UTa5dHwhqQsQBuR3EUj1zUdbvx8sUrY1dH5uaFESsq7N1lrrsF
cSjLqvNadO/kNGWEmrmiVfknAgv+C/Nd5QjxKBeOAwVS0uuJFe6RR4jrVapP
osPlBban5LYLQQeNnBB00ImHEZ51idKnghkv/Xo6P5uArswTlfm3CR56/Plo
6eEHwpVRdvwU9P316aDfK3r7qqNUk4PBsw/wgb1BvjdmurAB8hMKMLUtzmgm
niuLW5EZJid9W3mvnfpJePnehokiZ6Dp90CloDDqhG3XfQRzjclIPBOJdN0k
nA2rg52iV05KKFJ8eYVbJ6/+6J9SyCz2C/Wmew+FR8jlaBF5KXxWg6oh9kvu
oCZYfZ96zLzzB0KDaDD4Ffqrq+FlW0hq57VMTeilvUMsLj/9Cq5MtMninWnm
jcqD7h9C22OYtcIoSUheDWGeJJ7EgvPE3Bg1P2SYpksf3ZjuQ8kHejgbo4mj
OQyKVU9mLgsiNqj9RvCQfoqO+gF1mW+fUut8TtxMYeXjYp2MPR+aoGmMjvQW
lhnHTOdFVHgV02pNVY+FT3qHNIxG4mZVdSVxs6+CV9xX9XjI3LR34ZWUa0VZ
Ije/itLeeg73qWeEldT/wkzhj3DKuwMjxx7DwOnfESwO67Ra7CpCTfkQPkpW
xxu5Z1F+QhtVKobS1/Y6vEqMbC2v5uZV44rMyFRPXlPW1abDGXkyBKUeBXIN
zOo6yeattPPQzzyCg75QmZHzBi+R9ZSm9SaW5q9cs0qlos7D3RVMdlUjL17w
ODzjMHEDp+ec9J37hzhv2wNP3WgEeH0e8Y6nWdPXsVDh73zLTFQ0jZMqCK8d
k+ZyDF9cxHDwr9CTdo4QItPqzsuMNbJJpg763d42mbHT6/OIPBmMcD0rTAf9
HqyB6LRfPbLd3YhTA7HqaDS+D42Gv0VPcTzMw14kLikMTguawFVi3sH+NiY+
fBBjpx9FUtE8MXdhZVf6tbfYI7fQp4Etxd08y+WRKPF2qWsEio/Maff7pP4d
B5eqlKRKZZY97lP+JWmAYDN/qtW9hsGSzcSAo9ZnB9FUnIYIb2c4ugUgLqcS
HePLcqn4J3hNAVDByHPwboe+eQ0Sbb6OmPQ3sDQuMLJyAOP1I7gyt4be6cs4
KTjveqkdzPqQ+L0teHJ1/s+gN/IvSK9TpSp+CWZmc3MeGtbVgkOTjoOVRbmj
RPjPT9MPIRoeGHR4jhabWVQs3KJGBO3wEAbOP4zpsiBqTiSsC6sHeC7A5ThK
P7Jm0V65YXk8z4mP6w5Vh7HfKKxDpF6lOwlUxEQ8x/Z63sNsIm+srDRylzXL
RF4tYtRNOJJF4iNYH6lUkuZMbFRnoE7tv5Cv9SSSIxs1P8l0/kbhvJtEvIcz
vMJSUdQ4gEvr+1SD+YsbMvtLSMoc4crY6Ak4BPwKMfXj6L20Sj3yzAVii5rh
Nc6ubskLgUdNhIXQ6y1VzsvjTCanakhlBOkGiQr7q/C1CUSkYG636XM4idBk
S7LRWl1ViGXjxZ5siCfyk2PgH/t7WnwOEdyyWB2Zljjcb/xXKr4fHZyQWt5k
R48lslmb4T+z1Wg2W6s4yztN1ZFF+KXzr9svDZ6WnMltsb9Eu+OzbG63VEg8
5MAnqAXq2qK+YvgaPsuhEsgvpXtvyNzPo6V3jUf99JXhGfSDzzNuCm9l058E
fkqLg4jLjbHmanggQu7PlXhaWR/DPSIjN5mnEUG8obFcm5/k+Vkf8PcUjGLm
3YcweO4h5qoiMquU7veeQhmq6dxvn8iVfZYh5Ycx8dFD1FXCPj67uCPzdKm1
jSAZVLM0cVj1DRS68kpxH+1YbJVnSLZona4PrEO5t7gY+QPuo0SpigC1kM8+
Nv6uWu0BGs8xPbGsdA13r3fIcU7eJVfQxOo6wyfg85hcXEbV0AIax5ao8Gn/
4FDupitWJBMrh5oDiPSGwRCZlQnZ3D6ocfJSkkpwc/N4VjHZVA2bhV9BR96f
YB48Bj2vEQx7nqAlOpxhISxND7qfXvEFvCy4gyXHzdDhFk8POtfBx7sM2rwO
Q59RWIWM89t/HeOpidTB7FaoR5JKsbQUzuMwOAimRq81DxDub+2g5H1LaGZY
4ghL1ibfj5FEXiQzEHmeocVLS3h/+wra7J9F3YX/RqqOOVxM81iM4PrcJGaq
iKvxAuXc4hHg+XlMT1dIydLWzj7e4KcwgW/u49RqJrHLN9SLt8VHRsns6u0d
IHaFWelgJvUXmCv6ARIrOPJiS+ccLr7/EIZPPwSfCBU+IaqeJztzzVVRfsaB
ogt9Bk9TNL+jtokPtasVpzd8D1W+TvT2/EYjfvjreSHpQjyxi03+ZdmXlf4J
Wsjv5RtAO/sDwU59iwoth+M5QF6jyQOsi5VKPzvdXyHnblT1D9RiFh9Sx0+t
f2dfSWxz8W0nPNxE27vR1u4msW1+ZQM9gQ+iO+4I83XZCEGZbc4eIdSEtFae
L7NtZ3OH2OZrYY3J6PtxpfgeFPfO4YLLEFxjLmJQ/y+YfvcRgW0c5qp2mA9R
ifZ/nydKCuNI+w0aP4cYxRzV6C+v7kmlVrGO4pDRHlMeNlUJgcI2B9GexfDQ
SxDcJx+BJXXIPcZjnayfYr/JTKoSW2zLobZimpEqzqi8KKjpwTMiOJ3gWGp9
condTDvYDZiamDZIgs8y/g3yi96T0G6ZYi33ewmDodQOTzmQvf1tKYltax9F
5Uu7/R1ioco3Ea4SDG99D0yFPIDd0jsQ1zCG+ALez9pdnIv+o39HQNwzBPK3
vrXED5eEN4mnrSffxKW3H8bScAuB1QhykBCFnRy5nbQ8oE2lMzEnwlAbXIGW
ujE+ElPvHJVXROuYy+jxB4Oxku68PFRLkxsZ4Of6VA82MgJRrqpKH50aX76G
lTfZzCXlerG/io40T5gbGMHE2AwucQ3ibNfPXMMoSaixi1em5hocR1TcL6SS
p7wQNY69Ik7PmFnulGsMLCzjCYFAsLBk8YSYhiL4XAAG/P/I+4ALCzC3vEvn
f3DGDIqcdeCf8gjCUh7AztYyzpToQiXrqOApmaLx3XMYCVBGTccqPUp91yp/
4nvIB9D11iVp7g9pyVUUHWktWL+yTXMpUzWsUavpjgAfR/nAP5xvlq0qhlGf
ZcAzlIIGvYFM/n3zFjfq+aDntQ4fmDiXYmaXlR8uosHfBI4Vi9i+tfLD62KB
qYgimFkQGyP07QhLc2dnVa58yUv25mdfj9SilyTjx29szsLAsgCWJvmiH/RN
BHtE8Ba9ID7gJCTdlb4sKG1GENEgEgsHqb4kMfYBjB77PbTiP8A7uafQdOIs
Sj8wESzgfQQK72VQHbt7h5J4loUz5WSkluDnCq7swDm5UmK4YoBuH+tbJrhS
8cKZZwGHFFdeRBzxHYbQKHd1HSzOUIFNqkMcO+S0byief9O+dbXaRcTDLJIq
jg6x2uIIk4AhzPxnygclCbGRSSqCt+hhnEAu+cWpUllClRUlXEKV7lKKV5bQ
1HQZztt0wtsgRmTDN1CezQGSItxOkoRS004zfD20D1zhsOaeCpJ0bsJjmDjx
KKx83sVLgnXSY/KaaEDPwETwRyyCxpQk5XYxPQ2vZajDQDg/d7uPyQUQs30z
REh5fh+8NePp81oKG7yvOIfdxF9LG2czP5ok42+rQIRP1TWSucW+rasCOsR6
dxBM7LIxtCHshy3hlHczgVfj/H+qBlBVpMDCoR4WJgWUHm5td5Fk0z8+T9hF
3ekqNBI4ofIjWTZ1zRyaLtbAT5bNdPcUxz5wN8RO4V1ozHkWfZc4gqFZwBiM
fHihXUslb9uM6+AlgG3RLxBva0NLeOlh/bIsm2YfNz7mqd4Dmw2Poc7tKH3H
+sIVuseC4AGHC4c7+/ybORdgmvUOA1b5uFIb03mPTw8v6LtWNv++UUvWZ+ws
SrbCBTUd6KmrwSiClWx+VuxRyTdy8miihuAY13ugKHxbEsHWzh5NaOqOfI7w
RcOLX5VFkJhlz9PyVt6yCDaW14k91o62WEj+CYWjGGoVezEzySaQZz9H29zo
WvfyiIyqVaXijFSVQArkbe8eyD2nqXbcQ8wdzsVuxbeQZ6mHOOH8Pzy46u7n
XPBD2mmOExqa/AwBqkjBJVaPxPZHjW+kdOBzk/PjhXlcxXPkjohszOzgGyJJ
+0sVcDaPQNeasAc2h+hMyJjZ/p+U5Cl92iYIj+6iZE+Z058QFfvzu8XLRQFH
MRrya2Q3MJjBpyTme4XxHscu30BRIF9DzJkw2Ju4YTzwIQKIiqrppq+YFw54
t8g3eVvWOB9utbO/ixfy1eGU9iIqLXxQ+L4ViqqkJt474GXLEy89i508NK3r
hFTNBCk8UnbOBV5GNvSWkvjf42AoTub3eoQtFk8+SqeKh3UBK45Xunbhi/ze
HICbqT87uDm/v4692VxYm8ezYgjBTppApqUZ4iZ3/hOFc6riExZVTfMmRJvz
/MgWzjn5yI7iDSDV7bbEsCtbczIMiq2LHW/EyEhUkqp3E43j4Kfui5bAJ/iR
ncddULZzvOOfpUaKnPw2aaGqVlrjRPZHyLEyJZ0x29grL/Sd1Q2YuHJDd225
mvtbgrFWaJ8rAzkx2A72ORNP7saNRv8YWwXuUtSNYUmwlpJZdwM4GOUgL7VD
SefTeG/igeaLc7djbm5OIHBuYQW7hx/XO18nd2Iw1xdWJmYwN7WAZ3o3KxX/
T5TASfJgWD3c/bCX0QUleRRmcYTjpnouj7HZKrmLeWfnMkxswqjocae5StoH
hb4KRJ8IQXrYP4iH0WmG5MpMzK7CO/VRRKfch3N2PYjIvoSRqS2YV8eQ5Vrr
/08qZuwNzpJlstzZj3Mh2ngjV52mexyWfo7C93WhlTIK3VxDD8lEO9NJOOtV
sRn2LSydfwx7g1Km4g4cLM9hWftFKitvyOIJ1bGhhU+TjYumCrT19G6Hnp6e
cB89c8JzorddL2cpMXNr+4C80WDdIOpuamlzlpnZ2NpGzGwt0OMl5wNBMjMv
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\
\>"]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["\<\
rdml: Mathematica package for Real-Time qPCR data | \
https://github.com/ramiromagno/rdml\
\>", "History"],

Cell[" ", "FooterCell"]
},
Saveable->False,
ScreenStyleEnvironment->"Working",
WindowSize->{956, 1041},
WindowMargins->{{Automatic, 2}, {Automatic, 18}},
WindowTitle->"RDML (.rdml)",
PrivateNotebookOptions->{"FileOutlineCache"->False},
TaggingRules->{
 ScrollPosition -> {0., 36.}, "LinkTrails" -> "", "SearchTextTranslated" -> 
  ""},
FrontEndVersion->"11.0 for Linux x86 (64-bit) (September 21, 2016)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Reference.nb", 
  CharacterEncoding -> "UTF-8"]
]

